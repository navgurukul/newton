{
	"user-input-type-conversion_key1": "Introduction\n",
	"user-input-type-conversion_key2": "In this section, we want to take `input` from user using `python`. Then we'll also explore doing `type conversions` with that `input`.\n",
	"user-input-type-conversion_key3": "In the future, very often we will have to take some `input` from our users. To take an `input` in `Python`, we use `input`.\n",
	"user-input-type-conversion_key4": "Example 1 :-\n",
	"user-input-type-conversion_key5": "When it runs, `python` will stop and a cursor will appear. Here you have to put some `inputs`. Press `Enter` after you have made your `input`. Now, when you `print user_input`, whatever value you had to enter will be in the form of a `string` in the `user_input` `variable`.\n",
	"user-input-type-conversion_key6": "Example 2 :-\n",
	"user-input-type-conversion_key7": "Let us understand this in more detail by taking an example of another `input`.\n",
	"user-input-type-conversion_key8": "Look here that we have put a `string` inside the brackets of `raw_input`. The value of this `string` is `\"Enter a number\"`. Whatever `string` we put inside the inner brackets, that `string` is printed by `Python` before asking for `input`. It gives some hint to the user as to what to `input`. Like in the example above, `python` will print `\"Enter a number\"` before asking for `input`. And when the user presses `enter` after typing in a number (`input`), `variable` `number1` will have that value.  \n",
	"user-input-type-conversion_key9": "If we do print `number1` in the `python shell`, then whatever value we have entered, will be printed.\n",
	"user-input-type-conversion_key10": "`Type Conversion of User Inputs`\n",
	"user-input-type-conversion_key11": "Whenever we take user `input` from `input` to a `variable` it is in the `string` type. Meaning, whatever the user puts in, `raw_input` makes it a `string`.\n",
	"user-input-type-conversion_key12": "Here the data type of `number2` will be `string`. Whenever we take the value of a `variable` as `input` from `input`, that value is in the form of a `string`. If the user has to `input` a number, it will also be in the form of a `string`.\n",
	"user-input-type-conversion_key13": "Like if here we entered 25 then `number2` would contain \"25\". Any value that has `quotes` in front of it is a `string`. To convert it to `  INTEGER` we have to use `int()`.\n",
	"user-input-type-conversion_key14": "Now you know how to take user `input` in `python`. Do you know how computer take user `input` from user if don't know you can watch this video\n",
	"user-input-type-conversion_key15": "One more `type conversion and raw_input` example.\n",
	"user-input-type-conversion_key16": "Below is a final example to understand all these things better. This example prints two numbers by taking the `input` and multiplying them.\n",
	"user-input-type-conversion_key17": "Here it is important to understand that we convert `number_x` and `number_y` to `integer` before multiplying because with `input` we get `input` always in the form of a `string`.\n",
	"user-input-type-conversion_key18": "Fun Activity :\n",
	"user-input-type-conversion_key19": "*Run this example without converting `number_x` and `number_y` to `int` and see what `error` occurs. Google this `error` and try to solve it. Talk to your friends around you, too. For this, you will have to remove the lines with `number_x = int(number_x)` and `number_y = int(number_y)`.*\n"
}