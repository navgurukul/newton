{
	"user-input-type-conversion_key1": "name: type conversion\nsubmission_type: url\n",
	"user-input-type-conversion_key2": "# Introduction\n\n\n",
	"user-input-type-conversion_key3": "In this section we want to take `input` from user using `python`. Then we'll also explore doing type `conversions` with that `input`.\n",
	"user-input-type-conversion_key4": "In the future ,very often we will have to take some `input` from our users. To take an `input` in `Python` we use `input`. eg:\n",
	"user-input-type-conversion_key5": "When it runs, `python` will stop and a cursor will appear. Here you have to put some `inputs`. Press 'Enter' after you have made your `input`. Now when you `print` user_`input`, whatever value you had enter will be in the form of a `string` in the `user_`input`` `variable`.\n",
	"user-input-type-conversion_key6": "# One more Example\n\n\n",
	"user-input-type-conversion_key7": "Let us understand this in more detail by taking an example of another `input`.\n",
	"user-input-type-conversion_key8": "Look here that we have put a `string` inside the brackets of raw_`input`. The value of this `string` is \"enter a number\". Whatever `string` we put inside the inner brackets, that `string` is printed by `Python` before asking for `input`. It gives some hint to the user as to what to `input`. Like in the example above, `python` will print `\"Put a number\"` before asking for `input`. And when the user presses `enter`after typing in a number (`input`) ,`variable` `number 1` the value will have that value.\n",
	"user-input-type-conversion_key9": "If we do `print number1` in the `python` `shell`, then whatever value we have entered, will be printed.\n",
	"user-input-type-conversion_key10": "# Type `Conversion` of User `inputs`\n\n",
	"user-input-type-conversion_key11": "Whenever we take user `input` from `input` to a `variable` it is in the `string` type. Meaning, whatever the user puts in, raw_`input` makes it a `string`.\n",
	"user-input-type-conversion_key12": "Here the data type of `number 2` will be `string`. Whenever we take the value of a `variable` as `input` from `input`,that value is in the form of a `string`. If the user has also `input` a number, it will be in the form of a `string`.\n",
	"user-input-type-conversion_key13": "Like if here we entered 25 then `number 2` would contain \"25\". Any value that has 'quotes' in front of it is a `string`. To convert it to `integer` we have to use `int()`.\n",
	"user-input-type-conversion_key14": "##  One more type `conversion` and `raw_`input`` example.\n\n\n",
	"user-input-type-conversion_key15": "Below is a final example to understand all these things better. This example prints two numbers by taking the `input` and multiplying them.\n",
	"user-input-type-conversion_key16": "Here it is important to understand we convert `number_x` and `number_y` to `integer` before multiplying because with `input` we get `input` always in the form of a `string`.\n",
	"user-input-type-conversion_key17": "**Fun Activity:** Run this example without converting `number_x` and `number_y` to `int` and see what `error` occurs. Google this `error` and try to solve it. Talk to your friends around you too. For this you will have to remove the lines with `number_x = int(number_x)` and `number_y = int(number_y)`.\n"
}