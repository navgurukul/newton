[
	{
		"component": "text",
		"value": "In this exercise, you’ll learn a few new methods and functions that come with <span style=\"\">Python</span>. You’ll also learn about augmented assignment <span style=\"\">operators</span> and <span style=\"\">string</span> interpolation. These things don’t let you do anything you couldn't do before, but they are nice shortcuts to make coding easier."
	},
	{
		"component": "text",
		"value": "Bagels is a deduction game you can play with a friend. Your friend thinks up a random 3-digit number with no repeating digits, and you try to guess what the number is. After each guess, your friend gives you three types of clues:"
	},
	{
		"component": "text",
		"value": "<b>Bagels</b> – None of the three digits you guessed is in the secret number.",
		"decoration": {
			"type": "number",
			"value": 1
		}
	},
	{
		"component": "text",
		"value": "<b>Pico</b> – One of the digits is in the secret number, but your guess has the digit in the wrong place.",
		"decoration": {
			"type": "number",
			"value": 2
		}
	},
	{
		"component": "text",
		"value": "<b>Fermi</b> – Your guess has a correct digit in the correct place.",
		"decoration": {
			"type": "number",
			"value": 3
		}
	},
	{
		"component": "text",
		"value": "You can get multiple clues after each guess. If the secret number is 456 and your guess is 546 the clues would be “fermi pico pico”. The 6 provides “fermi” and the 5 and 4 provide “pico pico”."
	},
	{
		"component": "text",
		"value": "Topics covered"
	},
	{
		"component": "text",
		"value": "function returning the wrong value",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "typeconversion problems",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "import random<br>def getSecretNum(numDigits):<br># Returns a string that is numDigits long, made up of unique random digits.<br>  numbers = list(range(10))<br>  random.shuffle(numbers)<br>  secretNum = ''<br>  for i in range(numDigits):<br>&emsp;secretNum += (numbers[i])<br>  print (secretNum)<br><br>def getClues(guess, secretNum):<br># Returns a string with the pico, fermi, None clues to the user.<br>  if guess == secretNum:<br>&emsp;return 'You got it!'<br>  clue = []<br>  for i in range(len(guess)):<br>&emsp;if guess[i] == secretNum[i]:<br>&emsp;  clue.append('Fermi')<br>&emsp;elif guess[i] in secretNum:<br>&emsp;  clue.append('Pico')<br>&emsp;if len(clue) == 0:<br>&emsp;  return 'None'<br>  return ' '.join(clue)<br><br>def isOnlyDigits(num):<br># Returns True if num is a string made up only of digits. Otherwise returns False.<br>  if num = '':<br>&emsp;return False<br><br>  for i in num:<br>&emsp;if i not in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:<br>&emsp;  return False<br><br>def playAgain():<br># This function returns True if the player wants to play again, otherwise it returns False.<br>  play = input(\"Do you want to play again? Yes or No?\") <br>  return play.lower.startswith('y')<br><br>NUMDIGITS = 3<br>MAXGUESS = 10<br><br>print('I am thinking of a %s-digit number. Try to guess what it is.' % (NUMDIGITS))<br>print('Here are some clues:')<br>print('When I say:&emsp;That means:')<br>print('  Pico&emsp;&emsp; One digit is correct but in the wrong position.')<br>print('  Fermi&emsp;&emsp;One digit is correct and in the right position.')<br>print('  None&emsp;   No digit is correct.')<br><br>while True:<br>  secretNum = getSecretNum(NUMDIGITS)<br>  print('I have thought up a number. You have %s guesses to get it.' % (MAXGUESS))<br>  numGuesses = 1<br>  while numGuesses <= MAXGUESS:<br>&emsp;while len(guess) != NUMDIGITS or not isOnlyDigits(guess):<br>&emsp;  print 'Guess' + (numGuesses)<br>&emsp;  guess = input(\"Guess Again\")<br><br>&emsp;clue = getClues(guess, secretNum)<br>&emsp;print(clue)<br>&emsp;numGuesses += 1<br>&emsp;if guess == secretNum:<br>&emsp;  break<br>&emsp;if numGuesses < MAXGUESS:<br>&emsp;  print ('You ran out of guesses. The answer was ' + secretNum)<br>  if not playAgain:<br>&emsp;break<br>&emsp;"
	}
]