{
	"Logical_key1": "LOGICAL `OPERATOR` (and, or, not) :-\n",
	"Logical_key2": "`Logical operators` are used to combine conditional `statements`. They are used in any programming language to make decision based on multiple conditions in `python`, we use logical `operators` to determine whether a condition is `True` or `False` by taking operand values as base. Let's consider different logical `operators` that are used in `python` programming.\n",
	"Logical_key3": "(Logical `operators` help us to take decisions and make sure the required conditions are met to proceed.)\n",
	"Logical_key4": "`and :-`\n",
	"Logical_key5": "This `operator` is used to check that both the conditions it operates on must be `true`. If `both the conditions are true`, it will `return true`, otherwise (even if 1 condition is `false` or both conditions are `false`), the `output` will be `False`. \n",
	"Logical_key6": "Example : I want apples and oranges to make a fruit salad. Here, only one of them will not complete my salad, I want both.\n",
	"Logical_key7": "Example :-\n",
	"Logical_key8": "`Output` :-\n",
	"Logical_key9": "`False`\n",
	"Logical_key10": "Example :-\n",
	"Logical_key11": "Here, the number and 1 are both `true` so the answer is 1.\n",
	"Logical_key12": "If the `input` is 0 then the `output` will be 0 because one condition is `false`.\n",
	"Logical_key13": "`or :-`\n",
	"Logical_key14": "This `operator` is used to check that `one of the conditions it operates on must be true`. If `both the conditions are False`, it will return `False`, otherwise (if 1 condition is `false` or both conditions are `true`), the `output` will be `true`. \n",
	"Logical_key15": "Example: I want apples or oranges to make a fruit salad. Here, only one of them will be enough to complete my salad.\n",
	"Logical_key16": "Example :-\n",
	"Logical_key17": "`Output` :-\n",
	"Logical_key18": "`True`\n",
	"Logical_key19": "Example :-\n",
	"Logical_key20": "`Output` :-\n",
	"Logical_key21": "apple\n",
	"Logical_key22": "The `and` and `or` `operators` will give an `output` of the value at the moment their answer is determined. \n",
	"Logical_key23": "For Example, `1 and 2` gives the `output` as 2 because when checking if both conditions are correct, the `output` or answer of `and` can be determined when it has checked the second condition.\n",
	"Logical_key24": "Similarly, for `0 and 2` the `output` is 0 as at the time of checking the first condition, the answer of the `and` `operator` is determined to be `false` since the first condition is `false`.**\n\n",
	"Logical_key25": "For `or`, similar to `and`,  `1 or 2` will produce an `output` of 1 as even if the first condition is `true`, the `output` to the `or` is determined there. \n",
	"Logical_key26": "`0 or \"\"` will give `(empty `String`)` as the `output` is not 0 because the `output` is determined at the second condition.\n\n\n\n",
	"Logical_key27": "`not :-`\n",
	"Logical_key28": " This `operator` is used to get the opposite of the condition. So it gives the opposite `output` of whatever is the `output` of the condition. \n",
	"Logical_key29": "Example :-\n",
	"Logical_key30": "`Output` :-\n",
	"Logical_key31": "`False`\n",
	"Logical_key32": "c is actually greater than b so the condition c > b is `true` but adding `not` in front of it gives the opposite `output`, that is, `false`.\n\n#### Example :-\n\n\n",
	"Logical_key33": "`Output` :-\n",
	"Logical_key34": "`True`\n",
	"Logical_key35": "To understand logical `operator` and circuits watch this video\n"
}