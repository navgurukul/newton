{
	"Logical_key1": "name: Logical Operator \nsubmission_type: url\n",
	"Logical_key2": "### Logical `Operator`(and ,or ,not ) :- \n\n\n",
	"Logical_key3": "Logical `operators` are used to combine conditional `statements`.\nLogical `operators` are used in any programming language to make decision based on multiple conditions.in `python` ,we used logical `operators` to determine whether a condition is `True` or `False` by taking operand values as base.let's consider different logical `operators` that are used in `python` programming.\n",
	"Logical_key4": "(logical `operators` ka use sabhi programmo me kayi condition me decision lene ke liye use kiya jata hai `python` me hum decision lene ke liye logical `operator` ka use karte hai ki kya humare operand me lagayi gayi condition `True` hai ya Fasle hai.)\n",
	"Logical_key5": "`and :-`  and `operator` ka istemal hum `tab` karte hai jab dono condition ko check krwani ho agar dono condition `true` hogi to `output` `true` ayega agr dono me se koi ek bhi condition galat hui to `false` aayega . kyunki and me dono condition `true` hone par hi `output` `True` aata hai.\n",
	"Logical_key6": "**Example :-**\n",
	"Logical_key7": "`Output :-`\n",
	"Logical_key8": "`False`\n",
	"Logical_key9": "**Example :-**\n",
	"Logical_key10": "`Iss example mai `input` mai 1 deti hu toh `output` 1 hoga kuki dono values `True` hoga`\n",
	"Logical_key11": "`Iss example mai `input` mai 0 deti hu toh `output` 0 hoga kuki ek  value `False` hoga`\n",
	"Logical_key12": "`or :-`  or `operator` me koi bhi ek condition `true` hoti hai to `output` `true` milta hai isme jaruri nahi hai ki dono conditon sahi ho, isme agar dono condition `false` ho `tab`hi `output` `False` aati hai.\n",
	"Logical_key13": "**Example :-**\n",
	"Logical_key14": "`Output :-`\n",
	"Logical_key15": "`True`\n",
	"Logical_key16": "**Example :-**\n",
	"Logical_key17": "`Output :-`\n",
	"Logical_key18": "`apple`\n",
	"Logical_key19": "`not :-` not `operator` ka jab use karte hai tb wo condition ke opposite `output` dega ,agar condition `true` hogi to `output` `false` ayega or agr `false` hogi to `output` `true` deta hai.\n",
	"Logical_key20": "**Example :-**\n",
	"Logical_key21": "`Output :-`\n",
	"Logical_key22": "`False`\n",
	"Logical_key23": "**Example :-**\n",
	"Logical_key24": "`Output :-`\n",
	"Logical_key25": "`True`\n"
}