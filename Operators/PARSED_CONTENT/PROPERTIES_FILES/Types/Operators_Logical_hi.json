{
    "Logical_key1": "## तार्किक `OPERATOR` (और, या, नहीं) :-\n\n\n",
    "Logical_key2": "`Logical `संचालकों`��:�`c3RhdGVtZW50cw==`+���a������>3B����`cHl0aG9u`\u001b�?(m4���\u0018a������\f�A��C`b3BlcmF0b3Jz`��\u0006�r��`VHJ1ZQ==``RmFsc2U=`�b��OGw���`b3BlcmF0b3Jz`ӝ4\u0018`cHl0aG9u`3B��o�\u001b��",
    "Logical_key3": "(तार्किक `operators` हमें निर्णय लेने में मदद करता है और सुनिश्चित करता है कि आगे बढ़ने के लिए आवश्यक शर्तें पूरी होती हैं।)\n",
    "Logical_key4": "### `and :-`\n\n",
    "Logical_key5": "इस `operator` का उपयोग यह जांचने के लिए किया जाता है कि यह जिन दोनों स्थितियों पर काम करता है वह `true` होनी चाहिए। यदि `both the conditions are `true`�r�`cmV0dXJuIA==`���` होगा, अन्यथा (भले ही 1 शर्त `false` हो या दोनों स्थितियां `false` हों), `output` होगा .\n",
    "Logical_key6": "उदाहरण : मुझे फलों का सलाद बनाने के लिए सेब और संतरे चाहिए। यहाँ, उनमें से केवल एक ही मेरा सलाद पूरा नहीं करेगा, मुझे दोनों चाहिए।\n",
    "Logical_key7": "#### उदाहरण :-\n\n\n",
    "Logical_key8": "#### `Output`: -\n\n\n",
    "Logical_key9": "`��<��`\n",
    "Logical_key10": "#### उदाहरण :-\n\n\n",
    "Logical_key11": "यहाँ, संख्या और 1 दोनों `true` हैं तो उत्तर 1 है।\n",
    "Logical_key12": "अगर `input` 0 है तो `output` 0 होगा क्योंकि एक शर्त `false` है।\n",
    "Logical_key13": "### `or :-`\n\n",
    "Logical_key14": "इस `operator` का उपयोग यह जांचने के लिए किया जाता है कि `one of the conditions it operates on must be `true`�wt`Ym90aCB0aGUgY29uZGl0aW9ucyBhcmUg`\u0015�l`, यह `False` लौटाएगा, अन्यथा (यदि 1 शर्त `false` है या दोनों स्थितियां `true` हैं), तो `output` `tr` होगा।\n",
    "Logical_key15": "उदाहरण: मुझे फलों का सलाद बनाने के लिए सेब या संतरे चाहिए। यहाँ, उनमें से केवल एक ही मेरे सलाद को पूरा करने के लिए पर्याप्त होगा।\n",
    "Logical_key16": "#### उदाहरण :-\n\n\n",
    "Logical_key17": "#### `Output`: -\n\n\n",
    "Logical_key18": "`�mF3�`\n",
    "Logical_key19": "#### उदाहरण :-\n\n",
    "Logical_key20": "#### `Output`: -\n\n\n",
    "Logical_key21": "सेब\n",
    "Logical_key22": "`and` और `or` `operators` उनके उत्तर के निर्धारण के समय मान का एक `output` देंगे।\n",
    "Logical_key23": "उदाहरण के लिए, `1 and 2` `output` को 2 के रूप में देता है क्योंकि जांच करते समय कि दोनों स्थितियां सही हैं, `output` या `and` का उत्तर तब निर्धारित किया जा सकता है जब उसने दूसरी स्थिति की जांच की हो।\n",
    "Logical_key24": "इसी तरह, `0 and 2` के लिए `output` 0 है क्योंकि पहली शर्त की जांच के समय, `and` `operator` का उत्तर `false` होना निर्धारित है क्योंकि पहली शर्त `false=`.**\n\n",
    "Logical_key25": "`or` के लिए, `and` के समान, `1 or 2` 1 का `output` उत्पन्न करेगा, भले ही पहली शर्त `true` हो, `output` से `or` वहां निर्धारित किया जाता है।\n",
    "Logical_key26": "`0 or \"\"` `(empty ` स्ट्रिंग`)` देगा क्योंकि `output` 0 नहीं है क्योंकि `output` दूसरी शर्त पर निर्धारित किया जाता है।\n\n\n\n",
    "Logical_key27": "### `not :-`\n\n",
    "Logical_key28": " यह `operator` विपरीत स्थिति प्राप्त करने के लिए प्रयोग किया जाता है। तो यह स्थिति के `output` के विपरीत `output` देता है।\n",
    "Logical_key29": "#### उदाहरण :-\n\n\n",
    "Logical_key30": "#### `Output`: -\n\n\n",
    "Logical_key31": "`��<��`\n",
    "Logical_key32": "c वास्तव में b से बड़ा है इसलिए स्थिति c > b है `true` लेकिन इसके सामने `not` जोड़ने पर विपरीत `output`, यानी `false` मिलता है।\n\n#### उदाहरण :-\n\n\n",
    "Logical_key33": "#### `Output`: -\n\n\n",
    "Logical_key34": "`�mF3�`\n"
}