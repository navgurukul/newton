[
	{
		"component": "text",
		"value": "The <b><i>8 courses in <span style=\"\">Python</span></i></b> are divided into <b><i>23 Workshop Classes</i></b>. We expect you to follow this Class division, to ensure that the sequence of learning is maintained, and a child has an opportunity to come back and attend only those specific classes she had doubts in, or had missed it for whatever reasons. "
	},
	{
		"component": "blockquote",
		"value": "Please use this nomenclature of Class Title to ensure uniformity in the learning pace of the students. "
	},
	{
		"component": "table",
		"value": [
			{
				"header": "Class Title",
				"items": [
					"Class 1 - Introduction to Python",
					"Class 2 - Introduction to Python and Definitions",
					"Class 3 - Variables",
					"Class 4 - Data Types",
					"Class 5 - Data Types",
					"Class 6 - Operators",
					"Class 7 - Operators",
					"Class 8 - Operators and Revision",
					"Class 9 - If Else",
					"Class 10 - If Else",
					"Class 11 - If Else",
					"Class 12 - If Else",
					"Class 13 - Loops",
					"Class 14 - Loops",
					"Class 15 - Loops",
					"Class 16 - Loops",
					"Class 17 - List",
					"Class 18 - List",
					"Class 19 - List",
					"Class 20 - List",
					"Class 21 - Dictionary",
					"Class 22 - Dictionary",
					"Class 23 - Dictionary"
				]
			},
			{
				"header": "Class Description",
				"items": [
					"What do Computers do? What is Programming? Why should you become a Programmar? What is the use of Programming? Basic Definitions",
					"Continue with the Basic Definitions, Why should you learn Python? What are the features of Python? How to start with Python? How to write a comment? What is Indentation? What are the Applications of Python?",
					"What is a Variable? What are the various naming rules? How can we assign values to variables? Practice Questions and Quizzes",
					"What are Data type? What are Predefined Data types in Python? What are the various Numeric Data types - Integer, Float, Complex? Practice Questions",
					"In depth explanation of String Data type, Boolean Data type, Data Type Conversion. Practice Questions and Quizzes",
					"What are Operators? What are the different types of Operators in Python? In depth explanation of Arithmetic Operators, with examples. Operator Precedence. Practice Questions and Quizzes",
					"What are Assignment Operators, Comparison Operators and Logical Operators? Share lots of examples, Practice Questions and Quizzes",
					"An introduction to Bitwise, Membership and Identity Operators. Revision and Practice Questions on Operators, Data Types and Variables",
					"Why do we use conditions? What is a condition? How to use If-Else? What are flowcharts and how should we prepare them? How should we write an If-Else code?",
					"Introduction and examples of If-Elif. If-Else with \"and\" and \"or\". Dry run code for revision. Practice Questions and Quizzes",
					"Nested If-Else. Practice Questions and Quizzes",
					"Revision and Practice Questions on If-Else Condition",
					"What are Loops? What are the Advantages of using Loops? What is Counter? Examples of Counters. Different types of loops in Python - While loop. Practice Questions and Quizzes",
					"Loop control statements such as continue, break, pass. Nested while loops. Share live examples and Practice Questions.",
					"Basics of For Loops. Revise Membership operator. For Loop using Sequence (String) and using Range(). Practice Questions and Quizzes",
					"Else in for loop. Using control statements in for. Nested for loop. Practice Questions and Quizzes.",
					"What is List? Characteristics of list. Defining list - list of strings - list of integer - list of float - mixed list. List indexing and slicing. Practice Questions and Quizzes.",
					"List Operations. Length. Membership. Iteration through index. Concatenation. Work with loop. Practice Questions and Quizzes.",
					"Python built-in methods with exampes - append(), clear(), count(), Index(), insert(), pop(), remove(), reverse() , sort(), min(), max(). Practice Questions and Quizzes.",
					"Nested List. More examples on list. Practice Questions and Quizzes.",
					"Introduction to dictionary. Accessing Elements from a Dictionary. Adding Elements to a Dictionary. Upading a Dictionary. Practice Questions and Quizzes.",
					"Removing element from a Dictionary. Iterating Dictionary. Iterate through all keys and values. More Exmaples on Dictionary.",
					"Built-in functions in Dictionary - get (), update(), clear(), copy(), delete(). Built in methods in Dictionary. Practice Questions and Quizzes."
				]
			},
			{
				"header": "Expected Outcomes",
				"items": [
					"This introductory module should help you introduce yourself and create a connection with the students. It should cover <b>WHY</b> the student must learn Programming and how it would benefit them. Use the initial classes to create curiosity in the students. You can show them what one can achieve using programming, ask them if they would want to create something like that in the future, and let them know the stepping stones to get there.",
					"This module shall continue with the definitions of the previous class. Share an understanding of why we use Python to start learning programming. This module should aim to create intrigue and interest in the students to learn Python.",
					"Spend an entire class on making the student understand the concept of Variables, as it is the first step to learning coding. You can share live examples, show them multiple variable names and make them choose the correct one based on the rules they've learnt. You can also ask them to share their screen, and write on the Python compiler called Playground, on the Meraki Android Application.",
					"This module should introduce the different types of Data Types used in Python, and students should be clear with concepts related to Numeric Data Types.",
					"A student should be familiar with Data types and should be able to answer questions related to data types and conversions.",
					"Share live examples to make them understand the concept of operators. Make them experiment with Operator  Precedence as this concept must be very clear and ensure there is no confusion.",
					"Brush up topics from Basic Definitions, and cross question them. They should be able to run simple codes on Playground.",
					"The basics of the child should be clear. Despite the complexity, Bitwise, Membership and Identity operators can be introduced, which would come in handy for future topics. Post this class we shall go on to functionalities like If-Else, Loops, etc.",
					"Before starting with If-Else, the students should be familiar with algorithms and how to make flow charts, and know about every box of a flow chart, eg: Start box, Condition box, etc. They should be able to implement their condition with code. You can ask them to share their screen and code on Playground.",
					"The students should be able to explain and write their own code and experiment with the conditions. Enable discussions and cross questioning between the students in the class, to make them confident on their code. You can follow it up with a dry run to confirm the flow of the code.",
					"The students should know multiple if else and understand the flow of if else and nested if else. You can give them more practice questions on Flowcharts and If-Else.",
					"You can make this an interactive session by posing multiple questions to the students and asking each child to solve it. You can also have them choose the correct code through MCQs, or True or False questions. A child should have a clear understandig of this module, to move forward.",
					"Share real life examples of Loops, and the types and their syntax. The flow of Loops, Increment and Decriment and how that can be done, should be clear.",
					"The student should know when and why to use continue, break and pass and its difference. The flow and syntax should be clear. Make sure of patterns in Nested While Loops and focus on concepts as well as logic.",
					"The student should know how Range works and from where it starts executing and where it stops, the syntax and flow of FOR loop. Should know whether String has indexing and how to iterate over string using FOR loop.",
					"The students should know how to implement conditions using if else in loop, how to make use of operators like \"in\" in conditional statements. Have a clear understanding of flow and syntax of nested for loop and can experiment where and how can we use else out of loop. Share more practice on logical questions using for loop making concepts and logic clear.",
					"What are the advantages of using list and what types of data can be stored in a list. Concept of indexing must be clear (positive indexing as well as negative indexing). The student should focus on slicing in which start , stop and step are there and experiment with slicing and what parameters are acceptable and how it works by default.",
					"The student should know how to find length of list, how to iterate over a list using loop through indexing, how to add two lists together and how to make use membership operator.",
					"The student should know how to add elements to list by using which method, how to remove elements, how to update elements. Should be aware of the difference between pop(), remove(), its syntax and why they are used. What and how many parameters to be passed in thses methods. Nested list indexing (+ve and -ve). By the end of this class, students should be able to find minimum and maximum with in built function and without.",
					"Recapitulate through all the topics covered in list and revise to make concepts clear. Practice more.",
					"What is dictionary. The structure of dictionary. Why do we use it. What are keys and values. How to access them. How to add and update items in dict. How to iterate over a dict.",
					"Dict.keys() method to iterate over keys of dict. Dict.values() method to iterate over values of dict. Dict.items() method to iterate over keys and values. How loop can be used in iterating dict.",
					"By the end of this class, the student should be clear on all the concepts taught till date. You can choose to conduct revision classes too."
				]
			}
		]
	},
	{
		"component": "header",
		"variant": 4,
		"value": "Further Support"
	},
	{
		"component": "text",
		"value": "Don't fret in case, this is still confusing. "
	},
	{
		"component": "text",
		"value": "<b>We are here to help</b>"
	},
	{
		"component": "text",
		"value": ". You can write back to us on the Volunteering email you received from our end, or write to "
	},
	{
		"component": "text",
		"value": "volunteer@navgurukul.org"
	},
	{
		"component": "text",
		"value": ". "
	},
	{
		"component": "text",
		"value": "Thank you! "
	},
	{
		"component": "text",
		"value": "We're glad to have you on this journey of impacting over <b>One Lakh learners</b>."
	},
	{
		"component": "text",
		"value": "<b>Happy Volunteering!</b>"
	}
]