{
	"Operations-on-primitive-datatypes_key1": "As you previously read about different data types in javascript. There are some primitive data types on which some operations can be performed which we are going to know about it now.",
	"Operations-on-primitive-datatypes_key2": "Operations on <span style=\"\">Strings</span>",
	"Operations-on-primitive-datatypes_key3": "<h3> Finding the length of a string</h3>",
	"Operations-on-primitive-datatypes_key4": "To find the length of a <span style=\"\">string</span> you just need to use a simple property called length.",
	"Operations-on-primitive-datatypes_key5": "Example:",
	"Operations-on-primitive-datatypes_key6": "Explanation:",
	"Operations-on-primitive-datatypes_key7": "In the above example we have found the length of a <span style=\"\">string</span>. This means by using length function it is possible in <span style=\"\">strings</span> as well, like arrays. Just the difference is in this it counts each and every alphabet of a <span style=\"\">string</span> including space as well.",
	"Operations-on-primitive-datatypes_key8": "If you see, upto m-length is 1, for o-length is 2, for z-length is 3, for i-length is 4, for space -length is 5, for l-length is 6, for again l-length is 7, for a-length is 8.",
	"Operations-on-primitive-datatypes_key9": "But in the list the elements are separated by commas.",
	"Operations-on-primitive-datatypes_key10": "<h3> Retrieving a specific string character</h3>",
	"Operations-on-primitive-datatypes_key11": "Example:",
	"Operations-on-primitive-datatypes_key12": "Explanation:",
	"Operations-on-primitive-datatypes_key13": "If we want a particular alphabet of a <span style=\"\">string</span> so we can access it too by using square brackets same as arrays. Just specify the <span style=\"\">variable</span> name and the position(Index) of the particular alphabet in [ ] (square brackets). Indexing starts from the same number 0.",
	"Operations-on-primitive-datatypes_key14": "Example:",
	"Operations-on-primitive-datatypes_key15": "Explanation:",
	"Operations-on-primitive-datatypes_key16": "In the case of accessing the last element first like <span style=\"\">python</span>, negative indexing is not available but To retrieve the last character of any <span style=\"\">string</span>, we could use the following line, combining this technique with the length property we looked at above. The length of \"mozilla\" is 8, but because the count starts at 0, the character position is 7; using  length-1 gets us the last character.",
	"Operations-on-primitive-datatypes_key17": "Finding a substring inside a string and extracting it",
	"Operations-on-primitive-datatypes_key18": "Example:",
	"Operations-on-primitive-datatypes_key19": "Explanation:",
	"Operations-on-primitive-datatypes_key20": "This gives us a result of 13, because the sub<span style=\"\">string</span> \"company\" starts at position 13 (0, 1, 2  — so 13 characters in) inside \"mozilla is a company\". Such <span style=\"\">code</span> could be used to filter <span style=\"\">strings</span>.",
	"Operations-on-primitive-datatypes_key21": "Example:",
	"Operations-on-primitive-datatypes_key22": "Explanation:",
	"Operations-on-primitive-datatypes_key23": "This should give you a result of -1 — this is returned when the sub<span style=\"\">string</span>, in this case 'are', is not found in the main <span style=\"\">string</span>.",
	"Operations-on-primitive-datatypes_key24": "Changing case",
	"Operations-on-primitive-datatypes_key25": "Example:",
	"Operations-on-primitive-datatypes_key26": "Explanation:",
	"Operations-on-primitive-datatypes_key27": "The string methods toLowerCase() and toUpperCase() take a string and convert all the characters to lower- or uppercase, respectively.",
	"Operations-on-primitive-datatypes_key28": "<h3> Updating parts of a string</h3>",
	"Operations-on-primitive-datatypes_key29": "Explanation:",
	"Operations-on-primitive-datatypes_key30": "This returns \"vanilla\" in the console. But if you check the value of browserType, it is still \"mozilla\". To actually update the value of the browserType <span style=\"\">variable</span> in a real program, you'd have to set the <span style=\"\">variable</span> value to be the result of the operation; it doesn't just update the sub<span style=\"\">string</span> value automatically. So you'd have to actually write this: browserType = browserType.replace('moz','van');"
}