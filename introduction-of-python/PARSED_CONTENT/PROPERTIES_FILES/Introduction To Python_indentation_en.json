{
	"indentation_key1": "What is `Indentation`?\n",
	"indentation_key2": "Please have a look at the `code` given below. Now think about the `output` of this `code` without running.\n",
	"indentation_key3": "What answer did you think? Please copy-paste this `code`, `save` this in a `file` and run this `code`. You will notice that this `code` will not print any `output`, but gives an `error`. To understand this `error` we need to think from the point of view of `python`. `Python` will run this program as follows:-\n",
	"indentation_key4": "In the first line it will put the value `10` in \"a\".\n",
	"indentation_key5": "In the second line `python` will check that whether multiplying **a** by `2` gives a result equal to 20 or not.\n",
	"indentation_key6": "Till the third line `python` will be able to know that on multiplying **a** `2` by we will get `20`. But `python` gets confused at this place, it does not understand that whether it should only print  \"`Variable` a when multiplied by 2 gives 20.\" or it needs to run the `code` given below also or not. Humans can easily understand this, but the computer gets mad and gives `errors`.\n\n\n",
	"indentation_key7": "We will write this program correctly as follows,\n",
	"indentation_key8": "When `python` will run this correct `code`, then its brain will work like this. \n",
	"indentation_key9": "In the first line it will put the value `10` in \"a\".\n",
	"indentation_key10": "In the second line `python` will check that whether multiplying **a** by `2` gives a result equal to 20 or not.\n",
	"indentation_key11": "In the third line , `python` will print \"`Variable` a when multiplied by 2 gives 20\". Now, you will think that `python` prints this line in this `code` then why it did not print in the previous example. But, see a little care that the third line has started after some space. These `spaces` are called `indent` in `python`. Now, `python` understands that on multiplying  **a** by `2` we get `20`, if this condition is `True`, then we will run the lines which are `indented` below **if**.\n",
	"indentation_key12": "In the 4th line `python` finds something else but it does not run else part because if the part already ran. So, how to use `if `statement``, try to learn about this.\n\n\n",
	"indentation_key13": "This spacing in `python` is called `indentation`. Whenever there is a problem related to `indentation`, `Python` calls it an `Indentation Error` This `error` looks like this:-\n",
	"indentation_key14": "One more example\n",
	"indentation_key15": "We will take more examples and understand them clearly. First, run the `code` given below. After that read the text given below.\n",
	"indentation_key16": "Example :-\n",
	"indentation_key17": "In this program, in the last 3 lines ` (‘print \"The counter is\" + str(counter)’, ‘counter = counter + 1’, ‘print \"--------\"’) ` if there is no `indentation` then `python` will not be able to understand that after `while loop` what it has to run? `Python` will get confused and will give an `error`. To `indent` a `python` `code` is very important. If you see the program, you will realize that the `code` is divided into different parts:-\n",
	"indentation_key18": "In the first part, the `counter` `variable` is defined and we write the line `while countering < 10`.\n",
	"indentation_key19": "In the second part, we have written that `code` which will run after for `loop` again and again till the for `loop` is running. \nThe different parts of `code` are called `code` blocks and in `python` to indent these blocks we use a `tab`. \nTo understand this, `save` the given `code` in a new `file` and see what `output` comes and how that `output` is different from the `output` of the `code` given above. After this discussion about what happened?\n\n\n",
	"indentation_key20": "Example:-\n",
	"indentation_key21": "Note :-\n",
	"indentation_key22": " Whenever you write the `code`, then your `editor` should `indent` the `code`, but if it does not do that, then you can use the `Tab` `key` for `indenting`.\n",
	"indentation_key23": "Note :-\n",
	"indentation_key24": "You can also use the Space `key` for `indentation`. `Space key`  is difficult to use, as many `errors` occur due to its use, just because of this many `errors` occur, that is why many Developers(Software Engineer) use `Tab` so that minor `errors` do not occur.\n",
	"indentation_key25": "Multiple Levels of `Indentation`\n",
	"indentation_key26": "In a given `indented code block` there can be another indented `code` block. Study this `code` and understand and tell how the `output` comes? Try to run this `code` and see if you thought correctly about the `output` or not. If not then use your brain to think about it more.\n",
	"indentation_key27": "Please see here that in this `code`,  2 levels of indented `code` blocks exist.  \n",
	"indentation_key28": "After the first level `if counter % 2 == 0’ is present.`\n",
	"indentation_key29": "In the second level `print (\"Counter is an even number.\")` is present.\n\n\n",
	"indentation_key30": "Here, `python` will run if under while `loop`  and `print (\"Counter is an even number.\")`only when inside the `loop` `counter` value is an even number.\n"
}