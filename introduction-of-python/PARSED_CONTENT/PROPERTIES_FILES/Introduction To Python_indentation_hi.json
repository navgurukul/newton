{
    "indentation_key1": "`Indentation` क्या है?\n",
    "indentation_key2": "कृपया नीचे दिए गए `code` पर एक नज़र डालें। अब इस `code` के बिना दौड़े `output` के बारे में सोचें।\n",
    "indentation_key3": "आपने क्या उत्तर सोचा? कृपया इसे `code`, `save` इसे `file` में कॉपी-पेस्ट करें और इसे `code` चलाएं। आप देखेंगे कि यह `code` कोई `output` प्रिंट नहीं करेगा, लेकिन एक `error` देता है। इस `error` को समझने के लिए हमें `python` के दृष्टिकोण से सोचने की जरूरत है। `Python` इस कार्यक्रम को इस प्रकार चलाएगा:-\n",
    "indentation_key4": "पहली पंक्ति में यह मान `10` को \"a\" में डाल देगा।\n",
    "indentation_key5": "दूसरी पंक्ति में `python` जांच करेगा कि **a** को `2` से गुणा करने पर 20 के बराबर परिणाम मिलता है या नहीं।\n",
    "indentation_key6": "तीसरी पंक्ति तक `python` यह जान सकेगा कि **a** `2` को गुणा करने पर हमें `20` प्राप्त होगा। लेकिन `python` इस जगह पर भ्रमित हो जाता है, यह समझ में नहीं आता है कि क्या इसे केवल \"`Variable` प्रिंट करना चाहिए, जब 2 से गुणा करने पर 20 मिलता है।\" या इसे नीचे दिए गए `code` को भी चलाने की जरूरत है या नहीं। मनुष्य इसे आसानी से समझ सकता है, लेकिन कंप्यूटर पागल हो जाता है और `errors` देता है।\n\n\n",
    "indentation_key7": "हम इस प्रोग्राम को इस प्रकार सही ढंग से लिखेंगे,\n",
    "indentation_key8": "जब `python` यह सही `code` चलाएगा, तब उसका दिमाग इस तरह काम करेगा।\n",
    "indentation_key9": "पहली पंक्ति में यह मान `10` को \"a\" में डाल देगा।\n",
    "indentation_key10": "दूसरी पंक्ति में `python` जांच करेगा कि **a** को `2` से गुणा करने पर 20 के बराबर परिणाम मिलता है या नहीं।\n",
    "indentation_key11": "तीसरी पंक्ति में, `python` प्रिंट करेगा \"`Variable` a जब 2 से गुणा करने पर 20 प्राप्त होता है\"। अब, आप सोचेंगे कि `python` इस लाइन को इस `code` में प्रिंट करता है तो यह पिछले उदाहरण में क्यों नहीं छापा। लेकिन, जरा गौर कीजिए कि तीसरी लाइन कुछ जगह के बाद शुरू हुई है। इन `spaces` को `python` में `indent` कहा जाता है। अब, `python` समझता है कि **a** को `2` से गुणा करने पर हमें `20` मिलता है, यदि यह स्थिति `True` है, तो हम नीचे की पंक्तियों को चलाएंगे जो `indented` हैं। **अगर**।\n",
    "indentation_key12": "चौथी पंक्ति में `python` कुछ और ढूंढता है लेकिन यह दूसरे भाग को नहीं चलाता है क्योंकि अगर हिस्सा पहले ही चल रहा है। तो, `if `statement`���\u001bA�\u001bA�\u0018�?�A�",
    "indentation_key13": "`python` में इस रिक्ति को `indentation` कहा जाता है। जब भी `indentation` से संबंधित कोई समस्या होती है, तो `Python` इसे `Indentation Error` कहते हैं, यह `error` इस तरह दिखता है:-\n",
    "indentation_key14": "एक और उदाहरण\n",
    "indentation_key15": "हम और उदाहरण लेंगे और उन्हें स्पष्ट रूप से समझेंगे। सबसे पहले, नीचे दिए गए `code` को चलाएं। इसके बाद नीचे दिए गए टेक्स्ट को पढ़ें।\n",
    "indentation_key16": "उदाहरण :-\n",
    "indentation_key17": "इस कार्यक्रम में, पिछले 3 लाइनों ` (‘print \"The counter is\" + str(counter)’, ‘counter = counter + 1’, ‘print \"--------\"’) ` अगर कोई `indentation` `)��ѡ�` नहीं कि`while loop`यह क्या है चलाने के लिए समझने में सक्षम हो जाएगा? `Python` भ्रमित हो जाएगा और एक `error` देगा। `indent` के लिए `python` `code` बहुत महत्वपूर्ण है। अगर आप प्रोग्राम देखेंगे तो आपको पता चलेगा कि `code` को अलग-अलग हिस्सों में बांटा गया है:-\n",
    "indentation_key18": "पहले भाग में, `counter` `variable` परिभाषित किया गया है और हम लाइन लिखते हैं `while countering < 10`।\n",
    "indentation_key19": "दूसरे भाग में हमने लिखा है कि `code` जो `loop` के लिए बार-बार तब तक चलेगा जब तक `loop` चल रहा है।\n`code` के विभिन्न भागों को `code` ब्लॉक कहा जाता है और `python` में इन ब्लॉकों को इंडेंट करने के लिए हम एक `tab` का उपयोग करते हैं।\nइसे समझने के लिए, `save` दिए गए `code` एक नए `file` में और देखें कि `output` क्या आता है और कैसे `output` `code`b3V0cHV0`�m�`ऊपर दिया गया है। इस चर्चा के बाद क्या हुआ?\n\n\n",
    "indentation_key20": "उदाहरण:-\n",
    "indentation_key21": "ध्यान दें :-\n",
    "indentation_key22": " जब भी आप `code` लिखते हैं, तो आपके `editor` को `indent` `code` होना चाहिए, लेकिन अगर वह ऐसा नहीं करता है, तो आप `indenting` के लिए `Tab` `key` का उपयोग कर सकते हैं।\n",
    "indentation_key23": "ध्यान दें :-\n",
    "indentation_key24": "आप `indentation` के लिए स्पेस `key` का भी उपयोग कर सकते हैं। `Space key` का उपयोग करना मुश्किल है, इसके उपयोग के कारण कई `errors` होते हैं, बस इसके कारण कई `errors` होते हैं, यही कारण है कि कई डेवलपर्स (सॉफ्टवेयर इंजीनियर) `Tab` का उपयोग करते हैं ताकि मामूली `errors` न हो घटित होना।\n",
    "indentation_key25": "`Indentation` . के कई स्तर\n",
    "indentation_key26": "दिए गए `indented code block` में एक और इंडेंटेड `code` ब्लॉक हो सकता है। इस `code` का अध्ययन करें और समझें और बताएं कि `output` कैसे आता है? इस `code` को चलाने का प्रयास करें और देखें कि आपने `output` के बारे में सही सोचा है या नहीं। यदि नहीं, तो इसके बारे में अधिक सोचने के लिए अपने मस्तिष्क का उपयोग करें।\n",
    "indentation_key27": "कृपया यहां देखें कि इस `code` में, इंडेंटेड `code` ब्लॉक के 2 स्तर मौजूद हैं।\n",
    "indentation_key28": "पहले स्तर के बाद `if counter % 2 == 0’ is present.`\n",
    "indentation_key29": "दूसरे स्तर में `print (\"Counter is an even number.\")` मौजूद है।\n\n\n",
    "indentation_key30": "यहां, `python` तब चलेगा जब `loop` और `print (\"Counter is an even number.\")` के तहत तभी चलेगा जब `loop` `counter` मान के अंदर सम संख्या हो।\n"
}