{
    "introduction_key1": "## `Loop Conditions` को समझना\n\n\n",
    "introduction_key2": "आइए इसे देखते हैं `code`।\n",
    "introduction_key3": "यह `code` `1 to 99` से नंबर प्रिंट करेगा। `code` को बेहतर ढंग से समझने के लिए हम प्रत्येक पंक्ति को समझने का प्रयास करेंगे।\n",
    "introduction_key4": "`i = 1`, यहां हमने `variable` नाम का `i` लिया है और हमने इसमें `1` मान रखा है।\n",
    "introduction_key5": "`while i < 100`, यहां हमने एक `loop` परिभाषित किया है। दी गई समय की शर्त से हमारा मतलब है कि `loop` चलेंगे और इसके अंदर जो भी लिखा होगा वह करेंगे `till` का मान `i` का मान `100` से कम है।\n",
    "introduction_key6": "`print(i)` लाइन `loop` के अंदर लिखी गई है। तो, `till` i का मान १०० से कम है, यह लाइन प्रिंट हो जाएगी।\n",
    "introduction_key7": "`i = i + 1`, यह लाइन हमारे काउंटर को बढ़ाएगी। यह लाइन यह भी बताएगी कि `loop` कितनी बार चलेगी।\n\n\n",
    "introduction_key8": "यहां, `i = i + 1` और `while i < 100` बहुत महत्वपूर्ण `statements` हैं। इस वीडियो को देखने के बाद कि इन पंक्तियों का सही अर्थ क्या है और कंप्यूटर इन्हें कैसे समझता है, इस तरह हम `loops` को बेहतर तरीके से लिख पाएंगे।\n",
    "introduction_key9": "## वीडियो की सामग्री\n\n",
    "introduction_key10": "निम्नलिखित में `i < 100` लिखने का क्या अर्थ है `loop`?\n\n",
    "introduction_key11": "`loop` कैसे चलता है? हर बार `loop block` के भीतर `code` `execute` d स्थिति का एक बार फिर मूल्यांकन किया जाता है और `until` की स्थिति `True` होती है, `loop` जारी रहता है दौड़ना। इस स्थिति का परिणाम `boolean` होता है और यदि `boolean` `true` है तो `loop` चलता है अन्यथा यह नहीं चलता है।\n",
    "introduction_key12": "इसके अलावा हम `statement` भी इस तरह लगा सकते हैं।\n\n",
    "introduction_key13": "## `Loop` शर्तों को समझना\n\n\n",
    "introduction_key14": "आइए इसे देखते हैं `code`।\n",
    "introduction_key15": "यह `code` 1 से 99 तक की संख्याएं प्रिंट करेगा। `code` को बेहतर ढंग से समझने के लिए हम प्रत्येक पंक्ति को समझने का प्रयास करेंगे।\n",
    "introduction_key16": "`i = 1`, यहां हमने `variable` नाम का `i` लिया है और हमने इसमें `1` मान रखा है।\n",
    "introduction_key17": "`while i < 100`, यहां हमने एक `loop` परिभाषित किया है। दी गई समय की शर्त से हमारा मतलब है कि `loop` चलेगा और इसके अंदर जो कुछ भी लिखा है वह तब तक करेगा जब तक `i` का मान १०० से कम न हो।\n",
    "introduction_key18": "`print(i)` लाइन `loop` के अंदर लिखी गई है। इसलिए, जब तक i का मान १०० से कम है, तब तक यह लाइन छपी रहेगी।\n",
    "introduction_key19": "`i = i + 1`, यह लाइन हमारे काउंटर को बढ़ाएगी। यह लाइन यह भी बताएगी कि `loop` कितनी बार चलेगी।\n\n\n",
    "introduction_key20": "यहां, `i = i + 1` और `while i < 100` बहुत महत्वपूर्ण `statements` हैं। इस वीडियो को देखने के बाद कि इन पंक्तियों का सही अर्थ क्या है और कंप्यूटर इन्हें कैसे समझता है, इस तरह हम `loops` को बेहतर तरीके से लिख पाएंगे।\n",
    "introduction_key21": "## वीडियो की सामग्री\n\n",
    "introduction_key22": "निम्नलिखित में `i < 100` लिखने का क्या अर्थ है `loop`?\n\n",
    "introduction_key23": "`loop` कैसे चलता है? हर बार `\u0004oop` ब्लॉक के भीतर `code` `execute` d स्थिति का एक बार फिर मूल्यांकन किया जाता है और जब तक स्थिति `true` नहीं हो जाती तब तक `loop` चालू रहता है। मूल रूप से, स्थिति एक बूलियन में परिणत होती है और यदि बूलियन `True` है तो `loop` चलाया जाता है अन्यथा इसे नहीं चलाया जाता है।\n",
    "introduction_key24": "इसके अलावा हम `statement` भी इस तरह लगा सकते हैं।\n\n"
}