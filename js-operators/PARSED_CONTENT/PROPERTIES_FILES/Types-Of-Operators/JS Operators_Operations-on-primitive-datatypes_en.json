{
	"Operations-on-primitive-datatypes_key1": "name: Operations on primitive data types\n",
	"Operations-on-primitive-datatypes_key2": "### Operations can be done on  some primitive data types \n\n\n",
	"Operations-on-primitive-datatypes_key3": "As you previously read about different data types in javascript. There are some primitive data types on which some operations can be performed which we are going to know about it now :\n",
	"Operations-on-primitive-datatypes_key4": "## Operations on `Strings` \n\n\n",
	"Operations-on-primitive-datatypes_key5": "**Finding length of a `string`**\n\n\n",
	"Operations-on-primitive-datatypes_key6": "To find the length of a `string` you just need  a simple property called length\n",
	"Operations-on-primitive-datatypes_key7": "**Example:**\n",
	"Operations-on-primitive-datatypes_key8": "**Explanation:-**\n",
	"Operations-on-primitive-datatypes_key9": "In the above example we have found the length of a `string`. This means by using length function it is possible in `strings` as well, like arrays. Just the difference is in this it counts each and every alphabet of a `string` including space as well.\n",
	"Operations-on-primitive-datatypes_key10": "If you see, upto m-length is 1, for o-length is 2, for z-length is 3, for i-length is 4, for space -length is 5, for l-length is 6, for again l-length is 7, for a-length is 8.\n",
	"Operations-on-primitive-datatypes_key11": "But in the list the elements are separated by commas.\n",
	"Operations-on-primitive-datatypes_key12": "**Retrieving a specific `string` character**\n\n\n",
	"Operations-on-primitive-datatypes_key13": "**Example:**\n",
	"Operations-on-primitive-datatypes_key14": "**Explanation:-**\n",
	"Operations-on-primitive-datatypes_key15": "If we want a particular alphabet of a `string` so we can access it too by using square brackets same as arrays. Just specify the `variable` name and the position(Index) of the particular alphabet in [ ] (square brackets). Indexing starts from the same number 0.\n",
	"Operations-on-primitive-datatypes_key16": "**Example:**\n",
	"Operations-on-primitive-datatypes_key17": "**Explanation:-**\n",
	"Operations-on-primitive-datatypes_key18": "In the case of accessing the last element first like `python`, negative indexing is not available but To retrieve the last character of any `string`, we could use the following line, combining this technique with the length property we looked at above. The length of \"mozilla\" is 8, but because the count starts at 0, the character position is 7; using  length-1 gets us the last character.\n",
	"Operations-on-primitive-datatypes_key19": "**Finding a sub`string` inside a `string` and extracting it**\n  \n",
	"Operations-on-primitive-datatypes_key20": "**Example:**\n",
	"Operations-on-primitive-datatypes_key21": "**Explanation:-**\n",
	"Operations-on-primitive-datatypes_key22": "This gives us a result of 13, because the sub`string` \"company\" starts at position 13 (0, 1, 2  — so 13 characters in) inside \"mozilla is a company\". Such `code` could be used to filter `strings`.\n",
	"Operations-on-primitive-datatypes_key23": "**Example:**\n",
	"Operations-on-primitive-datatypes_key24": "**Explanation:-**\n",
	"Operations-on-primitive-datatypes_key25": "This should give you a result of -1 — this is returned when the sub`string`, in this case 'are', is not found in the main `string`.\n",
	"Operations-on-primitive-datatypes_key26": "**Changing case**\n  \n",
	"Operations-on-primitive-datatypes_key27": "**Example:**\n",
	"Operations-on-primitive-datatypes_key28": "**Explanation:-**\n",
	"Operations-on-primitive-datatypes_key29": "The `string` methods toLowerCase() and toUpperCase() take a `string` and convert all the characters to lower- or uppercase, respectively.\n",
	"Operations-on-primitive-datatypes_key30": "**Updating parts of a `string`**\n\n\n",
	"Operations-on-primitive-datatypes_key31": "**Explanation:-**\n",
	"Operations-on-primitive-datatypes_key32": "This returns \"vanilla\" in the console. But if you check the value of browserType, it is still \"mozilla\". To actually update the value of the browserType `variable` in a real program, you'd have to set the `variable` value to be the result of the operation; it doesn't just update the sub`string` value automatically. So you'd have to actually write this: browserType = browserType.replace('moz','van');\n"
}