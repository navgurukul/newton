[
	{
		"component": "header",
		"variant": 1,
		"value": "How to return a value from a function?"
	},
	{
		"component": "text",
		"value": "We used some functions which returned some values, that is, returned some data.we've written functions that don't return anything."
	},
	{
		"component": "text",
		"value": "Write a simple addition function that returns the data."
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "def add_numbers(number_x, number_y):<br>&emsp;number_sum = number_x + number_y<br>&emsp;return number_sum<br><br>sum1 = add_numbers(20, 40)<br>print(sum1)<br>sum2 = add_numbers(560, 23)<br>a = 1234<br>b = 12<br>sum3 = add_numbers(a, b)<br>print(sum2)<br>print(sum3)<br>number_a = add_numbers(20, 40) / add_numbers(5, 1)<br>print(number_a)"
	},
	{
		"component": "text",
		"value": "<b><span style=\"\">Output</span></b>"
	},
	{
		"component": "text",
		"value": "60<br>583<br>1246<br>10.0"
	},
	{
		"component": "text",
		"value": "Here we have defined the function in the same way as we have been defining the functions till now. But in the last line in the function you will see something new.",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "In the last line, we have used the <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">return</span> statement to tell the function that it will return the value of <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">number_sum</span>",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "Since this function is returning the value of <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">number_sum</span>, we can easily store this value in a variable.",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "Like we have put the value of the sum of <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">20</span> and <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">40</span> in the <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">sum1</span> variable, which is 60.",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "We have returned a value from the function by using <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">return</span> in the last line of <b>function definition</b>. We call this the return statement. 'Return' means to give back.",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "Functions that return some value, we can do very interesting things with those functions, Have a look in the line <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">number_a = add_numbers(20,40) / add_numbers(5,1)</span>. Here we have called two add_numbers in one statement and then the result of both of them (60 of the first and 6 of the second) is divided by these functions, which returns something, We can do that in such a statement. We have done in the division line.",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "We write the same function without the return value."
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "def add_numbers_print(number_x, number_y):<br>&emsp;number_sum = number_x + number_y<br>&emsp;print (number_sum)<br>sum4 = add_numbers_print(4, 5)<br>print(sum4)<br>print(type(sum4))"
	},
	{
		"component": "text",
		"value": "<b><span style=\"\">Output</span> :-</b>"
	},
	{
		"component": "text",
		"value": "9<br>None<br><class 'NoneType'>"
	},
	{
		"component": "text",
		"value": "We have written the <span style=\"\">code</span> of the above function here, but did not use the return <span style=\"\">statement</span>. Because of this, this function will not return anything to us because this function does not return anything, We cannot put the sum of our numbers in another <span style=\"\">variable</span> like we did in the previous example."
	},
	{
		"component": "text",
		"value": "Here if you will see the value of <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">sum4</span>' then it will show <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">None</span>. <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">None</span> means nothing. Simply numbers that do not return a value return \"nothing\". <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">None</span> is a data type in <span style=\"\">python</span>. In the line containing <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">print (type(number4))</span> you will see that it will show the type of sum4 as None type. It means that there is nothing in it."
	},
	{
		"component": "text",
		"value": "Read the <span style=\"\">code</span> below and think what will happen.Now run the <span style=\"\">code</span> and see if you thought right"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "number_b = add_numbers_print(5, 4) / add_numbers_print(2, 1)"
	},
	{
		"component": "text",
		"value": "<b><span style=\"\">Output</span> :-</b> "
	},
	{
		"component": "text",
		"value": "Type<span style=\"\">Error</span>: unsupported operand type(s) for /: 'NoneType' and 'NoneType'"
	},
	{
		"component": "text",
		"value": "Here we have tried to simply divide the values ​​of a function that does not return any value. We just read that the functions which do not return, return None (meaning nothing). When we divide None by None here, <span style=\"\">Python</span> gets freaked out and doesn't know what to do. Because of this the <span style=\"\">error</span> returns. <span style=\"\">Python</span> tells us the same in <span style=\"\">error</span>:"
	},
	{
		"component": "text",
		"value": "<b><span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">unsupported operand type(s) for /: 'NoneType' and 'NoneType'</span></b>"
	},
	{
		"component": "text",
		"value": "This means that <span style=\"\">Python</span> is not dividing the value of NoneType by the value of NoneType itself and an <span style=\"\">error</span> has occurred."
	},
	{
		"component": "header",
		"variant": 2,
		"value": "Understandng function execution with a return <span style=\"\">statement</span>"
	},
	{
		"component": "text",
		"value": "Before running this example, read its <span style=\"\">code</span> and think about what this function will return and what it will print when we give 2 <span style=\"\">integer</span> arguments to it."
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "def add_numbers_more(number_x, number_y):<br>&emsp;number_sum = number_x + number_y<br>&emsp;print(\"Hello from NavGurukul ;)\")<br>&emsp;return number_sum<br>&emsp;number_sum = number_x + number_x<br>&emsp;print(\"Will i reach here?\")<br>&emsp;return number_sum<br><br>sum6 = add_numbers_more(100, 20)"
	},
	{
		"component": "text",
		"value": "<b><span style=\"\">Output</span> :-</b>"
	},
	{
		"component": "text",
		"value": "Hello from NavGurukul ;)"
	},
	{
		"component": "text",
		"value": "Here this function will print \"Hello from Navgurukul ;)\" and return the value of 120. It will return the value of 120 using the line \"return number_sum\".",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "The value <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">sum6</span> will become 120.",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "Whatever code you have written below the first <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">return number_sum</span> line, none of that code will work. This won't work because python receives a return statement while the function is running, So Python returns the value using that return statement and then none of the code below runs.",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "In a little more depth, Understand execution of function in <span style=\"\">Python</span>. Try to understand without running this <span style=\"\">code</span> first. Then run it once and see."
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "def menu(day):<br>&emsp;if day == \"monday\":<br>&emsp;&emsp;return \"Butter Chicken\"<br>&emsp;elif day == \"tuesday\":<br>&emsp;&emsp;return \"Mutton Chaap\"<br>&emsp;else:<br>&emsp;&emsp;return \"Chole Bhature\"<br><br>&emsp;print(\"Will I be able to print? :-(\")<br><br>mon_menu = menu(\"monday\")<br>print(mon_menu)<br>tues_menu = menu(\"tuesday\")<br>print(tues_menu)<br>fri_menu = menu(\"friday\")<br>print(fri_menu)"
	},
	{
		"component": "text",
		"value": "<b><span style=\"\">Output</span> :-</b>"
	},
	{
		"component": "text",
		"value": "Butter Chicken<br>Mutton Chaap<br>Chole Bhature"
	},
	{
		"component": "text",
		"value": "Our 'menu' function returns the value of the menu item of that day based on the 'day' argument.",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "Here mon_menu will have the value of \"Butter Chicken\" because our if-elif-else statement here sees that the day is given as \"Monday\" then return the \"Butter-Chicken\". As soon as python sees the return statement, it returns \"butter chicken\" and the function stops running. Because of this the last print command does not run. Because even before that print command, the return statement always causes the function to stop running.",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "Similarly when the value of day is \"tuesday\" then the return statement with return \"Mutton Chaap\" is executed",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "And when both \"Monday\" and \"Tuesday\" are not there, the return statement with \"Chole Bhature\" gets executed.",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "<b>But the return statement is executed from inside if-elif-else, Our program never reaches the last if statement and it is never printed.</b>",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "Now we will write the same function in such a way that the last print command is also run. and <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">Will I be able to print? :-(\"</span> print the line :"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "def menu(day):<br>&emsp;if day == \"monday\":<br>&emsp;&emsp;food = \"Butter Chicken\"<br>&emsp;elif day == \"tuesday\":<br>&emsp;&emsp;food = \"Mutton Chaap\"<br>&emsp;else:<br>&emsp;&emsp;food = \"Chole Bhature\"<br>&emsp;print(\"Will I be able to print? :-(\")<br>&emsp;return food<br>&emsp;print(\"But I'm not sure will print? :'(\")<br>print(menu(\"monday\"))"
	},
	{
		"component": "text",
		"value": "<b><span style=\"\">Output</span> :-</b>"
	},
	{
		"component": "text",
		"value": "Will I be able to print? :-(<br>Butter Chicken"
	},
	{
		"component": "text",
		"value": "Here we have not used return <span style=\"\">statement</span> in if-elif-else directly. We took the <span style=\"\">variable</span> name <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">food</span> and stored value which we want into. Now when if-elif-else is run, our program proceeds to the print <span style=\"\">statement</span> below it. Because <span style=\"\">python</span> has not yet received a return <span style=\"\">statement</span>, the print command runs. After printing it returns the value of <i>food</i> <span style=\"\">variable</span> from the return <span style=\"\">statement</span> but the last one which is the print <span style=\"\">statement</span> will not get printed. Because the return <span style=\"\">statement</span> is run before that print <span style=\"\">statement</span> and because of that <span style=\"\">python</span> does not reach the required print <span style=\"\">statement</span>"
	}
]