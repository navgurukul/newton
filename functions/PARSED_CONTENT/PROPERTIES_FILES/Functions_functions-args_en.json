{
	"functions-args_key1": "What are function arguments?\n",
	"functions-args_key2": "Some of the functions we've `code`d so far using by simple print `statements`. We can also write functions that take some data and do something with that data. Run this `code`.\n",
	"functions-args_key3": "**`Output` :-**\n`10`\n",
	"functions-args_key4": "Here we give `numbers_list` to the `max` function and it gives us the largest value out of it.\n",
	"functions-args_key5": "**max** function, is one of the pre-define function, where no need to defined the def max() to write the `code` of block because the creator of `Python` has already done this work for us.\n",
	"functions-args_key6": "Similarly, the len function also takes a list and gives us the count of items in the list.\n",
	"functions-args_key7": "We use the len( ) function to find the length of an array or sequence. It is also the `python` pre-define function.\n",
	"functions-args_key8": "`Example :-`\n",
	"functions-args_key9": "**`Output` :-**\n6\n",
	"functions-args_key10": "Try the `code` below and see what is happening.\n",
	"functions-args_key11": "**`Output` :-**\n",
	"functions-args_key12": "Hello , Aatif\nHow are you?\n",
	"functions-args_key13": "Here we have defined the function in the same way as in the previous example. Notice that the after `def say_hello` in the function brackets we write `name` and the bellow of that we write the `name` `variable` with the  print command. Here the name is called * parameter * whose value we can give at the time of calling the function.While calling the function in the last line, we have written `\"Atif\"` inside the brackets. The parameters we assign values ​​while calling a function are called arguments.\n",
	"functions-args_key14": "In this example we learn:\n",
	"functions-args_key15": "Defined a function named `say_hello` which takes a parameter named `name` and prints something using that\n\n",
	"functions-args_key16": "Then we called the function and at the time of calling the function, we gave an argument whose value was \"Atif\"\n\n",
	"functions-args_key17": "When this function call then which we have given `string` \"Atif\" argument. Here its value goes to the name parameter and this value\n\n",
	"functions-args_key18": "`name`  is passed to the parameter, so he can pass it inside the function to a `variable` named 'name'. We have written the print command by  using `variable` name.\n\n\n",
	"functions-args_key19": "**Note: This is a tricky concept, if you do not understand it very well, then you will definitely understand by reading it once and looking at other examples. ;-)**\n",
	"functions-args_key20": "Multiple Function Arguments\n",
	"functions-args_key21": "We have written the `code` with only one function argument. Now let's write the `code` with a few more function arguments.\n",
	"functions-args_key22": "**`Output` :-**\n",
	"functions-args_key23": "I will add two numbers.\n170\nI will add two numbers.\n",
	"functions-args_key24": "Type`Error`: unsupported operand type(s) for +: 'int' and 'str'\n",
	"functions-args_key25": "Here we have defined a function named `add_numbers`. But see that in bracket we have written 2 parameters. To take more than one argument, put a comma after the arguments. We have given two `integer` parameters while calling the function by writing add_numbers(120, 50). Here the sequence/order of parameters is important. In this function call it would have been\n",
	"functions-args_key26": "The value of `120` goes to *first parameter* `number1`Which is inside the function named `variable` number1\n",
	"functions-args_key27": "The value of `50` goes to *second parameter* `number2` which is inside the function named `variable` number2\n",
	"functions-args_key28": "Later we have defined two `variables`, `num_x` and `num_y` and then called add_numbers by giving num_x and num_y arguments.\n",
	"functions-args_key29": " The value of `num_x` is  `134` goes to the first parameter `number1` and the value of `num_y` is `Rinki` goes to the second parameter `number2` .\n\n\n",
	"functions-args_key30": "Let's see another example for better understanding.\n",
	"functions-args_key31": "As you saw that **`output`** shows the  **Type`Error`** why it is coming because of `integer` and `string` cann't be concatinate. We have store **`integer`** in the num1 and in the name store the **`string`**\n",
	"functions-args_key32": "**`Output` :-**\n",
	"functions-args_key33": "Sat sri akaal  Rishabh\nTuhada ki haal hai?\nHello  Armaan\nHow are you?\nHello  Abhishek\nHow are you?\nNamaste  Kavay\nAap kaise ho?\n",
	"functions-args_key34": "This function takes two parameters, `name` and `language`and works like this:\n",
	"functions-args_key35": "If `language` is  `\"hindi\"`, then should be print something in Hindi.\n",
	"functions-args_key36": "If `language` is `\"punjabi\"`, then should be print something in Punjabi.\n",
	"functions-args_key37": "If `\"hindi\"` or `\"punjabi\"`, you have given any langauge other than this, it will print in English.\n\n\n",
	"functions-args_key38": "To do this we defined a function that takes two arguments,  `name` and `language`.When we call `say_hello_language(\"rishabh\", \"punjabi\")` see what happens:\n",
	"functions-args_key39": "The `string` value \"Rishabh\" goes the first parameter which is `name` and the second parameter, `language` goes for \"punjabi\".\n\n",
	"functions-args_key40": "Then our program uses if-elif-else to see what is the value of the language and print it to the correct language accordingly\n\n",
	"functions-args_key41": "This happenes in the every function calls.\n\n\n\n",
	"functions-args_key42": "One more example\n",
	"functions-args_key43": "Try to think about the `output` by reading it before running. Then run it to see if you thought the correct `output` or not.\n",
	"functions-args_key44": "**`Output` :-**\n",
	"functions-args_key45": "Namaste  Imitiyaz\nAlah hafiz  Rishabh\nBonjour  Rahul\nHello  Vidya\nNamaste  Steve\nAlah hafiz  Saswata\nBonjour  Shakrundin\nHello  Rajeev\n",
	"functions-args_key46": "See in this function that, it takes 4 arguments, `name_x`, `name_y`, `name_z`, `name_a`. In the first line of `def`, we have written the names of 4 parameters with commas (`,`). The order in which we have written the parameters while calling the function, in the def line, In the same sequence/ order, the values ​​of the arguments go to the parameters.\n",
	"functions-args_key47": "The values ​​of the parameters in `say_hello_people(\"Imitiyaz\", \"Rishabh\", \"Rahul\", \"Vidya\")` are as follows:\n",
	"functions-args_key48": "The value of `\"Imtiyaz\"` is passed to the first parameter `name_x`\n",
	"functions-args_key49": "The value of `\"Rishabh\"`is passed to the first parameter `name_y`\n",
	"functions-args_key50": "The value of `\"Rahul\"` is passed to the first parameter `name_z`\n",
	"functions-args_key51": "The value of `\"Vidya\"` is passed to the first parameter `name_a`\n\n\n",
	"functions-args_key52": "`Python` Arbitrary Arguments\n",
	"functions-args_key53": "Arbitrary Arguments we use when do not know how many numbers we have of arguments are to be given in the function. We use ( * ) before parameters to define functions with arbitrary arguments as shown below.\n",
	"functions-args_key54": "`Example:-`\n",
	"functions-args_key55": "**`Output` :-**\n",
	"functions-args_key56": "i love chocolate\ni love butterscotch\ni love vanilla\ni love strawberry \n",
	"functions-args_key57": "Default parameter value\n",
	"functions-args_key58": "Here by default parameter value, we mean that we assign a value to a parameter while defining the function so that if we call the function without any argument, it will take the default value.\n",
	"functions-args_key59": "`Example :-`\n",
	"functions-args_key60": "**`Output` :-**\n",
	"functions-args_key61": "kartik is present today\nsonu is absent today\nvishal is present today\nUmesh is absent today\n"
}