{
	"functions-return_values_key1": "How to return a value from a function?\n",
	"functions-return_values_key2": "We used some functions which returned some values, that is, returned some data.we've written functions that don't return anything.\n",
	"functions-return_values_key3": "Write a simple addition function that returns the data.\n",
	"functions-return_values_key4": "**`Output`**\n",
	"functions-return_values_key5": "60\n583\n1246\n10.0\n",
	"functions-return_values_key6": "Here we have defined the function in the same way as we have been defining the functions till now. But in the last line in the function you will see something new.\n",
	"functions-return_values_key7": "In the last line, we have used the `return` `statement` to tell the function that it will return the value of `number_sum`\n",
	"functions-return_values_key8": "Since this function is returning the value of `number_sum`, we can easily store this value in a `variable`.\n",
	"functions-return_values_key9": "Like we have put the value of the sum of `20` and `40` in the `sum1` `variable`, which is 60.\n",
	"functions-return_values_key10": "We have returned a value from the function by using `return` in the last line of **function definition**. We call this the return `statement`. 'Return' means to give back.\n",
	"functions-return_values_key11": "Functions that return some value, we can do very interesting things with those functions, Have a look in the line `number_a = add_numbers(20,40) / add_numbers(5,1)`. Here we have called two add_numbers in one `statement` and then the result of both of them (60 of the first and 6 of the second) is divided by these functions, which returns something, We can do that in such a `statement`. We have done in the division line.\n\n\n\n",
	"functions-return_values_key12": "We write the same function without the return value.\n",
	"functions-return_values_key13": "**`Output` :-**\n",
	"functions-return_values_key14": "9\nNone\n<class 'NoneType'>\n",
	"functions-return_values_key15": "We have written the `code` of the above function here, but did not use the return `statement`. Because of this, this function will not return anything to us because this function does not return anything, We cannot put the sum of our numbers in another `variable` like we did in the previous example.\n",
	"functions-return_values_key16": "Here if you will see the value of `sum4`' then it will show `None`. `None` means nothing. Simply numbers that do not return a value return \"nothing\". `None` is a data type in `python`. In the line containing `print (type(number4))` you will see that it will show the type of sum4 as None type. It means that there is nothing in it.\n",
	"functions-return_values_key17": "Read the `code` below and think what will happen.Now run the `code` and see if you thought right\n",
	"functions-return_values_key18": "**`Output` :-** \n",
	"functions-return_values_key19": "Type`Error`: unsupported operand type(s) for /: 'NoneType' and 'NoneType'\n",
	"functions-return_values_key20": "Here we have tried to simply divide the values ​​of a function that does not return any value. We just read that the functions which do not return, return None (meaning nothing). When we divide None by None here, `Python` gets freaked out and doesn't know what to do. Because of this the `error` returns. `Python` tells us the same in `error`:\n",
	"functions-return_values_key21": "**`unsupported operand type(s) for /: 'NoneType' and 'NoneType'`**\n",
	"functions-return_values_key22": "This means that `Python` is not dividing the value of NoneType by the value of NoneType itself and an `error` has occurred.\n",
	"functions-return_values_key23": "Understandng function execution with a return `statement`\n",
	"functions-return_values_key24": "Before running this example, read its `code` and think about what this function will return and what it will print when we give 2 `integer` arguments to it.\n",
	"functions-return_values_key25": "**`Output` :-**\n",
	"functions-return_values_key26": "Hello from NavGurukul ;)\n",
	"functions-return_values_key27": "Here this function will print \"Hello from Navgurukul ;)\" and return the value of 120. It will return the value of 120 using the line \"return number_sum\".\n\n",
	"functions-return_values_key28": "The value `sum6` will become 120.\n\n",
	"functions-return_values_key29": "Whatever `code` you have written below the first `return number_sum` line, none of that `code` will work. This won't work because `python` receives a return `statement` while the function is running, So `Python` returns the value using that return `statement` and then none of the `code` below runs.\n\n\n",
	"functions-return_values_key30": "In a little more depth, Understand execution of function in `Python`. Try to understand without running this `code` first. Then run it once and see.\n",
	"functions-return_values_key31": "**`Output` :-**\n",
	"functions-return_values_key32": "Butter Chicken\nMutton Chaap\nChole Bhature\n",
	"functions-return_values_key33": "Our 'menu' function returns the value of the menu item of that day based on the 'day' argument.\n\n",
	"functions-return_values_key34": "Here mon_menu will have the value of \"Butter Chicken\" because our if-elif-else `statement` here sees that the day is given as \"Monday\" then return the \"Butter-Chicken\". As soon as `python` sees the return `statement`, it returns \"butter chicken\" and the function stops running. Because of this the last print command does not run. Because even before that print command, the return `statement` always causes the function to stop running.\n\n",
	"functions-return_values_key35": "Similarly when the value of day is \"tuesday\" then the return `statement` with return \"Mutton Chaap\" is `execute`d\n\n",
	"functions-return_values_key36": "And when both \"Monday\" and \"Tuesday\" are not there, the return `statement` with \"Chole Bhature\" gets `execute`d.\n\n",
	"functions-return_values_key37": "**But the return `statement` is `execute`d from inside if-elif-else, Our program never reaches the last if `statement` and it is never printed.**\n\n\n",
	"functions-return_values_key38": "Now we will write the same function in such a way that the last print command is also run. and `Will I be able to print? :-(\"` print the line :\n",
	"functions-return_values_key39": "**`Output` :-**\n",
	"functions-return_values_key40": "Will I be able to print? :-(\nButter Chicken\n",
	"functions-return_values_key41": "Here we have not used return `statement` in if-elif-else directly. We took the `variable` name `food` and stored value which we want into. Now when if-elif-else is run, our program proceeds to the print `statement` below it. Because `python` has not yet received a return `statement`, the print command runs. After printing it returns the value of *food* `variable` from the return `statement` but the last one which is the print `statement` will not get printed. Because the return `statement` is run before that print `statement` and because of that `python` does not reach the required print `statement`\n"
}