{
	"functions-intro_key1": "Basics of Functions\n",
	"functions-intro_key2": "Function is a `code` of block that only runs when it is called.\nIn the function we pass the data which we call parameter. Function returns data.\nBy using functions, we can write some `code` once and use it many times. This makes our work very easy.\n",
	"functions-intro_key3": "Run the `code`, it's `output` will be something like this.:\n",
	"functions-intro_key4": "NavGurukul\nHello!\nHow are you?\n`Python` is awesome\nHello!\nHow are you?\nHelloâ€¦\nHello!\nHow are you?\n",
	"functions-intro_key5": "Note that wherever `say_hello()` is written in the `code`, there the lines `Hello!` and `How are you?` are printed. This happened because in the second line we used the function `def say_hello()`. Now whenever this function is called, the `code` inside it will run. In this way we can use the same `code` again and again.\n",
	"functions-intro_key6": "Introduction to Functions\n",
	"functions-intro_key7": "By using functions, we can write some `code` once and make it do the same thing again and again. You have already used too many functions. Read this `code`:  \n",
	"functions-intro_key8": "`Ouput:-`\n",
	"functions-intro_key9": "`5`\n",
	"functions-intro_key10": "Here by using `len(names_list)` we know how many items are in the list.  Now we can count the items of any list by using `len` in our `code`. Here `len` is the fuction. Without functions, we would have to write `code` again and again to get the count of the items in the list. To understand this better, we will write its `code` ourselves in the next example.\n",
	"functions-intro_key11": "We will write a function. Try this `code` first, and then read below to understand about it.\n",
	"functions-intro_key12": "**`Output` :-**\n",
	"functions-intro_key13": "NavGurukul\n",
	"functions-intro_key14": "In Navgurukul, we have to take responsibility for our learning.\n",
	"functions-intro_key15": "In Navgurukul we treat all the people in the same way.\n",
	"functions-intro_key16": "NavGurukul\n",
	"functions-intro_key17": "In Navgurukul, we have to take responsibility for our learning.\n",
	"functions-intro_key18": "Another example to understand functions. Think of the `output` by reading this `code`. After trying this example, read carefully.\n",
	"functions-intro_key19": "By using `def` in the beginning, we are telling `python` that we have written a function name `definition_say_hello`\n\n",
	"functions-intro_key20": ". With these spaces, `Python` understands that this is the `code` of the function.\n",
	"functions-intro_key21": "Then in the next line, `definition_say_hello()` we have called the function which runs the `code` inside the function. we can say  **FUNCTION CALL** \n\n",
	"functions-intro_key22": "Finally we called  the function again by writing`definition_say_hello()`. One more time the function runs the `code` inside once. With this the `code` inside the function - i.e. - *2 print* command runs.\n\n",
	"functions-intro_key23": "`python`\ndef function_say_bye():\n    print(\"It was fun meeting with you. \")\n    print(\"Bye bye\")\nfunction_say_bye()\nfunction_say_bye()\nprint(\"`Python` is used a lot.\")\nfunction_say_bye()\nfunction_say_bye()\n",
	"functions-intro_key24": "Now add this line to your `code` and see if any `output` comes.\n",
	"functions-intro_key25": "**`Output` :-**\n",
	"functions-intro_key26": "Again Hello :)\nHow are you?\n",
	"functions-intro_key27": "In `Python`, just writing the function does not run the `code` of the function. Here first we told `python` the `code` of the function by using the def `key`word. It is called **\"FUNCTION DEFINITION\"**.\n",
	"functions-intro_key28": "Then we later called the function by writing `definition_hello_again()` and the written `code` try to run. It is called as **\"FUNCTION CALL\"**. In  **\"FUNCTION CALL\"** we put 2 brackets `(` `)` after the name of the function. This tells `Python` that the `code` inside the function has to run.\n"
}