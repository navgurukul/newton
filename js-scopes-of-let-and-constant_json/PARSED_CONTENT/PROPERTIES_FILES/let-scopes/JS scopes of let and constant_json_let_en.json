{
	"let_key1": "<span style=\"\">Output</span>: 10",
	"let_key2": "Reference<span style=\"\">Error</span>: num is not defined",
	"let_key3": "Explanation:",
	"let_key4": "Here we used curly braces for creating a block, inside that we declared a <span style=\"\">variable</span> with let and printed num, it gives us 10, but outside of the block it won’t work, because of that it will give a reference <span style=\"\">error</span>.",
	"let_key5": "we use let for <span style=\"\">variable</span> declarations too. Let is block scoped. It is limited upto a some place only.",
	"let_key6": "Block means the set of rules that are written inside curly braces.",
	"let_key7": "Example:",
	"let_key8": "<span style=\"\">Output</span>:",
	"let_key9": "please use Atm<br>while using Atm :1234<br>Thank you for using Atm<br>Reference<span style=\"\">Error</span>: secretPin is not defined",
	"let_key10": "Explanation:",
	"let_key11": "Here in this <span style=\"\">code</span> secretPin is declared with let and because of let is block scoped. That's why when you tried to print console.log('After using Atm :'+ secretPin) outside of the if block also it didn’t work. This is the behaviour we want there in the atm. But this won’t be possible with var in if and for, while blocks.",
	"let_key12": "I want to give a clarity here, the same kind of behaviour you will get with var also in function block but it won’t be possible with if and for, while blocks etc.,",
	"let_key13": "Example:",
	"let_key14": "NOTE:",
	"let_key15": "var is function scoped when a <span style=\"\">variable</span> with var is defined inside a function it will act as a local to that function and not be able to use that <span style=\"\">variable</span> outside of the function. And if var is declared outside anywhere in the <span style=\"\">code</span> that will act as a global <span style=\"\">variable</span> and can be used anywhere in the <span style=\"\">code</span>.",
	"let_key16": "Expalantion:",
	"let_key17": "In this example your atm is not stored at all after you are using atm, this happened because you created a <span style=\"\">variable</span> secretPinWithVar inside a function which means it is locally scooped inside a function and you can’t get that outside of function.",
	"let_key18": "Example:",
	"let_key19": "We can update the let <span style=\"\">variables</span>. Let will allow us to update the <span style=\"\">variables</span> as same as var.",
	"let_key20": "Example:",
	"let_key21": "// <span style=\"\">SyntaxE</span>rror: Identifier 'myCampus' has already been declared",
	"let_key22": "It will throw an <span style=\"\">error</span> because the <span style=\"\">variables</span> with let can’t redeclare"
}