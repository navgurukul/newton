{
	"basic-intro_key1": "name: python-basics\n",
	"basic-intro_key2": "# `Python` Basics\n\n\n",
	"basic-intro_key3": "The `Python` programming language has a wide range of syntactical constructions, standard library functions, and interactive development environment features. Fortunately, you can ignore most of that; you just need to learn enough to write some handy little programs.\nYou will, however, have to learn some basic programming concepts before you can do anything. Like a wizard-in-training, you might think these concepts seem arcane and tedious, but with some knowledge and practice, you’ll be able to command your computer like a magic wand to perform incredible feats.\n",
	"basic-intro_key4": "This chapter has a few examples that encourage you to type into the interactive `shell`, which lets you `execute` `Python` instructions one at a time and shows you the results instantly. Using the interactive `shell` is great for learning what basic `Python` instructions do, so give it a try as you follow along. You’ll remember the things you do much better than the things you only read.\n",
	"basic-intro_key5": "# Entering Expressions into the Interactive `Shell`\n\n\n",
	"basic-intro_key6": "You run the interactive `shell` by launching IDLE, which you installed with `Python` in the introduction. On Windows, open the Start menu, select All Programs ▸ `Python` 3.3, and then select IDLE (`Python` GUI). On OS X, select `Applications` ▸ Mac`Python` 3.3 ▸ IDLE. On Ubuntu, open a new `Terminal` window and enter idle3.\n",
	"basic-intro_key7": "A window with the >>> prompt should appear; that’s the interactive `shell`. Enter 2 + 2 at the prompt to have `Python` do some simple math.\n",
	"basic-intro_key8": "4\nThe IDLE window should now show some text like this:\n",
	"basic-intro_key9": "`Python` 3.3.2 (v3.3.2:d047928ae3f6, May 16 2013, 00:06:53) [MSC v.1600 64 bit\n(AMD64)] on win32\n",
	"basic-intro_key10": "4\n",
	"basic-intro_key11": "In `Python`, 2 + 2 is called an expression, which is the most basic kind of programming instruction in the language. Expressions consist of values (such as 2) and `operators` (such as +), and they can always evaluate (that is, reduce) down to a single value. That means you can use expressions anywhere in `Python` `code` that you could also use a value.\n",
	"basic-intro_key12": "In the previous example, 2 + 2 is evaluated down to a single value, 4. A single value with no `operators` is also considered an expression, though it evaluates only to itself, as shown here:\n",
	"basic-intro_key13": "2\n`Errors` are Okay!\n",
	"basic-intro_key14": "Programs will crash if they contain `code` the computer can’t understand, which will cause `Python` to show an `error` message. An `error` message won’t break your computer, though, so don’t be afraid to make mistakes. A crash just means the program stopped running unexpectedly.\n",
	"basic-intro_key15": "If you want to know more about an `error` message, you can search for the exact message text online to find out more about that specific `error`. You can also check out the resources at <span><a href=\"http://nostarch.com/automatestuff/\">http://nostarch.com/automatestuff/</a></span> to see a list of common `Python` `error` messages and their meanings.\n",
	"basic-intro_key16": "There are plenty of other `operators` you can use in `Python` expressions, too. For example, `Tab`le 1-1 lists all the math `operators` in `Python`.\n",
	"basic-intro_key17": "`Tab`le 1-1. Math `Operators` from Highest to Lowest Precedence\n",
	"basic-intro_key18": "`Operator`",
	"basic-intro_key19": "Operation",
	"basic-intro_key20": "ExampleEvaluates to...",
	"basic-intro_key21": "**",
	"basic-intro_key22": "Exponent",
	"basic-intro_key23": "2**3 = 8",
	"basic-intro_key24": "%",
	"basic-intro_key25": "Modules/remainder",
	"basic-intro_key26": "2%8 = 6",
	"basic-intro_key27": "//",
	"basic-intro_key28": "`integer` division/foored quotient",
	"basic-intro_key29": "22//8 = 2",
	"basic-intro_key30": "*",
	"basic-intro_key31": "Multiplication",
	"basic-intro_key32": "3*5 = 15",
	"basic-intro_key33": "-",
	"basic-intro_key34": "Subtraction",
	"basic-intro_key35": "5-2 = 3",
	"basic-intro_key36": "+",
	"basic-intro_key37": "Addition",
	"basic-intro_key38": "2+2 = 4",
	"basic-intro_key39": "The order of operations (also called precedence) of `Python` math `operators` is similar to that of mathematics. The ** `operator` is evaluated first; the *, /, //, and % `operators` are evaluated next, from left to right; and the + and - `operators` are evaluated last (also from left to right). You can use parentheses to override the usual precedence if you need to. Enter the following expressions into the interactive `shell`\n",
	"basic-intro_key40": "20\n",
	"basic-intro_key41": "30\n",
	"basic-intro_key42": "28093077826734\n",
	"basic-intro_key43": "256\n",
	"basic-intro_key44": "3.2857142857142856\n",
	"basic-intro_key45": "3\n",
	"basic-intro_key46": "2\n",
	"basic-intro_key47": "4\n",
	"basic-intro_key48": "16.0\n",
	"basic-intro_key49": "In each case, you as the programmer must enter the expression, but `Python` does the hard part of evaluating it down to a single value. `Python` will keep evaluating parts of the expression until it becomes a single value, as shown in Figure 1-1.\n",
	"basic-intro_key50": "Figure 1-1. Evaluating an expression reduces it to a single value.\n",
	"basic-intro_key51": "These rules for putting `operators` and values together to form expressions are a fundamental part of `Python` as a programming language, just like the grammar rules that help us communicate. Here’s an example:\n",
	"basic-intro_key52": "This is a grammatically correct English sentence.\n\n",
	"basic-intro_key53": "This grammatically is sentence not English correct a.\n\n\n",
	"basic-intro_key54": "The second line is difficult to parse because it doesn’t follow the rules of English. Similarly, if you type in a bad `Python` instruction, `Python` won’t be able to understand it and will display a `SyntaxE`rror `error` message, as shown here:\n",
	"basic-intro_key55": "You can always test to see whether an instruction works by typing it into the interactive `shell`. Don’t worry about breaking the computer: The worst thing that could happen is that `Python` responds with an `error` message. Professional software developers get `error` messages while writing `code` all the time.\n",
	"basic-intro_key56": "# The `Integer`, `Float`ing-Point, and `String` Data Types\n\n\n",
	"basic-intro_key57": "Remember that expressions are just values combined with `operators`, and they always evaluate down to a single value. A data type is a category for values, and every value belongs to exactly one data type. The most common data types in `Python` are listed in `Tab`le 1-2. The values -2 and 30, for example, are said to be `integer` values. The `integer` (or int) data type indicates values that are whole numbers. Numbers with a decimal point, such as 3.14, are called `float`ing-point numbers (or `floats`). Note that even though the value 42 is an `integer`, the value 42.0 would be a `float`ing-point number.\n",
	"basic-intro_key58": "`Tab`le 1-2. Common Data Types\n",
	"basic-intro_key59": "Data type",
	"basic-intro_key60": "Examples",
	"basic-intro_key61": "`Integers`",
	"basic-intro_key62": "-2, -1, 0, 1, 2, 3, 4, 5",
	"basic-intro_key63": "`Float`ing-point numbers",
	"basic-intro_key64": "-1.25, -1.0, --0.5, 0.0, 0.5, 1.0, 1.25",
	"basic-intro_key65": "`Strings`",
	"basic-intro_key66": "'a', 'aa', 'aaa', 'Hello!', '11 cats'",
	"basic-intro_key67": "`Python` programs can also have text values called `strings`, or strs (pronounced “stirs”). Always surround your `string` in single quote (') characters (as in 'Hello' or 'Goodbye cruel world!') so `Python` knows where the `string` begins and ends. You can even have a `string` with no characters in it, '', called a blank `string`. `Strings` are explained in greater detail in Chapter 4.\n",
	"basic-intro_key68": "If you ever see the `error` message `SyntaxE`rror: EOL while scanning `string` literal, you probably forgot the final single quote character at the end of the `string`, such as in this example:\n",
	"basic-intro_key69": "# `String` Concatenation and Replication\n\n\n",
	"basic-intro_key70": "The meaning of an `operator` may change based on the data types of the values next to it. For example, + is the addition `operator` when it operates on two `integers` or `float`ing-point values. However, when + is used on two `string` values, it joins the `strings` as the `string` concatenation `operator`. Enter the following into the interactive `shell`:\n",
	"basic-intro_key71": "'AliceBob'\nThe expression evaluates down to a single, new `string` value that combines the text of the two `strings`. However, if you try to use the + `operator` on a `string` and an `integer` value, `Python` will not know how to handle this, and it will display an `error` message.\n",
	"basic-intro_key72": "Traceback (most recent call last):\n  `File` \"<py`shell`#26>\", line 1, in <module>\n    'Alice' + 42\nType`Error`: Can't convert 'int' object to str implicitly\nThe `error` message Can't convert 'int' object to str implicitly means that `Python` thought you were trying to concatenate an `integer` to the `string` 'Alice'. Your `code` will have to explicitly convert the `integer` to a `string`, because `Python` cannot do this automatically. (Converting data types will be explained in Dissecting Your Program when talking about the str(), int(), and `float`() functions.)\n",
	"basic-intro_key73": "The * `operator` is used for multiplication when it operates on two `integer` or `float`ing-point values. But when the * `operator` is used on one `string` value and one `integer` value, it becomes the `string` replication `operator`. Enter a `string` multiplied by a number into the interactive `shell` to see this in action.\n",
	"basic-intro_key74": "'AliceAliceAliceAliceAlice'\nThe expression evaluates down to a single `string` value that repeats the original a number of times equal to the `integer` value. `String` replication is a useful trick, but it’s not used as often as `string` concatenation.\n",
	"basic-intro_key75": "The * `operator` can be used with only two numeric values (for multiplication) or one `string` value and one `integer` value (for `string` replication). Otherwise, `Python` will just display an `error` message.\n",
	"basic-intro_key76": "Traceback (most recent call last):\n  `File` \"<py`shell`#32>\", line 1, in <module>\n    'Alice' * 'Bob'\nType`Error`: can't multiply sequence by non-int of type 'str'\n",
	"basic-intro_key77": "Traceback (most recent call last):\n  `File` \"<py`shell`#33>\", line 1, in <module>\n    'Alice' * 5.0\nType`Error`: can't multiply sequence by non-int of type '`float`'\nIt makes sense that `Python` wouldn’t understand these expressions: You can’t multiply two words, and it’s hard to replicate an arbitrary `string` a fractional number of times.\n",
	"basic-intro_key78": ">>> 'Hello world!\n\n",
	"basic-intro_key79": "`SyntaxE`rror: EOL while scanning `string` literal\n",
	"basic-intro_key80": "# `Variable` Names\n\n\n",
	"basic-intro_key81": "Valid `variable` names",
	"basic-intro_key82": "Invalid `variable` names",
	"basic-intro_key83": "balance",
	"basic-intro_key84": "current-balance (hyphens are not allowed)",
	"basic-intro_key85": "currentBalance",
	"basic-intro_key86": "current balance (spaces are not allowed)",
	"basic-intro_key87": "current_balance",
	"basic-intro_key88": "4account (can’t begin with a number)",
	"basic-intro_key89": "spam",
	"basic-intro_key90": "42 (can’t begin with a number)",
	"basic-intro_key91": "SPAM",
	"basic-intro_key92": "total_$um (special characters like $ are not allowed)",
	"basic-intro_key93": "account4",
	"basic-intro_key94": "'hello' (special characters like ' are not allowed)",
	"basic-intro_key95": "`Variable` names are case-sensitive, meaning that spam, SPAM, Spam, and sPaM are four different `variables`. It is a `Python` convention to start your `variables` with a lowercase letter.\n",
	"basic-intro_key96": "This book uses camelcase for `variable` names instead of underscores; that is, `variables` lookLikeThis instead of looking_like_this. Some experienced programmers may point out that the official `Python` `code` style, PEP 8, says that underscores should be used. I unapologetically prefer camelcase and point to “A Foolish Consistency Is the Hobgoblin of Little Minds” in PEP 8 itself:\n",
	"basic-intro_key97": "“Consistency with the style guide is important. But most importantly: know when to be inconsistent—sometimes the style guide just doesn’t apply. When in doubt, use your best judgment.”\n",
	"basic-intro_key98": "A good `variable` name describes the data it contains. Imagine that you moved to a new house and labeled all of your moving boxes as Stuff. You’d never find anything! The `variable` names spam, eggs, and bacon are used as generic names for the examples in this book and in much of `Python`’s documentation (inspired by the Monty `Python` “Spam” sketch), but in your programs, a descriptive name will help make your `code` more readable.\n",
	"basic-intro_key99": "While the interactive `shell` is good for running `Python` instructions one at a time, to write entire `Python` programs, you’ll type the instructions into the `file` `editor`. The `file` `editor` is similar to text `editors` such as Notepad or TextMate, but it has some specific features for typing in source `code`. To open the `file` `editor` in IDLE, select `File`▸New `File`.\n",
	"basic-intro_key100": "The window that appears should contain a cursor awaiting your `input`, but it’s different from the interactive `shell`, which runs `Python` instructions as soon as you press ENTER. The `file` `editor` lets you type in many instructions, `save` the `file`, and run the program. Here’s how you can tell the difference between the two:\n",
	"basic-intro_key101": "The interactive `shell` window will always be the one with the >>> prompt.\n\n",
	"basic-intro_key102": "The `file` `editor` window will not have the >>> prompt.\n\n\n",
	"basic-intro_key103": "Now it’s time to create your first program! When the `file` `editor` window opens, type the following into it:\n",
	"basic-intro_key104": "❶ # This program says hello and asks for my name.\n",
	"basic-intro_key105": "❷ print('Hello world!')\n   print('What is your name?')    # ask for their name\n③ myName = `input`()\n④ print('It is good to meet you, ' + myName)\n⑤ print('The length of your name is:')\n   print(len(myName))\n⑥ print('What is your age?')    # ask for their age\n   myAge = `input`()\n   print('You will be ' + str(int(myAge) + 1) + ' in a year.')\nOnce you’ve entered your source `code`, `save` it so that you won’t have to retype it each time you start IDLE. From the menu at the top of the `file` `editor` window, select `File`▸`Save` As. In the `Save` As window, enter hello.py in the `File` Name field and then click `Save`.\n",
	"basic-intro_key106": "You should `save` your programs every once in a while as you type them. That way, if the computer crashes or you accidentally exit from IDLE, you won’t lose the `code`. As a shortcut, you can press CTRL-S on Windows and Linux or ⌘-S on OS X to `save` your `file`.\n",
	"basic-intro_key107": "Once you’ve `save`d, let’s run our program. Select Run▸Run Module or just press the F5 `key`. Your program should run in the interactive `shell` window that appeared when you first started IDLE. Remember, you have to press F5 from the `file` `editor` window, not the interactive `shell` window. Enter your name when your program asks for it. The program’s `output` in the interactive `shell` should look something like this:\n",
	"basic-intro_key108": "`Python` 3.3.2 (v3.3.2:d047928ae3f6, May 16 2013, 00:06:53) [MSC v.1600 64 bit\n(AMD64)] on win32\nType \"copyright\", \"credits\" or \"license()\" for more information.\n",
	"basic-intro_key109": "`Python` 3.3.2 (v3.3.2:d047928ae3f6, May 16 2013, 00:06:53) [MSC v.1600 64 bit\n(AMD64)] on win32\nType \"copyright\", \"credits\" or \"license()\" for more information.\n",
	"basic-intro_key110": "Hello world!\nWhat is your name?\nAl\nIt is good to meet you, Al\nThe length of your name is:\n2\nWhat is your age?\n4\nYou will be 5 in a year.\n",
	"basic-intro_key111": "When there are no more lines of `code` to `execute`, the `Python` program terminates; that is, it stops running. (You can also say that the `Python` program exits.)\n",
	"basic-intro_key112": "You can close the `file` `editor` by clicking the X at the top of the window. To reload a `save`d program, select `File`▸Open from the menu. Do that now, and in the window that appears, choose hello.py, and click the Open button. Your previously `save`d hello.py program should open in the `file` `editor` window.\n",
	"basic-intro_key113": "# The print() Function\n\n\n",
	"basic-intro_key114": "The print() function displays the `string` value inside the parentheses on the screen.\n",
	"basic-intro_key115": "❷ print('Hello world!')\n   print('What is your name?') # ask for their name\nThe line print('Hello world!') means “Print out the text in the `string` 'Hello world!'.” When `Python` `executes` this line, you say that `Python` is calling the print() function and the `string` value is being passed to the function. A value that is passed to a function call is an argument. Notice that the quotes are not printed to the screen. They just mark where the `string` begins and ends; they are not part of the `string` value.\n",
	"basic-intro_key116": "Note\nYou can also use this function to put a blank line on the screen; just call print() with nothing in between the parentheses.\n",
	"basic-intro_key117": "When writing a function name, the opening and closing parentheses at the end identify it as the name of a function. This is why in this book you’ll see print() rather than print. Chapter 2 describes functions in more detail.\n",
	"basic-intro_key118": "The `input`() Function\nThe `input`() function waits for the user to type some text on the `key`board and press ENTER.\n",
	"basic-intro_key119": "③ myName = `input`()\nThis function call evaluates to a `string` equal to the user’s text, and the previous line of `code` assigns the myName `variable` to this `string` value.\n",
	"basic-intro_key120": "You can think of the `input`() function call as an expression that evaluates to whatever `string` the user typed in. If the user entered 'Al', then the expression would evaluate to myName = 'Al'.\n",
	"basic-intro_key121": "Printing the User’s Name\nThe following call to print() actually contains the expression 'It is good to meet you, ' + myName between the parentheses.\n",
	"basic-intro_key122": "④ print('It is good to meet you, ' + myName)\nRemember that expressions can always evaluate to a single value. If 'Al' is the value stored in myName on the previous line, then this expression evaluates to 'It is good to meet you, Al'. This single `string` value is then passed to print(), which prints it on the screen.\n",
	"basic-intro_key123": "The len() Function\nYou can pass the len() function a `string` value (or a `variable` containing a `string`), and the function evaluates to the `integer` value of the number of characters in that `string`.\n",
	"basic-intro_key124": "⑤ print('The length of your name is:')\n   print(len(myName))\nEnter the following into the interactive `shell` to try this:\n",
	"basic-intro_key125": "5\n",
	"basic-intro_key126": "46\n",
	"basic-intro_key127": "0\nJust like those examples, len(myName) evaluates to an `integer`. It is then passed to print() to be displayed on the screen. Notice that print() allows you to pass it either `integer` values or `string` values. But notice the `error` that shows up when you type the following into the interactive `shell`:\n",
	"basic-intro_key128": ">>> print('I am ' + 29 + ' years old.')\nTraceback (most recent call last):\n  `File` \"<py`shell`#6>\", line 1, in <module>\n    print('I am ' + 29 + ' years old.')\nType`Error`: Can't convert 'int' object to str implicitly\nThe print() function isn’t causing that `error`, but rather it’s the expression you tried to pass to print(). You get the same `error` message if you type the expression into the interactive `shell` on its own.\n\n",
	"basic-intro_key129": "Traceback (most recent call last):\n  `File` \"<py`shell`#7>\", line 1, in <module>\n    'I am ' + 29 + ' years old.'\nType`Error`: Can't convert 'int' object to str implicitly\n`Python` gives an `error` because you can use the + `operator` only to add two `integers` together or concatenate two `strings`. You can’t add an `integer` to a `string` because this is ungrammatical in `Python`. You can fix this by using a `string` version of the `integer` instead, as explained in the next section.\n",
	"basic-intro_key130": "The str(), int(), and `float`() Functions\nIf you want to concatenate an `integer` such as 29 with a `string` to pass to print(), you’ll need to get the value '29', which is the `string` form of 29. The str() function can be passed an `integer` value and will evaluate to a `string` value version of it, as follows:\n",
	"basic-intro_key131": "'29'\n",
	"basic-intro_key132": "I am 29 years old.\nBecause str(29) evaluates to '29', the expression 'I am ' + str(29) + ' years old.' evaluates to 'I am ' + '29' + ' years old.', which in turn evaluates to 'I am 29 years old.'. This is the value that is passed to the print() function.\n",
	"basic-intro_key133": "The str(), int(), and `float`() functions will evaluate to the `string`, `integer`, and `float`ing-point forms of the value you pass, respectively. Try converting some values in the interactive `shell` with these functions, and watch what happens.\n",
	"basic-intro_key134": "'0'\n",
	"basic-intro_key135": "'-3.14'\n",
	"basic-intro_key136": "42\n",
	"basic-intro_key137": "-99\n",
	"basic-intro_key138": "1\n",
	"basic-intro_key139": "1\n",
	"basic-intro_key140": "3.14\n",
	"basic-intro_key141": "10.0\nThe previous examples call the str(), int(), and `float`() functions and pass them values of the other data types to obtain a `string`, `integer`, or `float`ing-point form of those values.\n",
	"basic-intro_key142": "The str() function is handy when you have an `integer` or `float` that you want to concatenate to a `string`. The int() function is also helpful if you have a number as a `string` value that you want to use in some mathematics. For example, the `input`() function always returns a `string`, even if the user enters a number. Enter spam = `input`() into the interactive `shell` and enter 101 when it waits for your text.\n",
	"basic-intro_key143": "101\n",
	"basic-intro_key144": "'101'\nThe value stored inside spam isn’t the `integer` 101 but the `string` '101'. If you want to do math using the value in spam, use the int() function to get the `integer` form of spam and then store this as the new value in spam.\n",
	"basic-intro_key145": "101\nNow you should be able to treat the spam `variable` as an `integer` instead of a `string`.\n",
	"basic-intro_key146": "202.0\nNote that if you pass a value to int() that it cannot evaluate as an `integer`, `Python` will display an `error` message.\n",
	"basic-intro_key147": "Traceback (most recent call last):\n  `File` \"<py`shell`#18>\", line 1, in <module>\n    int('99.99')\nValue`Error`: invalid literal for int() with base 10: '99.99'\n",
	"basic-intro_key148": "Traceback (most recent call last):\n  `File` \"<py`shell`#19>\", line 1, in <module>\n    int('twelve')\nValue`Error`: invalid literal for int() with base 10: 'twelve'\nThe int() function is also useful if you need to round a `float`ing-point number down. If you want to round a `float`ing-point number up, just add 1 to it afterward.\n",
	"basic-intro_key149": "7\n",
	"basic-intro_key150": "8\nIn your program, you used the int() and str() functions in the last three lines to get a value of the appropriate data type for the `code`.\n",
	"basic-intro_key151": "⑥ print('What is your age?') # ask for their age\n   myAge = `input`()\n   print('You will be ' + str(int(myAge) + 1) + ' in a year.')\nThe myAge `variable` contains the value returned from `input`(). Because the `input`() function always returns a `string` (even if the user typed in a number), you can use the int(myAge) `code` to return an `integer` value of the `string` in myAge. This `integer` value is then added to 1 in the expression int(myAge) + 1.\n",
	"basic-intro_key152": "The result of this addition is passed to the str() function: str(int(myAge) + 1). The `string` value returned is then concatenated with the `strings` 'You will be ' and ' in a year.' to evaluate to one large `string` value. This large `string` is finally passed to print() to be displayed on the screen.\n",
	"basic-intro_key153": "Let’s say the user enters the `string` '4' for myAge. The `string` '4' is converted to an `integer`, so you can add one to it. The result is 5. The str() function converts the result back to a `string`, so you can concatenate it with the second `string`, 'in a year.', to create the final message. These evaluation steps would look something like Figure 1-4.\n",
	"basic-intro_key154": "Text and Number Equivalence\n",
	"basic-intro_key155": "Although the `string` value of a number is considered a completely different value from the `integer` or `float`ing-point version, an `integer` can be equal to a `float`ing point.\n",
	"basic-intro_key156": "`False`\n",
	"basic-intro_key157": "`True`\n",
	"basic-intro_key158": "`True`\n`Python` makes this distinction because `strings` are text, while `integers` and `floats` are both numbers.\n",
	"basic-intro_key159": "# Practice Questions\n\n",
	"basic-intro_key160": "Q:\n",
	"basic-intro_key161": "Which of the following are `operators`, and which are values?\n\n\n\n",
	"basic-intro_key162": "*\n'hello'\n-88.8\n-\n/\n+\n5\nQ:\n",
	"basic-intro_key163": "Which of the following is a `variable`, and which is a `string`?\n\n\n\n",
	"basic-intro_key164": "spam\n'spam'\nQ:\n",
	"basic-intro_key165": "Name three data types.\n\n\n",
	"basic-intro_key166": "Q:\n",
	"basic-intro_key167": "What is an expression made up of? What do all expressions do?\n\n\n",
	"basic-intro_key168": "Q:\n",
	"basic-intro_key169": "This chapter introduced assignment `statements`, like spam = 10. What is the difference between an expression and a `statement`?\n\n\n",
	"basic-intro_key170": "Q:\n",
	"basic-intro_key171": "What does the `variable` bacon contain after the following `code` runs?\n\n\n\n",
	"basic-intro_key172": "bacon = 20\nbacon + 1\nQ:\n",
	"basic-intro_key173": "What should the following two expressions evaluate to?\n\n\n\n",
	"basic-intro_key174": "'spam' + 'spamspam'\n'spam' * 3\nQ:\n",
	"basic-intro_key175": "Why is eggs a valid `variable` name while 100 is invalid?\n\n\n",
	"basic-intro_key176": "Q:\n",
	"basic-intro_key177": "What three functions can be used to get the `integer`, `float`ing-point number, or `string` version of a value?\n\n\n",
	"basic-intro_key178": "Q:\n",
	"basic-intro_key179": "Why does this expression cause an `error`? How can you fix it?\n\n\n\n",
	"basic-intro_key180": "'I have eaten ' + 99 + ' burritos.'\nExtra credit: Search online for the `Python` documentation for the len() function. It will be on a web page titled “Built-in Functions.” Skim the list of other functions `Python` has, look up what the round() function does, and experiment with it in the interactive `shell`.\n"
}