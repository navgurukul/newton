{
	"a-short-program-guess-the-number_key1": "A Short Program: Guess the Number\n",
	"a-short-program-guess-the-number_key2": "The toy examples I’ve show you so far are useful for introducing basic concepts, but now let’s see how everything you’ve learned comes together in a more complete program. In this section, I’ll show you a simple “guess the number” game. When you run this program, the `output` will look something like this:\n",
	"a-short-program-guess-the-number_key3": "I am thinking of a number between 1 and 20.\nTake a guess.\n10\nYour guess is too low.\nTake a guess.\n15\nYour guess is too low.\nTake a guess.\n17\nYour guess is too high.\nTake a guess.\n16\nGood job! You guessed my number in 4 guesses!\nType the following source `code` into the `file` `editor`, and `save` the `file` as guessTheNumber.py:\n",
	"a-short-program-guess-the-number_key4": "This is a guess the number game.\n",
	"a-short-program-guess-the-number_key5": "First, a comment at the top of the `code` explains what the program does. Then, the program imports the random module so that it can use the random.randint() function to generate a number for the user to guess. The return value, a random `integer` between 1 and 20, is stored in the `variable` secretNumber.\n",
	"a-short-program-guess-the-number_key6": "print('I am thinking of a number between 1 and 20.')\n",
	"a-short-program-guess-the-number_key7": "Ask the player to guess 6 times.\n",
	"a-short-program-guess-the-number_key8": "for guessesTaken in range(1, 7):\n    print('Take a guess.')\n    guess = int(`input`())\nThe program tells the player that it has come up with a secret number and will give the player six chances to guess it. The `code` that lets the player enter a guess and checks that guess is in a for `loop` that will `loop` at most six times. The first thing that happens in the `loop` is that the player types in a guess. Since `input`() returns a `string`, its return value is passed straight into int(), which translates the `string` into an `integer` value. This gets stored in a `variable` named guess.\n",
	"a-short-program-guess-the-number_key9": "These few lines of `code` check to see whether the guess is less than or greater than the secret number. In either case, a hint is printed to the screen.\n",
	"a-short-program-guess-the-number_key10": "After the for `loop`, the previous if...else `statement` checks whether the player has correctly guessed the number and prints an appropriate message to the screen. In both cases, the program displays a `variable` that contains an `integer` value (guessesTaken and secretNumber). Since it must concatenate these `integer` values to `strings`, it passes these `variables` to the str() function, which returns the `string` value form of these `integers`. Now these `strings` can be concatenated with the + `operators` before finally being passed to the print() function call.\n",
	"a-short-program-guess-the-number_key11": "Summary\n",
	"a-short-program-guess-the-number_key12": "Functions are the primary way to compartmentalize your `code` into logical groups. Since the `variables` in functions exist in their own local scopes, the `code` in one function cannot directly affect the values of `variables` in other functions. This limits what `code` could be changing the values of your `variables`, which can be helpful when it comes to debugging your `code`.\n",
	"a-short-program-guess-the-number_key13": "Functions are a great tool to help you organize your `code`. You can think of them as black boxes: They have `inputs` in the form of parameters and `outputs` in the form of return values, and the `code` in them doesn’t affect `variables` in other functions.\n",
	"a-short-program-guess-the-number_key14": "In previous chapters, a single `error` could cause your programs to crash. In this chapter, you learned about try and except `statements`, which can run `code` when an `error` has been detected. This can make your programs more resilient to common `error` cases.\n"
}