{
	"practice-questions_key1": "Practice Questions\n",
	"practice-questions_key2": "Q:\n",
	"practice-questions_key3": "What are escape characters?\n\n\n",
	"practice-questions_key4": "Q:\n",
	"practice-questions_key5": "What do the \\n and \\t escape characters represent?\n\n\n",
	"practice-questions_key6": "Q:\n",
	"practice-questions_key7": "How can you put a \\ backslash character in a `string`?\n\n\n",
	"practice-questions_key8": "Q:\n",
	"practice-questions_key9": "The `string` value \"Howl's Moving Castle\" is a valid `string`. Why isn’t it a problem that the single quote character in the word Howl's isn’t escaped?\n\n\n",
	"practice-questions_key10": "Q:\n",
	"practice-questions_key11": "If you don’t want to put \\n in your `string`, how can you write a `string` with newlines in it?\n\n\n",
	"practice-questions_key12": "Q:\n",
	"practice-questions_key13": "What do the following expressions evaluate to?\n\n\n",
	"practice-questions_key14": "'Hello world!'[1]\n",
	"practice-questions_key15": "'Hello world!'[0:5]\n",
	"practice-questions_key16": "'Hello world!'[:5]\n",
	"practice-questions_key17": "'Hello world!'[3:]\n",
	"practice-questions_key18": "Q:\n",
	"practice-questions_key19": "What do the following expressions evaluate to?\n\n\n",
	"practice-questions_key20": "'Hello'.upper()\n",
	"practice-questions_key21": "'Hello'.upper().isupper()\n",
	"practice-questions_key22": "'Hello'.upper().lower()\n",
	"practice-questions_key23": "Q:\n",
	"practice-questions_key24": "What do the following expressions evaluate to?\n\n\n",
	"practice-questions_key25": "'Remember, remember, the fifth of November.'.split()\n",
	"practice-questions_key26": "'-'.join('There can be only one.'.split())\n",
	"practice-questions_key27": "Q:\n",
	"practice-questions_key28": "What `string` methods can you use to right-justify, left-justify, and center a `string`?\n\n\n",
	"practice-questions_key29": "Q:\n",
	"practice-questions_key30": "How can you trim whitespace characters from the beginning or end of a `string`?\n\n\n",
	"practice-questions_key31": "Practice Project\n",
	"practice-questions_key32": "For practice, write a program that does the following.\n",
	"practice-questions_key33": "`Tab`le Printer\n",
	"practice-questions_key34": "Write a function named print`Tab`le() that takes a list of lists of `strings` and displays it in a well-organized `tab`le with each column right-justified. Assume that all the inner lists will contain the same number of `strings`. For example, the value could look like this:\n",
	"practice-questions_key35": "`tab`leData = [['apples', 'oranges', 'cherries', 'banana'],\n             ['Alice', 'Bob', 'Carol', 'David'],\n             ['dogs', 'cats', 'moose', 'goose']]\nYour print`Tab`le() function would print the following:\n",
	"practice-questions_key36": "  apples Alice  dogs\n oranges   Bob  cats\ncherries Carol moose\n  banana David goose\nHint: Your `code` will first have to find the longest `string` in each of the inner lists so that the whole column can be wide enough to fit all the `strings`. You can store the maximum width of each column as a list of `integers`. The print`Tab`le() function can begin with colWidths = [0] * len(`tab`leData), which will create a list containing the same number of 0 values as the number of inner lists in `tab`leData. That way, colWidths[0] can store the width of the longest `string` in `tab`leData[0], colWidths[1] can store the width of the longest `string` in `tab`leData[1], and so on. You can then find the largest value in the colWidths list to find out what `integer` width to pass to the rjust() `string` method.\n"
}