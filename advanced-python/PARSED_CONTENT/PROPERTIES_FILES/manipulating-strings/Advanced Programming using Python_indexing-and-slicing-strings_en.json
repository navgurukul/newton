{
	"indexing-and-slicing-strings_key1": "name: indexing-and-slicing-strings\n",
	"indexing-and-slicing-strings_key2": "# Indexing and Slicing `Strings`\n\n",
	"indexing-and-slicing-strings_key3": "`Strings` use indexes and slices the same way lists do. You can think of the `string` 'Hello world!' as a list and each character in the `string` as an item with a corresponding index.\n",
	"indexing-and-slicing-strings_key4": "'   H   e   l   l   o       w   o   r   l   d    !   '\n    0   1   2   3   4   5   6   7   8   9   10   11\nThe space and exclamation point are included in the character count, so 'Hello world!' is 12 characters long, from H at index 0 to ! at index 11.\n",
	"indexing-and-slicing-strings_key5": "Enter the following into the interactive `shell`:\n",
	"indexing-and-slicing-strings_key6": "If you specify an index, you’ll get the character at that position in the `string`. If you specify a range from one index to another, the starting index is included and the ending index is not. That’s why, if spam is 'Hello world!', spam[0:5] is 'Hello'. The sub`string` you get from spam[0:5] will include everything from spam[0] to spam[4], leaving out the space at index 5.\n",
	"indexing-and-slicing-strings_key7": "Note that slicing a `string` does not modify the original `string`. You can capture a slice from one `variable` in a separate `variable`. Try typing the following into the interactive `shell`:\n",
	"indexing-and-slicing-strings_key8": "By slicing and storing the resulting sub`string` in another `variable`, you can have both the whole `string` and the sub`string` handy for quick, easy access.\n",
	"indexing-and-slicing-strings_key9": "The in and not in `Operators` with `Strings`\nThe in and not in `operators` can be used with `strings` just like with list values. An expression with two `strings` joined using in or not in will evaluate to a Boolean `True` or `False`. Enter the following into the interactive `shell`:\n",
	"indexing-and-slicing-strings_key10": "These expressions test whether the first `string` (the exact `string`, case sensitive) can be found within the second `string`.\n"
}