{
	"useful-string-methods_key1": "Useful `String` Methods\n",
	"useful-string-methods_key2": "Several `string` methods analyze `strings` or create transformed `string` values. This section describes the methods you’ll be using most often.\n",
	"useful-string-methods_key3": "The upper(), lower(), isupper(), and islower() `String` Methods\n",
	"useful-string-methods_key4": "The upper() and lower() `string` methods return a new `string` where all the letters in the original `string` have been converted to uppercase or lower-case, respectively. Nonletter characters in the `string` remain unchanged. Enter the following into the interactive `shell`:\n",
	"useful-string-methods_key5": "Note that these methods do not change the `string` itself but return new `string` values. If you want to change the original `string`, you have to call upper() or lower() on the `string` and then assign the new `string` to the `variable` where the original was stored. This is why you must use spam = spam.upper() to change the `string` in spam instead of simply spam.upper(). (This is just like if a `variable` eggs contains the value 10. Writing eggs + 3 does not change the value of eggs, but eggs = eggs + 3 does.)\n",
	"useful-string-methods_key6": "The upper() and lower() methods are helpful if you need to make a case-insensitive comparison. The `strings` 'great' and 'GREat' are not equal to each other. But in the following small program, it does not matter whether the user types Great, GREAT, or grEAT, because the `string` is first converted to lowercase.\n",
	"useful-string-methods_key7": "When you run this program, the question is displayed, and entering a variation on great, such as GREat, will still give the `output` I feel great too. Adding `code` to your program to handle variations or mistakes in user `input`, such as inconsistent capitalization, will make your programs easier to use and less likely to fail.\n",
	"useful-string-methods_key8": "How are you?\nGREat\nI feel great too.\nThe isupper() and islower() methods will return a Boolean `True` value if the `string` has at least one letter and all the letters are uppercase or lowercase, respectively. Otherwise, the method returns `False`. Enter the following into the interactive `shell`, and notice what each method call returns:\n",
	"useful-string-methods_key9": "Since the upper() and lower() `string` methods themselves return `strings`, you can call `string` methods on those returned `string` values as well. Expressions that do this will look like a chain of method calls. Enter the following into the interactive `shell`:\n",
	"useful-string-methods_key10": "The isX `String` Methods\nAlong with islower() and isupper(), there are several `string` methods that have names beginning with the word is. These methods return a Boolean value that describes the nature of the `string`. Here are some common isX `string` methods:\n",
	"useful-string-methods_key11": "isalpha() returns `True` if the `string` consists only of letters and is not blank.\n",
	"useful-string-methods_key12": "isalnum() returns `True` if the `string` consists only of letters and numbers and is not blank.\n",
	"useful-string-methods_key13": "isdecimal() returns `True` if the `string` consists only of numeric characters and is not blank.\n",
	"useful-string-methods_key14": "isspace() returns `True` if the `string` consists only of spaces, `tabs`, and new-lines and is not blank.\n",
	"useful-string-methods_key15": "istitle() returns `True` if the `string` consists only of words that begin with an uppercase letter followed by only lowercase letters.\n",
	"useful-string-methods_key16": "Enter the following into the interactive `shell`:\n",
	"useful-string-methods_key17": "The isX `string` methods are helpful when you need to validate user `input`. For example, the following program repeatedly asks users for their age and a password until they provide valid `input`. Open a new `file` `editor` window and enter this program, saving it as validate`Input`.py:\n",
	"useful-string-methods_key18": "In the first while `loop`, we ask the user for their age and store their `input` in age. If age is a valid (decimal) value, we break out of this first while `loop` and move on to the second, which asks for a password. Otherwise, we inform the user that they need to enter a number and again ask them to enter their age. In the second while `loop`, we ask for a password, store the user’s `input` in password, and break out of the `loop` if the `input` was alphanumeric. If it wasn’t, we’re not satisfied so we tell the user the password needs to be alphanumeric and again ask them to enter a password.\n",
	"useful-string-methods_key19": "When run, the program’s `output` looks like this:\n",
	"useful-string-methods_key20": "Enter your age:\nforty two\nPlease enter a number for your age.\nEnter your age:\n42\nSelect a new password (letters and numbers only):\nsecr3t!\nPasswords can only have letters and numbers.\nSelect a new password (letters and numbers only):\nsecr3t\nCalling isdecimal() and isalnum() on `variables`, we’re able to test whether the values stored in those `variables` are decimal or not, alphanumeric or not. Here, these tests help us reject the `input` forty two and accept 42, and reject secr3t! and accept secr3t.\n"
}