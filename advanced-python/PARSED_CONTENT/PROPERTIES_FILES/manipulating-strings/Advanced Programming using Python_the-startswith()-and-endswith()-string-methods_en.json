{
	"the-startswith()-and-endswith()-string-methods_key1": "The startswith() and endswith() `String` Methods\n",
	"the-startswith()-and-endswith()-string-methods_key2": "The startswith() and endswith() methods return `True` if the `string` value they are called on begins or ends (respectively) with the `string` passed to the method; otherwise, they return `False`. Enter the following into the interactive `shell`:\n",
	"the-startswith()-and-endswith()-string-methods_key3": "These methods are useful alternatives to the == equals `operator` if you need to check only whether the first or last part of the `string`, rather than the whole thing, is equal to another `string`.\n",
	"the-startswith()-and-endswith()-string-methods_key4": "The join() and split() `String` Methods\nThe join() method is useful when you have a list of `strings` that need to be joined together into a single `string` value. The join() method is called on a `string`, gets passed a list of `strings`, and returns a `string`. The returned `string` is the concatenation of each `string` in the passed-in list. For example, enter the following into the interactive `shell`:\n",
	"the-startswith()-and-endswith()-string-methods_key5": "Notice that the `string` join() calls on is inserted between each `string` of the list argument. For example, when join(['cats', 'rats', 'bats']) is called on the ', ' `string`, the returned `string` is ‘cats, rats, bats’.\n",
	"the-startswith()-and-endswith()-string-methods_key6": "Remember that join() is called on a `string` value and is passed a list value. (It’s easy to accidentally call it the other way around.) The split() method does the opposite: It’s called on a `string` value and returns a list of `strings`. Enter the following into the interactive `shell`:\n",
	"the-startswith()-and-endswith()-string-methods_key7": "By default, the `string` 'My name is Simon' is split wherever whitespace characters such as the space, `tab`, or newline characters are found. These whitespace characters are not included in the `strings` in the returned list. You can pass a delimiter `string` to the split() method to specify a different `string` to split upon. For example, enter the following into the interactive `shell`:\n",
	"the-startswith()-and-endswith()-string-methods_key8": "A common use of split() is to split a multiline `string` along the newline characters. Enter the following into the interactive `shell`:\n",
	"the-startswith()-and-endswith()-string-methods_key9": "Passing split() the argument '\\n' lets us split the multiline `string` stored in spam along the newlines and return a list in which each item corresponds to one line of the `string`.\n",
	"the-startswith()-and-endswith()-string-methods_key10": "Justifying Text with rjust(), ljust(), and center()\nThe rjust() and ljust() `string` methods return a padded version of the `string` they are called on, with spaces inserted to justify the text. The first argument to both methods is an `integer` length for the justified `string`. Enter the following into the interactive `shell`:\n",
	"the-startswith()-and-endswith()-string-methods_key11": "'Hello'.rjust(10) says that we want to right-justify 'Hello' in a `string` of total length 10. 'Hello' is five characters, so five spaces will be added to its left, giving us a `string` of 10 characters with 'Hello' justified right.\n",
	"the-startswith()-and-endswith()-string-methods_key12": "An optional second argument to rjust() and ljust() will specify a fill character other than a space character. Enter the following into the interactive `shell`:\n",
	"the-startswith()-and-endswith()-string-methods_key13": "The center() `string` method works like ljust() and rjust() but centers the text rather than justifying it to the left or right. Enter the following into the interactive `shell`:\n",
	"the-startswith()-and-endswith()-string-methods_key14": "These methods are especially useful when you need to print `tab`ular data that has the correct spacing. Open a new `file` `editor` window and enter the following `code`, saving it as picnic`Tab`le.py:\n",
	"the-startswith()-and-endswith()-string-methods_key15": "In this program, we define a printPicnic() method that will take in a dictionary of information and use center(), ljust(), and rjust() to display that information in a neatly aligned `tab`le-like format.\n",
	"the-startswith()-and-endswith()-string-methods_key16": "The dictionary that we’ll pass to printPicnic() is picnicItems. In picnicItems, we have 4 sandwiches, 12 apples, 4 cups, and 8000 cookies. We want to organize this information into two columns, with the name of the item on the left and the quantity on the right.\n",
	"the-startswith()-and-endswith()-string-methods_key17": "To do this, we decide how wide we want the left and right columns to be. Along with our dictionary, we’ll pass these values to printPicnic().\n",
	"the-startswith()-and-endswith()-string-methods_key18": "printPicnic() takes in a dictionary, a leftWidth for the left column of a `tab`le, and a rightWidth for the right column. It prints a title, PICNIC ITEMS, centered above the `tab`le. Then, it `loops` through the dictionary, printing each `key`-value pair on a line with the `key` justified left and padded by periods, and the value justified right and padded by spaces.\n",
	"the-startswith()-and-endswith()-string-methods_key19": "After defining printPicnic(), we define the dictionary picnicItems and call printPicnic() twice, passing it different widths for the left and right `tab`le columns.\n",
	"the-startswith()-and-endswith()-string-methods_key20": "When you run this program, the picnic items are displayed twice. The first time the left column is 12 characters wide, and the right column is 5 characters wide. The second time they are 20 and 6 characters wide, respectively.\n",
	"the-startswith()-and-endswith()-string-methods_key21": "---PICNIC ITEMS--\nsandwiches..    4\napples......   12\ncups........    4\ncookies..... 8000\n-------PICNIC ITEMS-------\nsandwiches..........     4\napples..............    12\ncups................     4\ncookies.............  8000\nUsing rjust(), ljust(), and center() lets you ensure that `strings` are neatly aligned, even if you aren’t sure how many characters long your `strings` are.\n",
	"the-startswith()-and-endswith()-string-methods_key22": "Removing Whitespace with strip(), rstrip(), and lstrip()\nSometimes you may want to strip off whitespace characters (space, `tab`, and newline) from the left side, right side, or both sides of a `string`. The strip() `string` method will return a new `string` without any whitespace characters at the beginning or end. The lstrip() and rstrip() methods will remove whitespace characters from the left and right ends, respectively. Enter the following into the interactive `shell`:\n",
	"the-startswith()-and-endswith()-string-methods_key23": "Optionally, a `string` argument will specify which characters on the ends should be stripped. Enter the following into the interactive `shell`:\n",
	"the-startswith()-and-endswith()-string-methods_key24": "Passing strip() the argument 'ampS' will tell it to strip occurences of a, m, p, and capital S from the ends of the `string` stored in spam. The order of the characters in the `string` passed to strip() does not matter: strip('ampS') will do the same thing as strip('mapS') or strip('Spam').\n"
}