{
	"list-like-types:-strings-and-tuples_key1": "name:  list-like-types:-strings-and-tuples\n",
	"list-like-types:-strings-and-tuples_key2": "# List-like Types: `Strings` and Tuples\n\n",
	"list-like-types:-strings-and-tuples_key3": "Lists aren’t the only data types that represent ordered sequences of values. For example, `strings` and lists are actually similar, if you consider a `string` to be a “list” of single text characters. Many of the things you can do with lists can also be done with `strings`: indexing; slicing; and using them with for `loops`, with len(), and with the in and not in `operators`. To see this, enter the following into the interactive `shell`:\n",
	"list-like-types:-strings-and-tuples_key4": "Mu`tab`le and Immu`tab`le Data Types\nBut lists and `strings` are different in an important way. A list value is a mu`tab`le data type: It can have values added, removed, or changed. However, a `string` is immu`tab`le: It cannot be changed. Trying to reassign a single character in a `string` results in a Type`Error` `error`, as you can see by entering the following into the interactive `shell`:\n",
	"list-like-types:-strings-and-tuples_key5": "The proper way to “mutate” a `string` is to use slicing and concatenation to build a new `string` by copying from parts of the old `string`. Enter the following into the interactive `shell`:\n",
	"list-like-types:-strings-and-tuples_key6": "We used [0:7] and [8:12] to refer to the characters that we don’t wish to replace. Notice that the original 'Zophie a cat' `string` is not modified because `strings` are immu`tab`le.\n",
	"list-like-types:-strings-and-tuples_key7": "Although a list value is mu`tab`le, the second line in the following `code` does not modify the list eggs:\n",
	"list-like-types:-strings-and-tuples_key8": "The list value in eggs isn’t being changed here; rather, an entirely new and different list value ([4, 5, 6]) is overwriting the old list value ([1, 2, 3]). This is depicted in Figure 4-2.\n",
	"list-like-types:-strings-and-tuples_key9": "If you wanted to actually modify the original list in eggs to contain [4, 5, 6], you would have to do something like this:\n",
	"list-like-types:-strings-and-tuples_key10": " -->\n When eggs = [4, 5, 6] is `execute`d, the contents of eggs are replaced with a new list value.\n",
	"list-like-types:-strings-and-tuples_key11": "In the first example, the list value that eggs ends up with is the same list value it started with. It’s just that this list has been changed, rather than overwritten. Figure 4-3 depicts the seven changes made by the first seven lines in the previous interactive `shell` example.\n",
	"list-like-types:-strings-and-tuples_key12": " -->\n",
	"list-like-types:-strings-and-tuples_key13": " The del `statement` and the append() method modify the same list value in place.\n",
	"list-like-types:-strings-and-tuples_key14": "Changing a value of a mu`tab`le data type (like what the del `statement` and append() method do in the previous example) changes the value in place, since the `variable`’s value is not replaced with a new list value.\n",
	"list-like-types:-strings-and-tuples_key15": "Mu`tab`le versus immu`tab`le types may seem like a meaningless distinction, but Passing References will explain the different behavior when calling functions with mu`tab`le arguments versus immu`tab`le arguments. But first, let’s find out about the tuple data type, which is an immu`tab`le form of the list data type.\n"
}