{
	"sorting-the-values-in-a-list-with-the-sort()-method_key1": "name: sorting-the-values-in-a-list-with-the-sort()-method\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key2": "# Sorting the Values in a List with the sort() Method\n\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key3": "Lists of number values or lists of `strings` can be sorted with the sort() method. For example, enter the following into the interactive `shell`:\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key4": "You can also pass `True` for the reverse `key`word argument to have sort() sort the values in reverse order. Enter the following into the interactive `shell`:\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key5": "There are three things you should note about the sort() method. First, the sort() method sorts the list in place; don’t try to capture the return value by writing `code` like spam = spam.sort().\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key6": "Second, you cannot sort lists that have both number values and `string` values in them, since `Python` doesn’t know how to compare these values. Type the following into the interactive `shell` and notice the Type`Error` `error`:\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key7": "Third, sort() uses “ASCIIbetical order” rather than actual alphabetical order for sorting `strings`. This means uppercase letters come before lowercase letters. Therefore, the lowercase a is sorted so that it comes after the uppercase Z. For an example, enter the following into the interactive `shell`:\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key8": "If you need to sort the values in regular alphabetical order, pass str. lower for the `key` `key`word argument in the sort() method call.\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key9": "This causes the sort() method to treat all the items in the list as if they were lowercase without actually changing the values in the list.\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key10": "# Example Program: Magic 8 Ball with a List\n\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key11": "Using lists, you can write a much more elegant version of the previous chapter’s Magic 8 Ball program. Instead of several lines of nearly identical elif `statements`, you can create a single list that the `code` works with. Open a new `file` `editor` window and enter the following `code`. `Save` it as magic8Ball2.py.\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key12": "Exceptions to `Indentation` Rules in `Python`\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key13": "In most cases, the amount of `indentation` for a line of `code` tells `Python` what block it is in. There are some exceptions to this rule, however. For example, lists can actually span several lines in the source `code` `file`. The `indentation` of these lines do not matter; `Python` knows that until it sees the ending square bracket, the list is not finished. For example, you can have `code` that looks like this:\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key14": "Of course, practically speaking, most people use `Python`’s behavior to make their lists look pretty and readable, like the messages list in the Magic 8 Ball program.\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key15": "You can also split up a single instruction across multiple lines using the \\ line continuation character at the end. Think of \\ as saying, “This instruction continues on the next line.” The `indentation` on the line after a \\ line continuation is not significant. For example, the following is valid `Python` `code`:\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key16": "These tricks are useful when you want to rearrange long lines of `Python` `code` to be a bit more readable.\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key17": "When you run this program, you’ll see that it works the same as the previous magic8Ball.py program.\n",
	"sorting-the-values-in-a-list-with-the-sort()-method_key18": "Notice the expression you use as the index into messages: random.randint(0, len(messages) - 1). This produces a random number to use for the index, regardless of the size of messages. That is, you’ll get a random number between 0 and the value of len(messages) - 1. The benefit of this approach is that you can easily add and remove `strings` to the messages list without changing other lines of `code`. If you later update your `code`, there will be fewer lines you have to change and fewer chances for you to introduce bugs.\n"
}