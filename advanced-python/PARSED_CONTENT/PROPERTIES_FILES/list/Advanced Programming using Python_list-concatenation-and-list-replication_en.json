{
	"list-concatenation-and-list-replication_key1": "name: list-concatenation-and-list-replication\n",
	"list-concatenation-and-list-replication_key2": "# List Concatenation and List Replication\n\n",
	"list-concatenation-and-list-replication_key3": "The + `operator` can combine two lists to create a new list value in the same way it combines two `strings` into a new `string` value. The * `operator` can also be used with a list and an `integer` value to replicate the list. Enter the following into the interactive `shell`:\n",
	"list-concatenation-and-list-replication_key4": "# Removing Values from Lists with del `Statements`\n\n",
	"list-concatenation-and-list-replication_key5": "The del `statement` will delete values at an index in a list. All of the values in the list after the deleted value will be moved up one index. For example, enter the following into the interactive `shell`:\n",
	"list-concatenation-and-list-replication_key6": "The del `statement` can also be used on a simple `variable` to delete it, as if it were an “unassignment” `statement`. If you try to use the `variable` after deleting it, you will get a Name`Error` `error` because the `variable` no longer exists.\n",
	"list-concatenation-and-list-replication_key7": "In practice, you almost never need to delete simple `variables`. The del `statement` is mostly used to delete values from lists.\n",
	"list-concatenation-and-list-replication_key8": "# Working with Lists\n\n",
	"list-concatenation-and-list-replication_key9": "When you first begin writing programs, it’s tempting to create many individual `variables` to store a group of similar values. For example, if I wanted to store the names of my cats, I might be tempted to write `code` like this:\n",
	"list-concatenation-and-list-replication_key10": "(I don’t actually own this many cats, I swear.) It turns out that this is a bad way to write `code`. For one thing, if the number of cats changes, your program will never be able to store more cats than you have `variables`. These types of programs also have a lot of duplicate or nearly identical `code` in them. Consider how much duplicate `code` is in the following program, which you should enter into the `file` `editor` and `save` as allMyCats1.py:\n",
	"list-concatenation-and-list-replication_key11": "Instead of using multiple, repetitive `variables`, you can use a single `variable` that contains a list value. For example, here’s a new and improved version of the allMyCats1.py program. This new version uses a single list and can store any number of cats that the user types in. In a new `file` `editor` window, type the following source `code` and `save` it as allMyCats2.py:\n",
	"list-concatenation-and-list-replication_key12": "When you run this program, the `output` will look something like this:\n",
	"list-concatenation-and-list-replication_key13": "Enter the name of cat 1 (Or enter nothing to stop.):\nZophie\nEnter the name of cat 2 (Or enter nothing to stop.):\nPooka\nEnter the name of cat 3 (Or enter nothing to stop.):\nSimon\nEnter the name of cat 4 (Or enter nothing to stop.):\nLady Macbeth\nEnter the name of cat 5 (Or enter nothing to stop.):\nFat-tail\nEnter the name of cat 6 (Or enter nothing to stop.):\nMiss Cleo\nEnter the name of cat 7 (Or enter nothing to stop.):\n",
	"list-concatenation-and-list-replication_key14": "The cat names are:\n  Zophie\n  Pooka\n  Simon\n  Lady Macbeth\n  Fat-tail\n  Miss Cleo\nThe benefit of using a list is that your data is now in a structure, so your program is much more flexible in processing the data than it would be with several repetitive `variables`.\n"
}