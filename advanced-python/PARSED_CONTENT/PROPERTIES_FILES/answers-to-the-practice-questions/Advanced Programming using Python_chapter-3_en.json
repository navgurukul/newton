{
	"chapter-3_key1": "name: chapter-3\n",
	"chapter-3_key2": "# Chapter 3\n\n",
	"chapter-3_key3": "Functions reduce the need for duplicate `code`. This makes programs shorter, easier to read, and easier to update.\n",
	"chapter-3_key4": "The `code` in a function `executes` when the function is called, not when the function is defined.\n",
	"chapter-3_key5": "The def `statement` defines (that is, creates) a function.\n",
	"chapter-3_key6": "A function consists of the def `statement` and the `code` in its def clause.\n",
	"chapter-3_key7": "A function call is what moves the program execution into the function, and the function call evaluates to the function’s return value.\n",
	"chapter-3_key8": "There is one global scope, and a local scope is created whenever a function is called.\n",
	"chapter-3_key9": "When a function returns, the local scope is destroyed, and all the `variables` in it are forgotten.\n",
	"chapter-3_key10": "A return value is the value that a function call evaluates to. Like any value, a return value can be used as part of an expression.\n",
	"chapter-3_key11": "If there is no return `statement` for a function, its return value is None.\n",
	"chapter-3_key12": "A global `statement` will force a `variable` in a function to refer to the global `variable`.\n",
	"chapter-3_key13": "The data type of None is NoneType.\n",
	"chapter-3_key14": "That import `statement` imports a module named areallyourpetsnamederic. (This isn’t a real `Python` module, by the way.)\n",
	"chapter-3_key15": "This function can be called with spam.bacon().\n",
	"chapter-3_key16": "Place the line of `code` that might cause an `error` in a try clause.\n",
	"chapter-3_key17": "The `code` that could potentially cause an `error` goes in the try clause.\n",
	"chapter-3_key18": "The `code` that `executes` if an `error` happens goes in the except clause.\n"
}