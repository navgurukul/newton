{
	"chapter-4_key1": "name: chapter-4\n",
	"chapter-4_key2": "# Chapter 4\n\n",
	"chapter-4_key3": "The empty list value, which is a list value that contains no items. This is similar to how '' is the empty `string` value.\n",
	"chapter-4_key4": "spam[2] = 'hello' (Notice that the third value in a list is at index 2 because the first index is 0.)\n",
	"chapter-4_key5": "'d' (Note that '3' * 2 is the `string` '33', which is passed to int() before being divided by 11. This eventually evaluates to 3. Expressions can be used wherever values are used.)\n",
	"chapter-4_key6": "'d' (Negative indexes count from the end.)\n",
	"chapter-4_key7": "['a', 'b']\n",
	"chapter-4_key8": "1\n",
	"chapter-4_key9": "[3.14, 'cat', 11, 'cat', `True`, 99]\n",
	"chapter-4_key10": "[3.14, 11, 'cat', `True`]\n",
	"chapter-4_key11": "The `operator` for list concatenation is +, while the `operator` for replication is *. (This is the same as for `strings`.)\nWhile append() will add values only to the end of a list, insert() can add them anywhere in the list.\nThe del `statement` and the remove() list method are two ways to remove values from a list.\nBoth lists and `strings` can be passed to len(), have indexes and slices, be used in for `loops`, be concatenated or replicated, and be used with the in and not in `operators`.\nLists are mu`tab`le; they can have values added, removed, or changed. Tuples are immu`tab`le; they cannot be changed at all. Also, tuples are written using parentheses, ( and ), while lists use the square brackets, [ and ].\n(42,) (The trailing comma is mandatory.)\nThe tuple() and list() functions, respectively\nThey contain references to list values.\nThe copy.copy() function will do a shallow copy of a list, while the copy.deepcopy() function will do a deep copy of a list. That is, only copy.deepcopy() will duplicate any lists inside the list.\n"
}