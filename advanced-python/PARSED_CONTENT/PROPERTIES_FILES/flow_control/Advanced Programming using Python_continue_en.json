{
	"continue_key1": "name: continue\n",
	"continue_key2": "# continue `Statements`\n\n",
	"continue_key3": "Like break `statements`, continue `statements` are used inside `loops`. When the program execution reaches a continue `statement`, the program execution immediately jumps back to the start of the `loop` and reevaluates the `loop`’s condition. (This is also what happens when the execution reaches the end of the `loop`.)\n",
	"continue_key4": "Trapped in an Infinite `Loop`?\n",
	"continue_key5": "If you ever run a program that has a bug causing it to get stuck in an infinite `loop`, press CTRL-C. This will send a `Key`boardInterrupt `error` to your program and cause it to stop immediately. To try it, create a simple infinite `loop` in the `file` `editor`, and `save` it as infinite`loop`.py.\n",
	"continue_key6": "while `True`:\n    print('Hello world!')\nWhen you run this program, it will print Hello world! to the screen forever, because the while `statement`’s condition is always `True`. In IDLE’s interactive `shell` window, there are only two ways to stop this program: press CTRL-C or select `Shell` ▸ restart `Shell` from the menu. CTRL-C is handy if you ever want to terminate your program immediately, even if it’s not stuck in an infinite `loop`.\n",
	"continue_key7": "Let’s use continue to write a program that asks for a name and password. Enter the following `code` into a new `file` `editor` window and `save` the program as swordfish.py.\nIf the user enters any name besides Joe ❶, the continue `statement` ❷ causes the program execution to jump back to the start of the `loop`. When it reevaluates the condition, the execution will always enter the `loop`, since the condition is simply the value `True`. Once they make it past that if `statement`, the user is asked for a password ❸. If the password entered is swordfish, then the break `statement` ❹ is run, and the execution jumps out of the while `loop` to print Access granted ❺. Otherwise, the execution continues to the end of the while `loop`, where it then jumps back to the start of the `loop`. See Figure 2-13 for this program’s flowchart.\n",
	"continue_key8": "Figure 2-13. A flowchart for swordfish.py. The X path will logically never happen because the `loop` condition is always `True`.\n",
	"continue_key9": "“Truthy” and “`False`y” Values\n",
	"continue_key10": "There are some values in other data types that conditions will consider equivalent to `True` and `False`. When used in conditions, 0, 0.0, and '' (the empty `string`) are considered `False`, while all other values are considered `True`. For example, look at the following program:\nIf the user enters a blank `string` for name, then the while `statement`’s condition will be `True` ❶, and the program continues to ask for a name. If the value for numOfGuests is not 0 ❷, then the condition is considered to be `True`, and the program will print a reminder for the user ❸.\n",
	"continue_key11": "You could have typed not name != '' instead of not name, and numOfGuests != 0 instead of numOfGuests, but using the truthy and `false`y values can make your `code` easier to read.\n",
	"continue_key12": "Run this program and give it some `input`. Until you claim to be Joe, it shouldn’t ask for a password, and once you enter the correct password, it should exit.\n",
	"continue_key13": "Who are you?\nI'm fine, thanks. Who are you?\nWho are you?\nJoe\nHello, Joe. What is the password? (It is a fish.)\nMary\nWho are you?\nJoe\nHello, Joe. What is the password? (It is a fish.)\nswordfish\nAccess granted.\n"
}