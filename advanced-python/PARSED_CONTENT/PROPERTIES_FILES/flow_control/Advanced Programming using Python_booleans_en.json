{
	"booleans_key1": "Boolean Values\n",
	"booleans_key2": "While the `integer`, `float`ing-point, and `string` data types have an unlimited number of possible values, the Boolean data type has only two values: `True` and `False`. (Boolean is capitalized because the data type is named after mathematician George Boole.) When typed as `Python` `code`, the Boolean values `True` and `False` lack the quotes you place around `strings`, and they always start with a capital T or F, with the rest of the word in lowercase. Enter the following into the interactive `shell`. (Some of these instructions are intentionally incorrect, and they’ll cause `error` messages to appear.)\n",
	"booleans_key3": "Comparison `Operators`\n",
	"booleans_key4": "Operator",
	"booleans_key5": "Meaning",
	"booleans_key6": "==",
	"booleans_key7": "Equal to",
	"booleans_key8": "!=",
	"booleans_key9": "Not equal to",
	"booleans_key10": "<",
	"booleans_key11": "less than",
	"booleans_key12": ">",
	"booleans_key13": "Greater than",
	"booleans_key14": "<=",
	"booleans_key15": "Less than or equal to",
	"booleans_key16": ">=",
	"booleans_key17": "greater than or equal to",
	"booleans_key18": "These `operators` evaluate to `True` or `False` depending on the values you give them. Let’s try some `operators` now, starting with == and !=.\n",
	"booleans_key19": "As you might expect, == (equal to) evaluates to `True` when the values on both sides are the same, and != (not equal to) evaluates to `True` when the two values are different. The == and != `operators` can actually work with values of any data type.\nThe <, >, <=, and >= `operators`, on the other hand, work properly only with `integer` and `float`ing-point values.\n",
	"booleans_key20": "The Difference Between the == and = `Operators`\n",
	"booleans_key21": "You might have noticed that the == `operator` (equal to) has two equal signs, while the = `operator` (assignment) has just one equal sign. It’s easy to confuse these two `operators` with each other. Just remember these points:\n",
	"booleans_key22": "The == `operator` (equal to) asks whether two values are the same as each other.\n\n",
	"booleans_key23": "The = `operator` (assignment) puts the value on the right into the `variable` on the left.\n\n\n",
	"booleans_key24": "To help remember which is which, notice that the == `operator` (equal to) consists of two characters, just like the != `operator` (not equal to) consists of two characters.\n",
	"booleans_key25": "Boolean `Operators`\n",
	"booleans_key26": "The three Boolean `operators` (and, or, and not) are used to compare Boolean values. Like comparison `operators`, they evaluate these expressions down to a Boolean value. Let’s explore these `operators` in detail, starting with the and `operator`.\n",
	"booleans_key27": "Binary Boolean `Operators`\n",
	"booleans_key28": "The and and or `operators` always take two Boolean values (or expressions), so they’re considered binary `operators`. The and `operator` evaluates an expression to `True` if both Boolean values are `True`; otherwise, it evaluates to `False`. Enter some expressions using and into the interactive `shell` to see it in action.\n",
	"booleans_key29": "A truth `tab`le shows every possible result of a Boolean `operator`. `Tab`le 2-2 is the truth `tab`le for the and `operator`.\n",
	"booleans_key30": "Expression",
	"booleans_key31": "Evaluates to...",
	"booleans_key32": "`True` and `True`",
	"booleans_key33": "`True`",
	"booleans_key34": "`True` and `False`",
	"booleans_key35": "`False`",
	"booleans_key36": "`False` and `True`",
	"booleans_key37": "`False`",
	"booleans_key38": "`False` and `False`",
	"booleans_key39": "`false`",
	"booleans_key40": "On the other hand, the or `operator` evaluates an expression to `True` if either of the two Boolean values is `True`. If both are `False`, it evaluates to `False`.\n",
	"booleans_key41": "You can see every possible outcome of the or `operator` in its truth `tab`le, shown in `Tab`le 2-3.\n",
	"booleans_key42": "`Tab`le 2-3. The or `Operator`’s Truth `Tab`le\n",
	"booleans_key43": "Expression",
	"booleans_key44": "Evaluates to...",
	"booleans_key45": "`True` or `True`",
	"booleans_key46": "`True`",
	"booleans_key47": "`True` or `False`",
	"booleans_key48": "`True`",
	"booleans_key49": "`False` or `True`",
	"booleans_key50": "`True`",
	"booleans_key51": "`False` or `False`",
	"booleans_key52": "`false`",
	"booleans_key53": "The not `Operator`\n",
	"booleans_key54": "Unlike and and or, the not `operator` operates on only one Boolean value (or expression). The not `operator` simply evaluates to the opposite Boolean value.\n",
	"booleans_key55": "Much like using double negatives in speech and writing, you can nest not `operators` ❶, though there’s never not no reason to do this in real programs. `Tab`le 2-4 shows the truth `tab`le for not.\n",
	"booleans_key56": "Expression",
	"booleans_key57": "Evaluates to...",
	"booleans_key58": "not `True`",
	"booleans_key59": "`False`",
	"booleans_key60": "not `False`",
	"booleans_key61": "`True`",
	"booleans_key62": "Mixing Boolean and Comparison `Operators`\n",
	"booleans_key63": "Since the comparison `operators` evaluate to Boolean values, you can use them in expressions with the Boolean `operators`.\n",
	"booleans_key64": "Recall that the and, or, and not `operators` are called Boolean `operators` because they always operate on the Boolean values `True` and `False`. While expressions like 4 < 5 aren’t Boolean values, they are expressions that evaluate down to Boolean values. Try entering some Boolean expressions that use comparison `operators` into the interactive `shell`.\n",
	"booleans_key65": "The computer will evaluate the left expression first, and then it will evaluate the right expression. When it knows the Boolean value for each, it will then evaluate the whole expression down to one Boolean value. You can think of the computer’s evaluation process for (4 < 5) and (5 < 6) as shown in Figure 2-2.\n",
	"booleans_key66": "You can also use multiple Boolean `operators` in an expression, along with the comparison `operators`.\n",
	"booleans_key67": "The Boolean `operators` have an order of operations just like the math `operators` do. After any math and comparison `operators` evaluate, `Python` evaluates the not `operators` first, then the and `operators`, and then the or `operators`.\n"
}