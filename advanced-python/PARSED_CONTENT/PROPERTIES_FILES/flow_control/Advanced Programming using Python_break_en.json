{
	"break_key1": "break `Statements`\n",
	"break_key2": "There is a shortcut to getting the program execution to break out of a while `loop`’s clause early. If the execution reaches a break `statement`, it immediately exits the while `loop`’s clause. In `code`, a break `statement` simply contains the break `key`word.\n",
	"break_key3": "Pretty simple, right? Here’s a program that does the same thing as the previous program, but it uses a break `statement` to escape the `loop`. Enter the following `code`, and `save` the `file` as yourName2.py:\n",
	"break_key4": "The first line ❶ creates an infinite `loop`; it is a while `loop` whose condition is always `True`. (The expression `True`, after all, always evaluates down to the value `True`.) The program execution will always enter the `loop` and will exit it only when a break `statement` is `execute`d. (An infinite `loop` that never exits is a common programming bug.)\n",
	"break_key5": "Just like before, this program asks the user to type your name ❷. Now, however, while the execution is still inside the while `loop`, an if `statement` gets `execute`d ❸ to check whether name is equal to your name. If this condition is `True`, the break `statement` is run ❹, and the execution moves out of the `loop` to print('Thank you!') ❺. Otherwise, the if `statement`’s clause with the break `statement` is skipped, which puts the execution at the end of the while `loop`. At this point, the program execution jumps back to the start of the while `statement` ❶ to recheck the condition. Since this condition is merely the `True` Boolean value, the execution enters the `loop` to ask the user to type your name again. See Figure 2-12 for the flowchart of this program.\n",
	"break_key6": "Run yourName2.py, and enter the same text you entered for yourName.py. The rewritten program should respond in the same way as the original.\n",
	"break_key7": "Figure 2-12. The flowchart for the yourName2.py program with an infinite `loop`. Note that the X path will logically never happen because the `loop` condition is always `True`.\n"
}