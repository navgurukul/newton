{
	"module_key1": "Importing Modules\n",
	"module_key2": "All `Python` programs can call a basic set of functions called built-in functions, including the print(), `input`(), and len() functions you’ve seen before. `Python` also comes with a set of modules called the standard library. Each module is a `Python` program that contains a related group of functions that can be embedded in your programs. For example, the math module has mathematics-related functions, the random module has random number–related functions, and so on.\n",
	"module_key3": "Before you can use the functions in a module, you must import the module with an import `statement`. In `code`, an import `statement` consists of the following:\n",
	"module_key4": "The import `key`word\n\n",
	"module_key5": "The name of the module\n\n",
	"module_key6": "Optionally, more module names, as long as they are separated by commas\n\n\n",
	"module_key7": "Once you import a module, you can use all the cool functions of that module. Let’s give it a try with the random module, which will give us access to the random.randint() function.\n",
	"module_key8": "Enter this `code` into the `file` `editor`, and `save` it as printRandom.py:\n",
	"module_key9": "When you run this program, the `output` will look something like this:\n",
	"module_key10": "4\n1\n8\n4\n1\nThe random.randint() function call evaluates to a random `integer` value between the two `integers` that you pass it. Since randint() is in the random module, you must first type random. in front of the function name to tell `Python` to look for this function inside the random module.\n",
	"module_key11": "Here’s an example of an import `statement` that imports four different modules:\n",
	"module_key12": "import random, sys, os, math\nNow we can use any of the functions in these four modules. We’ll learn more about them later in the book.\n",
	"module_key13": "from import `Statements`\n",
	"module_key14": "Ending a Program Early with sys.exit()\n",
	"module_key15": "The last flow control concept to cover is how to terminate the program. This always happens if the program execution reaches the bottom of the instructions. However, you can cause the program to terminate, or exit, by calling the sys.exit() function. Since this function is in the sys module, you have to import sys before your program can use it.\n",
	"module_key16": "Open a new `file` `editor` window and enter the following `code`, saving it as exitExample.py:\n",
	"module_key17": "Run this program in IDLE. This program has an infinite `loop` with no break `statement` inside. The only way this program will end is if the user enters exit, causing sys.exit() to be called. When response is equal to exit, the program ends. Since the response `variable` is set by the `input`() function, the user must enter exit in order to stop the program.\n"
}