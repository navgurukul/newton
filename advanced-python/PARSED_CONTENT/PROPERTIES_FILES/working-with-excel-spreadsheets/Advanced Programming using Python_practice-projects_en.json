{
	"practice-projects_key1": "Practice Projects\n",
	"practice-projects_key2": "For practice, write programs that perform the following tasks.\n",
	"practice-projects_key3": "Multiplication `Tab`le Maker\nCreate a program multiplication`Tab`le.py that takes a number N from the command line and creates an N×N multiplication `tab`le in an Excel spreadsheet. For example, when the program is run like this:\n",
	"practice-projects_key4": "py multiplication`Tab`le.py 6\n... it should create a spreadsheet that looks like Figure 12-11.\n",
	"practice-projects_key5": " -->\nFigure 12-11. A multiplication `tab`le generated in a spreadsheet\n",
	"practice-projects_key6": "Row 1 and column A should be used for labels and should be in bold.\n",
	"practice-projects_key7": "Blank Row Inserter\n",
	"practice-projects_key8": "Create a program blankRowInserter.py that takes two `integers` and a `file`name `string` as command line arguments. Let’s call the first `integer` N and the second `integer` M. Starting at row N, the program should insert M blank rows into the spreadsheet. For example, when the program is run like this:\n",
	"practice-projects_key9": "`python` blankRowInserter.py 3 2 myProduce.xlsx\n... the “before” and “after” spreadsheets should look like Figure 12-12.\n",
	"practice-projects_key10": " -->\nFigure 12-12. Before (left) and after (right) the two blank rows are inserted at row 3\n",
	"practice-projects_key11": "You can write this program by reading in the contents of the spreadsheet. Then, when writing out the new spreadsheet, use a for `loop` to copy the first N lines. For the remaining lines, add M to the row number in the `output` spreadsheet.\n"
}