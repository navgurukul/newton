{
	"writing-excel-documents_key1": "Writing Excel Documents\n",
	"writing-excel-documents_key2": "OpenPyXL also provides ways of writing data, meaning that your programs can create and edit spreadsheet `files`. With `Python`, it’s simple to create spreadsheets with thousands of rows of data.\n",
	"writing-excel-documents_key3": "Creating and Saving Excel Documents\nCall the openpyxl.Workbook() function to create a new, blank Workbook object. Enter the following into the interactive `shell`:\n",
	"writing-excel-documents_key4": "['Sheet']\n",
	"writing-excel-documents_key5": "'Sheet'\n",
	"writing-excel-documents_key6": "['Spam Bacon Eggs Sheet']\nThe workbook will start off with a single sheet named Sheet. You can change the name of the sheet by storing a new `string` in its title attribute.\n",
	"writing-excel-documents_key7": "Any time you modify the Workbook object or its sheets and cells, the spreadsheet `file` will not be `save`d until you call the `save`() workbook method. Enter the following into the interactive `shell` (with example.xlsx in the current working directory):\n",
	"writing-excel-documents_key8": "Here, we change the name of our sheet. To `save` our changes, we pass a `file`name as a `string` to the `save`() method. Passing a different `file`name than the original, such as 'example_copy.xlsx', `saves` the changes to a copy of the spreadsheet.\n",
	"writing-excel-documents_key9": "Whenever you edit a spreadsheet you’ve loaded from a `file`, you should always `save` the new, edited spreadsheet to a different `file`name than the original. That way, you’ll still have the original spreadsheet `file` to work with in case a bug in your `code` caused the new, `save`d `file` to have incorrect or corrupt data.\n",
	"writing-excel-documents_key10": "Creating and Removing Sheets\nSheets can be added to and removed from a workbook with the create_sheet() and remove_sheet() methods. Enter the following into the interactive `shell`:\n",
	"writing-excel-documents_key11": "['Sheet']\n",
	"writing-excel-documents_key12": "<Worksheet \"Sheet1\">\n",
	"writing-excel-documents_key13": "['Sheet', 'Sheet1']\n",
	"writing-excel-documents_key14": "<Worksheet \"First Sheet\">\n",
	"writing-excel-documents_key15": "['First Sheet', 'Sheet', 'Sheet1']\n",
	"writing-excel-documents_key16": "<Worksheet \"Middle Sheet\">\n",
	"writing-excel-documents_key17": "['First Sheet', 'Sheet', 'Middle Sheet', 'Sheet1']\nThe create_sheet() method returns a new Worksheet object named SheetX, which by default is set to be the last sheet in the workbook. Optionally, the index and name of the new sheet can be specified with the index and title `key`word arguments.\n",
	"writing-excel-documents_key18": "Continue the previous example by entering the following:\n",
	"writing-excel-documents_key19": "['First Sheet', 'Sheet', 'Middle Sheet', 'Sheet1']\n",
	"writing-excel-documents_key20": "['First Sheet', 'Sheet']\nThe remove_sheet() method takes a Worksheet object, not a `string` of the sheet name, as its argument. If you know only the name of a sheet you want to remove, call get_sheet_by_name() and pass its return value into remove_sheet().\n",
	"writing-excel-documents_key21": "Remember to call the `save`() method to `save` the changes after adding sheets to or removing sheets from the workbook.\n",
	"writing-excel-documents_key22": "Writing Values to Cells\n",
	"writing-excel-documents_key23": "Writing values to cells is much like writing values to `keys` in a dictionary. Enter this into the interactive `shell`:\n",
	"writing-excel-documents_key24": "'Hello world!'\nIf you have the cell’s coordinate as a `string`, you can use it just like a dictionary `key` on the Worksheet object to specify which cell to write to.\n"
}