{
	"the-csv-module_key1": "name: the-csv-module\n",
	"the-csv-module_key2": "# The CSV Module\n\n",
	"the-csv-module_key3": "Each line in a CSV `file` represents a row in the spreadsheet, and commas separate the cells in the row. For example, the spreadsheet example.xlsx from <span><a href=\"http://nostarch.com/automatestuff/ \">http://nostarch.com/automatestuff/ </a></span> would look like this in a CSV `file`:\n",
	"the-csv-module_key4": "4/5/2015 13:34,Apples,73\n4/5/2015 3:41,Cherries,85\n4/6/2015 12:46,Pears,14\n4/8/2015 8:59,Oranges,52\n4/10/2015 2:07,Apples,152\n4/10/2015 18:10,Bananas,23\n4/10/2015 2:40,Strawberries,98\nI will use this `file` for this chapter’s interactive `shell` examples. You can download example.csv from <span><a href=\"http://nostarch.com/automatestuff/\">http://nostarch.com/automatestuff/</a></span> or enter the text into a text `editor` and `save` it as example.csv.\n",
	"the-csv-module_key5": "CSV `files` are simple, lacking many of the features of an Excel spreadsheet. For example, CSV `files`\n",
	"the-csv-module_key6": "Don’t have types for their values—everything is a `string`\n",
	"the-csv-module_key7": "Don’t have settings for font size or color\n",
	"the-csv-module_key8": "Don’t have multiple worksheets\n",
	"the-csv-module_key9": "Can’t specify cell widths and heights\n",
	"the-csv-module_key10": "Can’t have merged cells\n",
	"the-csv-module_key11": "Can’t have images or charts embedded in them\n",
	"the-csv-module_key12": "The advantage of CSV `files` is simplicity. CSV `files` are widely supported by many types of programs, can be viewed in text `editors` (including IDLE’s `file` `editor`), and are a straightforward way to represent spreadsheet data. The CSV format is exactly as advertised: It’s just a text `file` of comma-separated values.\n",
	"the-csv-module_key13": "Since CSV `files` are just text `files`, you might be tempted to read them in as a `string` and then process that `string` using the techniques you learned in Chapter 8. For example, since each cell in a CSV `file` is separated by a comma, maybe you could just call the split() method on each line of text to get the values. But not every comma in a CSV `file` represents the boundary between two cells. CSV `files` also have their own set of escape characters to allow commas and other characters to be included as part of the values. The split() method doesn’t handle these escape characters. Because of these potential pitfalls, you should always use the csv module for reading and writing CSV `files`.\n"
}