{
	"project-removing-the-header-from-csv-files_key1": "Project: Removing the Header from CSV `Files`\n",
	"project-removing-the-header-from-csv-files_key2": "Say you have the boring job of removing the first line from several hundred CSV `files`. Maybe you’ll be feeding them into an automated process that requires just the data and not the headers at the top of the columns. You could open each `file` in Excel, delete the first row, and re`save` the `file`—but that would take hours. Let’s write a program to do it instead.\n",
	"project-removing-the-header-from-csv-files_key3": "The program will need to open every `file` with the .csv extension in the current working directory, read in the contents of the CSV `file`, and rewrite the contents without the first row to a `file` of the same name. This will replace the old contents of the CSV `file` with the new, headless contents.\n",
	"project-removing-the-header-from-csv-files_key4": "Note\n",
	"project-removing-the-header-from-csv-files_key5": "As always, whenever you write a program that modifies `files`, be sure to back up the `files`, first just in case your program does not work the way you expect it to. You don’t want to accidentally erase your original `files`.\n",
	"project-removing-the-header-from-csv-files_key6": "At a high level, the program must do the following:\n",
	"project-removing-the-header-from-csv-files_key7": "Find all the CSV `files` in the current working directory.\n",
	"project-removing-the-header-from-csv-files_key8": "Read in the full contents of each `file`.\n",
	"project-removing-the-header-from-csv-files_key9": "Write out the contents, skipping the first line, to a new CSV `file`.\n",
	"project-removing-the-header-from-csv-files_key10": "At the `code` level, this means the program will need to do the following:\n",
	"project-removing-the-header-from-csv-files_key11": "`Loop` over a list of `files` from os.listdir(), skipping the non-CSV `files`.\n",
	"project-removing-the-header-from-csv-files_key12": "Create a CSV Reader object and read in the contents of the `file`, using the line_num attribute to figure out which line to skip.\n",
	"project-removing-the-header-from-csv-files_key13": "Create a CSV Writer object and write out the read-in data to the new `file`.\n",
	"project-removing-the-header-from-csv-files_key14": "For this project, open a new `file` `editor` window and `save` it as removeCsvHeader.py.\n",
	"project-removing-the-header-from-csv-files_key15": "Step 1: `Loop` Through Each CSV `File`\n",
	"project-removing-the-header-from-csv-files_key16": "The first thing your program needs to do is `loop` over a list of all CSV `file`names for the current working directory. Make your removeCsvHeader.py look like this:\n",
	"project-removing-the-header-from-csv-files_key17": "   #! `python3`\n",
	"project-removing-the-header-from-csv-files_key18": "removeCsvHeader.py - Removes the header from all CSV `files` in the current\n",
	"project-removing-the-header-from-csv-files_key19": "working directory.\n",
	"project-removing-the-header-from-csv-files_key20": "   import csv, os\n",
	"project-removing-the-header-from-csv-files_key21": "   os.makedirs('headerRemoved', exist_ok=`True`)\n",
	"project-removing-the-header-from-csv-files_key22": "`Loop` through every `file` in the current working directory.\n",
	"project-removing-the-header-from-csv-files_key23": "   for csv`File`name in os.listdir('.'):\n       if not csv`File`name.endswith('.csv'):\n❶         continue    # skip non-csv `files`\n",
	"project-removing-the-header-from-csv-files_key24": "The os.makedirs() call will create a headerRemoved folder where all the headless CSV `files` will be written. A for `loop` on os.listdir('.') gets you partway there, but it will `loop` over all `files` in the working directory, so you’ll need to add some `code` at the start of the `loop` that skips `file`names that don’t end with .csv. The continue `statement` ❶ makes the for `loop` move on to the next `file`name when it comes across a non-CSV `file`.\n",
	"project-removing-the-header-from-csv-files_key25": "Just so there’s some `output` as the program runs, print out a message saying which CSV `file` the program is working on. Then, add some TODO comments for what the rest of the program should do.\n",
	"project-removing-the-header-from-csv-files_key26": "Step 2: Read in the CSV `File`\n",
	"project-removing-the-header-from-csv-files_key27": "The program doesn’t remove the first line from the CSV `file`. Rather, it creates a new copy of the CSV `file` without the first line. Since the copy’s `file`name is the same as the original `file`name, the copy will overwrite the original.\n",
	"project-removing-the-header-from-csv-files_key28": "The program will need a way to track whether it is currently `loop`ing on the first row. Add the following to removeCsvHeader.py.\n",
	"project-removing-the-header-from-csv-files_key29": "--snip--\n    # Read the CSV `file` in (skipping first row).\ncsvRows = []\ncsv`File`Obj = open(csv`File`name)\nreaderObj = csv.reader(csv`File`Obj)\nfor row in readerObj:\n    if readerObj.line_num == 1:\n        continue    # skip first row\n    csvRows.append(row)\ncsv`File`Obj.close()\n",
	"project-removing-the-header-from-csv-files_key30": "The Reader object’s line_num attribute can be used to determine which line in the CSV `file` it is currently reading. Another for `loop` will `loop` over the rows returned from the CSV Reader object, and all rows but the first will be appended to csvRows.\n",
	"project-removing-the-header-from-csv-files_key31": "As the for `loop` iterates over each row, the `code` checks whether readerObj.line_num is set to 1. If so, it `executes` a continue to move on to the next row without appending it to csvRows. For every row afterward, the condition will be always be `False`, and the row will be appended to csvRows.\n",
	"project-removing-the-header-from-csv-files_key32": "Step 3: Write Out the CSV `File` Without the First Row\n",
	"project-removing-the-header-from-csv-files_key33": "Now that csvRows contains all rows but the first row, the list needs to be written out to a CSV `file` in the headerRemoved folder. Add the following to removeCsvHeader.py:\n",
	"project-removing-the-header-from-csv-files_key34": "   #! `python3`\n",
	"project-removing-the-header-from-csv-files_key35": "removeCsvHeader.py - Removes the header from all CSV `files` in the current\n",
	"project-removing-the-header-from-csv-files_key36": "working directory.\n",
	"project-removing-the-header-from-csv-files_key37": "   --snip--\n",
	"project-removing-the-header-from-csv-files_key38": "`Loop` through every `file` in the current working directory.\n",
	"project-removing-the-header-from-csv-files_key39": "❶ for csv`File`name in os.listdir('.'):\n       if not csv`File`name.endswith('.csv'):\n           continue    # skip non-CSV `files`\n",
	"project-removing-the-header-from-csv-files_key40": "The CSV Writer object will write the list to a CSV `file` in headerRemoved using csv`File`name (which we also used in the CSV reader). This will overwrite the original `file`.\n",
	"project-removing-the-header-from-csv-files_key41": "Once we create the Writer object, we `loop` over the sublists stored in csvRows and write each sublist to the `file`.\n",
	"project-removing-the-header-from-csv-files_key42": "After the `code` is `execute`d, the outer for `loop` ❶ will `loop` to the next `file`name from os.listdir('.'). When that `loop` is finished, the program will be complete.\n",
	"project-removing-the-header-from-csv-files_key43": "To test your program, download removeCsvHeader.zip from <span><a href=\"http://nostarch.com/automatestuff/\">http://nostarch.com/automatestuff/</a></span> and unzip it to a folder. Run the removeCsvHeader.py program in that folder. The `output` will look like this:\n",
	"project-removing-the-header-from-csv-files_key44": "Removing header from NAICS_data_1048.csv...\nRemoving header from NAICS_data_1218.csv...\n--snip--\nRemoving header from NAICS_data_9834.csv...\nRemoving header from NAICS_data_9986.csv...\nThis program should print a `file`name each time it strips the first line from a CSV `file`.\n",
	"project-removing-the-header-from-csv-files_key45": "Ideas for Similar Programs\nThe programs that you could write for CSV `files` are similar to the kinds you could write for Excel `files`, since they’re both spreadsheet `files`. You could write programs to do the following:\n",
	"project-removing-the-header-from-csv-files_key46": "Compare data between different rows in a CSV `file` or between multiple CSV `files`.\n",
	"project-removing-the-header-from-csv-files_key47": "Copy specific data from a CSV `file` to an Excel `file`, or vice versa.\n",
	"project-removing-the-header-from-csv-files_key48": "Check for invalid data or formatting mistakes in CSV `files` and alert the user to these `errors`.\n",
	"project-removing-the-header-from-csv-files_key49": "Read data from a CSV `file` as `input` for your `Python` programs.\n"
}