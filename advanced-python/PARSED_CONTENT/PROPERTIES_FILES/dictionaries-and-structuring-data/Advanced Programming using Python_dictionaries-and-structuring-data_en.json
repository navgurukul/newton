{
	"dictionaries-and-structuring-data_key1": "Dictionaries and Structuring Data\n",
	"dictionaries-and-structuring-data_key2": "In this chapter, I will cover the dictionary data type, which provides a flexible way to access and organize data. Then, combining dictionaries with your knowledge of lists from the previous chapter, you’ll learn how to create a data structure to model a tic-tac-toe board.\n",
	"dictionaries-and-structuring-data_key3": "The Dictionary Data Type\n",
	"dictionaries-and-structuring-data_key4": "Like a list, a dictionary is a collection of many values. But unlike indexes for lists, indexes for dictionaries can use many different data types, not just `integers`. Indexes for dictionaries are called `keys`, and a `key` with its associated value is called a `key`-value pair.\n",
	"dictionaries-and-structuring-data_key5": "In `code`, a dictionary is typed with braces, {}. Enter the following into the interactive `shell`:\n",
	"dictionaries-and-structuring-data_key6": "This assigns a dictionary to the myCat `variable`. This dictionary’s `keys` are 'size', 'color', and 'disposition'. The values for these `keys` are 'fat', 'gray', and 'loud', respectively. You can access these values through their `keys`:\n",
	"dictionaries-and-structuring-data_key7": "Dictionaries can still use `integer` values as `keys`, just like lists use `integers` for indexes, but they do not have to start at 0 and can be any number.\n",
	"dictionaries-and-structuring-data_key8": "Dictionaries vs. Lists\nUnlike lists, items in dictionaries are unordered. The first item in a list named spam would be spam[0]. But there is no “first” item in a dictionary. While the order of items matters for determining whether two lists are the same, it does not matter in what order the `key`-value pairs are typed in a dictionary. Enter the following into the interactive `shell`:\n",
	"dictionaries-and-structuring-data_key9": "Because dictionaries are not ordered, they can’t be sliced like lists.\n",
	"dictionaries-and-structuring-data_key10": "Trying to access a `key` that does not exist in a dictionary will result in a `KeyE`rror `error` message, much like a list’s “out-of-range” Index`Error` `error` message. Enter the following into the interactive `shell`, and notice the `error` message that shows up because there is no 'color' `key`:\n",
	"dictionaries-and-structuring-data_key11": "Though dictionaries are not ordered, the fact that you can have arbitrary values for the `keys` allows you to organize your data in powerful ways. Say you wanted your program to store data about your friends’ birthdays. You can use a dictionary with the names as `keys` and the birthdays as values. Open a new `file` `editor` window and enter the following `code`. `Save` it as birthdays.py.\n",
	"dictionaries-and-structuring-data_key12": "You create an initial dictionary and store it in birthdays ❶. You can see if the entered name exists as a `key` in the dictionary with the in `key`word ❷, just as you did for lists. If the name is in the dictionary, you access the associated value using square brackets ❸; if not, you can add it using the same square bracket `syntax` combined with the assignment `operator` ❹.\n",
	"dictionaries-and-structuring-data_key13": "When you run this program, it will look like this:\n",
	"dictionaries-and-structuring-data_key14": "Enter a name: (blank to quit)\nAlice\nApr 1 is the birthday of Alice\nEnter a name: (blank to quit)\nEve\nI do not have birthday information for Eve\nWhat is their birthday?\nDec 5\nBirthday da`tab`ase updated.\nEnter a name: (blank to quit)\nEve\nDec 5 is the birthday of Eve\nEnter a name: (blank to quit)\nOf course, all the data you enter in this program is forgotten when the program terminates. You’ll learn how to `save` data to `files` on the hard drive in Chapter 8.\n"
}