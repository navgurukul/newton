{
	"the-keys()-values()-and-items()-methods_key1": "name: the-keys()-values()-and-items()-methods\n",
	"the-keys()-values()-and-items()-methods_key2": "# The `keys`(), values(), and items() Methods\n\n",
	"the-keys()-values()-and-items()-methods_key3": "There are three dictionary methods that will return list-like values of the dictionaryâ€™s `keys`, values, or both `keys` and values: `keys`(), values(), and items(). The values returned by these methods are not `true` lists: They cannot be modified and do not have an append() method. But these data types (dict_`keys`, dict_values, and dict_items, respectively) can be used in for `loops`. To see how these methods work, enter the following into the interactive `shell`:\n",
	"the-keys()-values()-and-items()-methods_key4": "Using the `keys`(), values(), and items() methods, a for `loop` can iterate over the `keys`, values, or `key`-value pairs in a dictionary, respectively. Notice that the values in the dict_items value returned by the items() method are tuples of the `key` and value.\n",
	"the-keys()-values()-and-items()-methods_key5": "If you want a `true` list from one of these methods, pass its list-like return value to the list() function. Enter the following into the interactive `shell`:\n",
	"the-keys()-values()-and-items()-methods_key6": "The list(spam.`keys`()) line takes the dict_`keys` value returned from `keys`() and passes it to list(), which then returns a list value of ['color', 'age'].\n",
	"the-keys()-values()-and-items()-methods_key7": "You can also use the multiple assignment trick in a for `loop` to assign the `key` and value to separate `variables`. Enter the following into the interactive `shell`:\n"
}