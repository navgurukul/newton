{
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key1": "name: checking-whether-a-key-or-value-exists-in-a-dictionary\n",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key2": "# Checking Whether a `Key` or Value Exists in a Dictionary\n\n",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key3": "Recall from the previous chapter that the in and not in `operators` can check whether a value exists in a list. You can also use these `operators` to see whether a certain `key` or value exists in a dictionary. Enter the following into the interactive `shell`:\n",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key4": "In the previous example, notice that 'color' in spam is essentially a shorter version of writing 'color' in spam.`keys`(). This is always the case: If you ever want to check whether a value is (or isn’t) a `key` in the dictionary, you can simply use the in (or not in) `key`word with the dictionary value itself.\n",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key5": "# The get() Method\n\n",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key6": "It’s tedious to check whether a `key` exists in a dictionary before accessing that `key`’s value. Fortunately, dictionaries have a get() method that takes two arguments: the `key` of the value to retrieve and a fallback value to return if that `key` does not exist.\n",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key7": "Enter the following into the interactive `shell`:\n",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key8": "Because there is no 'eggs' `key` in the picnicItems dictionary, the default value 0 is returned by the get() method. Without using get(), the `code` would have caused an `error` message, such as in the following example:\n",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key9": "You’ll often have to set a value in a dictionary for a certain `key` only if that `key` does not already have a value. The `code` looks something like this:\n",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key10": "#The setdefault() method offers a way to do this in one line of `code`. The first argument passed to the method is the `key` to check for, and the second argument is the value to set at that `key` if the `key` does not exist. If the `key` does exist, the setdefault() method returns the `key`’s value. Enter the following into the interactive `shell`:\n",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key11": "The first time setdefault() is called, the dictionary in spam changes to {'color': 'black', 'age': 5, 'name': 'Pooka'}. The method returns the value 'black' because this is now the value set for the `key` 'color'. When spam.setdefault('color', 'white') is called next, the value for that `key` is not changed to 'white' because spam already has a `key` named 'color'.\n",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key12": "The setdefault() method is a nice shortcut to ensure that a `key` exists. Here is a short program that counts the number of occurrences of each letter in a `string`. Open the `file` `editor` window and enter the following `code`, saving it as characterCount.py:\n",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key13": "The program `loops` over each character in the message `variable`’s `string`, counting how often each character appears. The setdefault() method call ensures that the `key` is in the count dictionary (with a default value of 0) so the program doesn’t throw a `KeyE`rror `error` when count[character] = count[character] + 1 is `execute`d. When you run this program, the `output` will look like this:\n",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key14": "{' ': 13, ',': 1, '.': 1, 'A': 1, 'I': 1, 'a': 4, 'c': 3, 'b': 1, 'e': 5, 'd': 3, 'g': 2, 'i':\n6, 'h': 3, 'k': 2, 'l': 3, 'o': 2, 'n': 4, 'p': 1, 's': 3, 'r': 5, 't': 6, 'w': 2, 'y': 1}\nFrom the `output`, you can see that the lowercase letter c appears 3 times, the space character appears 13 times, and the uppercase letter A appears 1 time. This program will work no matter what `string` is inside the message `variable`, even if the `string` is millions of characters long!\n"
}