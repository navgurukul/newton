{
	"using-data-structures-to-model-real-world-things_key1": "Using Data Structures to Model Real-World Things\n",
	"using-data-structures-to-model-real-world-things_key2": "Even before the Internet, it was possible to play a game of chess with someone on the other side of the world. Each player would set up a chessboard at their home and then take turns mailing a postcard to each other describing each move. To do this, the players needed a way to unambiguously describe the state of the board and their moves.\n",
	"using-data-structures-to-model-real-world-things_key3": "In algebraic chess notation, the spaces on the chessboard are identified by a number and letter coordinate, as in Figure\n",
	"using-data-structures-to-model-real-world-things_key4": "`python`\ntheBoard = {'top-L': ' ', 'top-M': ' ', 'top-R': ' ',\n            'mid-L': ' ', 'mid-M': ' ', 'mid-R': ' ',\n            'low-L': ' ', 'low-M': ' ', 'low-R': ' '}\n",
	"using-data-structures-to-model-real-world-things_key5": "```\nThe data structure stored in the theBoard `variable` represents the tic-tactoe board in \n",
	"using-data-structures-to-model-real-world-things_key6": " -->\n An empty tic-tac-toe board\n",
	"using-data-structures-to-model-real-world-things_key7": "Since the value for every `key` in theBoard is a single-space `string`, this dictionary represents a completely clear board. If player X went first and chose the middle space, you could represent that board with this dictionary:\n",
	"using-data-structures-to-model-real-world-things_key8": "The data structure in theBoard now represents the tic-tac-toe board in Figure\n",
	"using-data-structures-to-model-real-world-things_key9": " -->\nThe first move\n",
	"using-data-structures-to-model-real-world-things_key10": "A board where player O has won by placing Os across the top might look like this:\n",
	"using-data-structures-to-model-real-world-things_key11": "The data structure in theBoard now represents the tic-tac-toe board in Figure\n",
	"using-data-structures-to-model-real-world-things_key12": " -->\nPlayer O wins.\n",
	"using-data-structures-to-model-real-world-things_key13": "Of course, the player sees only what is printed to the screen, not the contents of `variables`. Let’s create a function to print the board dictionary onto the screen. Make the following addition to ticTacToe.py (new `code` is in bold):\n",
	"using-data-structures-to-model-real-world-things_key14": "When you run this program, printBoard() will print out a blank tic-tactoe board.\n",
	"using-data-structures-to-model-real-world-things_key15": "| |\n-+-+-\n| |\n-+-+-\n| |\nThe printBoard() function can handle any tic-tac-toe data structure you pass it. Try changing the `code` to the following:\n",
	"using-data-structures-to-model-real-world-things_key16": "Now when you run this program, the new board will be printed to the screen.\n",
	"using-data-structures-to-model-real-world-things_key17": "O|O|O\n-+-+-\nX|X|\n-+-+-\n| |X\nBecause you created a data structure to represent a tic-tac-toe board and wrote `code` in printBoard() to interpret that data structure, you now have a program that “models” the tic-tac-toe board. You could have organized your data structure differently (for example, using `keys` like 'TOP-LEFT' instead of 'top-L'), but as long as the `code` works with your data structures, you will have a correctly working program.\n",
	"using-data-structures-to-model-real-world-things_key18": "For example, the printBoard() function expects the tic-tac-toe data structure to be a dictionary with `keys` for all nine slots. If the dictionary you passed was missing, say, the 'mid-L' `key`, your program would no longer work.\n",
	"using-data-structures-to-model-real-world-things_key19": "O|O|O\n-+-+-\nTraceback (most recent call last):\n  `File` \"ticTacToe.py\", line 10, in <module>\n    printBoard(theBoard)\n  `File` \"ticTacToe.py\", line 6, in printBoard\n    print(board['mid-L'] + '|' + board['mid-M'] + '|' + board['mid-R'])\n`KeyE`rror: 'mid-L'\nNow let’s add `code` that allows the players to enter their moves. Modify the ticTacToe.py program to look like this:\n",
	"using-data-structures-to-model-real-world-things_key20": "   theBoard = {'top-L': ' ', 'top-M': ' ', 'top-R': ' ', 'mid-L': ' ', 'mid-M': '\n   ', 'mid-R': ' ', 'low-L': ' ', 'low-M': ' ', 'low-R': ' '}\n",
	"using-data-structures-to-model-real-world-things_key21": "The new `code` prints out the board at the start of each new turn ❶, gets the active player’s move ❷, updates the game board accordingly ❸, and then swaps the active player ❹ before moving on to the next turn.\n",
	"using-data-structures-to-model-real-world-things_key22": "When you run this program, it will look something like this:\n",
	"using-data-structures-to-model-real-world-things_key23": " | |\n-+-+-\n | |\n-+-+-\n | |\nTurn for X. Move on which space?\nmid-M\n | |\n-+-+-\n |X|\n-+-+-\n | |\nTurn for O. Move on which space?\nlow-L\n | |\n-+-+-\n |X|\n-+-+-\nO| |\n",
	"using-data-structures-to-model-real-world-things_key24": "--snip--\n",
	"using-data-structures-to-model-real-world-things_key25": "O|O|X\n-+-+-\nX|X|O\n-+-+-\nO| |X\nTurn for X. Move on which space?\nlow-M\nO|O|X\n-+-+-\nX|X|O\n-+-+-\nO|X|X\nThis isn’t a complete tic-tac-toe game—for instance, it doesn’t ever check whether a player has won—but it’s enough to see how data structures can be used in programs.\n",
	"using-data-structures-to-model-real-world-things_key26": "Note\nIf you are curious, the source `code` for a complete tic-tac-toe program is described in the resources available from<span><a href=\" http://nostarch.com/automatestuff/.\">automatestuff</a></span>\n"
}