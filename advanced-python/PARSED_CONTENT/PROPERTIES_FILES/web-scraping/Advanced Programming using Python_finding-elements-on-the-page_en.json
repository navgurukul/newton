{
	"finding-elements-on-the-page_key1": "name: finding-elements-on-the-page\n",
	"finding-elements-on-the-page_key2": "# Finding Elements on the Page\n\n",
	"finding-elements-on-the-page_key3": "WebDriver objects have quite a few methods for finding elements on a page. They are divided into the find_element_* and find_elements_* methods. The find_element_* methods return a single WebElement object, representing the first element on the page that matches your query. The find_elements_* methods return a list of WebElement_* objects for every matching element on the page.\n",
	"finding-elements-on-the-page_key4": "`Tab`le 11-3 shows several examples of find_element_* and find_elements_* methods being called on a WebDriver object that’s stored in the `variable` browser.\n",
	"finding-elements-on-the-page_key5": "`Tab`le 11-3. Selenium’s WebDriver Methods for Finding Elements\n",
	"finding-elements-on-the-page_key6": "Method name\n",
	"finding-elements-on-the-page_key7": "WebElement object/list returned\n",
	"finding-elements-on-the-page_key8": " browser.find_element_by_class_name(name)\nbrowser.find_elements_by_class_name(name)\nElements that use the CSS class name\n",
	"finding-elements-on-the-page_key9": " browser.find_element_by_css_selector(selector)\nbrowser.find_elements_by_css_selector(selector)\nElements that match the CSS selector\n",
	"finding-elements-on-the-page_key10": " browser.find_element_by_id(id)\nbrowser.find_elements_by_id(id)\nElements with a matching id attribute value\n",
	"finding-elements-on-the-page_key11": " browser.find_element_by_link_text(text)\nbrowser.find_elements_by_link_text(text)\n<a> elements that completely match the text provided\n",
	"finding-elements-on-the-page_key12": " browser.find_element_by_partial_link_text(text)\nbrowser.find_elements_by_partial_link_text(text)\n<a> elements that contain the text provided\n",
	"finding-elements-on-the-page_key13": " browser.find_element_by_name(name)\nbrowser.find_elements_by_name(name)\nElements with a matching name attribute value\n",
	"finding-elements-on-the-page_key14": " browser.find_element_by_tag_name(name)\nbrowser.find_elements_by_tag_name(name)\nElements with a matching tag name (case insensitive; an <a> element is matched by 'a' and 'A')\n",
	"finding-elements-on-the-page_key15": "Except for the *_by_tag_name() methods, the arguments to all the methods are case sensitive. If no elements exist on the page that match what the method is looking for, the selenium module raises a NoSuchElement exception. If you do not want this exception to crash your program, add try and except `statements` to your `code`.\nOnce you have the WebElement object, you can find out more about it by reading the attributes or calling the methods in `Tab`le 11-4.\n`Tab`le 11-4. WebElement Attributes and Methods\nAttribute or method                                 Description\ntag_name                                             The tag name, such as 'a' for an <a> element\nget_attribute(name)                                 The value for the element’s name attribute\ntext                                                 The text within the element, such as 'hello' in <span>hello</span>\nclear()                                                For text field or text area elements, clears the text typed into it\nis_displayed()                                         Returns `True` if the element is visible; otherwise returns `False`\nis_enabled()                                         For `input` elements, returns `True` if the element is enabled; otherwise returns `False`\nis_selected()                                        For checkbox or radio button elements, returns `True` if the element is selected; otherwise returns `False`\nlocation                                            A dictionary with `keys` 'x' and 'y' for the position of the element in the page\nFor example, open a new `file` `editor` and enter the following program:\nfrom selenium import webdriver\nbrowser = webdriver.Firefox()\nbrowser.get('<span><a href=\"http://inventwith`python`.com'\">http://inventwith`python`.com'</a></span>)\ntry:\n    elem = browser.find_element_by_class_name('bookcover')\n    print('Found <%s> element with that class name!' % (elem.tag_name))\nexcept:\n    print('Was not able to find an element with that name.')\nHere we open Firefox and direct it to a URL. On this page, we try to find elements with the class name 'bookcover', and if such an element is found, we print its tag name using the tag_name attribute. If no such element was found, we print a different message.\nThis program will `output` the following:\nFound <img> element with that class name!\nWe found an element with the class name 'bookcover' and the tag name 'img'.\n"
}