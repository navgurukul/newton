{
	"saving-downloaded-files-to-the-hard-drive_key1": "name: saving-downloaded-files-to-the-hard-drive\n",
	"saving-downloaded-files-to-the-hard-drive_key2": "# Saving Downloaded `Files` to the Hard Drive\n\n",
	"saving-downloaded-files-to-the-hard-drive_key3": "From here, you can `save` the web page to a `file` on your hard drive with the standard open() function and write() method. There are some slight differences, though. First, you must open the `file` in write binary mode by passing the `string` 'wb' as the second argument to open(). Even if the page is in plaintext (such as the Romeo and Juliet text you downloaded earlier), you need to write binary data instead of text data in order to maintain the Uni`code` encoding of the text.\n",
	"saving-downloaded-files-to-the-hard-drive_key4": "Uni`code` Encodings\n",
	"saving-downloaded-files-to-the-hard-drive_key5": "Uni`code` encodings are beyond the scope of this book, but you can learn more about them from these web pages:\n",
	"saving-downloaded-files-to-the-hard-drive_key6": "Joel on Software: The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Uni`code` and Character Sets (No Excuses!): <span><a href=\" http://www.joelonsoftware.com/articles/Uni`code`.html\"> http://www.joelonsoftware.com/articles/Uni`code`.html</a></span>\n",
	"saving-downloaded-files-to-the-hard-drive_key7": "Pragmatic Uni`code`: <span><a href=\"http://nedbatchelder.com/text/unipain.html\">http://nedbatchelder.com/text/unipain.html</a></span>\n",
	"saving-downloaded-files-to-the-hard-drive_key8": "To write the web page to a `file`, you can use a for `loop` with the Response object’s iter_content() method.\n",
	"saving-downloaded-files-to-the-hard-drive_key9": "100000\n78981\n",
	"saving-downloaded-files-to-the-hard-drive_key10": "The iter_content() method returns “chunks” of the content on each iteration through the `loop`. Each chunk is of the bytes data type, and you get to specify how many bytes each chunk will contain. One hundred thousand bytes is generally a good size, so pass 100000 as the argument to iter_content().\n",
	"saving-downloaded-files-to-the-hard-drive_key11": "The `file` RomeoAndJuliet.txt will now exist in the current working directory. Note that while the `file`name on the website was rj.txt, the `file` on your hard drive has a different `file`name. The requests module simply handles downloading the contents of web pages. Once the page is downloaded, it is simply data in your program. Even if you were to lose your Internet connection after downloading the web page, all the page data would still be on your computer.\n",
	"saving-downloaded-files-to-the-hard-drive_key12": "The write() method returns the number of bytes written to the `file`. In the previous example, there were 100,000 bytes in the first chunk, and the remaining part of the `file` needed only 78,981 bytes.\n",
	"saving-downloaded-files-to-the-hard-drive_key13": "To review, here’s the complete process for downloading and saving a `file`:\n",
	"saving-downloaded-files-to-the-hard-drive_key14": "Call requests.get() to download the `file`.\n",
	"saving-downloaded-files-to-the-hard-drive_key15": "Call open() with 'wb' to create a new `file` in write binary mode.\n",
	"saving-downloaded-files-to-the-hard-drive_key16": "`Loop` over the Response object’s iter_content() method.\n",
	"saving-downloaded-files-to-the-hard-drive_key17": "Call write() on each iteration to write the content to the `file`.\n",
	"saving-downloaded-files-to-the-hard-drive_key18": "Call close() to close the `file`.\n",
	"saving-downloaded-files-to-the-hard-drive_key19": "That’s all there is to the requests module! The for `loop` and iter_content() stuff may seem complicated compared to the open()/write()/close() workflow you’ve been using to write text `files`, but it’s to ensure that the requests module doesn’t eat up too much memory even if you download massive `files`. You can learn about the requests module’s other features from <span><a href=\"http://requests.readthedocs.org/.\">http://requests.readthedocs.org/.</a></span>\n"
}