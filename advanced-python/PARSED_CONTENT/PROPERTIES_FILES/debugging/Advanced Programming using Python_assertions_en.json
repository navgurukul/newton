{
	"assertions_key1": "name: assertions\n",
	"assertions_key2": "# Assertions\n\n",
	"assertions_key3": "An assertion is a sanity check to make sure your `code` isn’t doing something obviously wrong. These sanity checks are performed by assert `statements`. If the sanity check fails, then an Assertion`Error` exception is raised. In `code`, an assert `statement` consists of the following:\n",
	"assertions_key4": "The assert `key`word\n",
	"assertions_key5": "A condition (that is, an expression that evaluates to `True` or `False`)\n",
	"assertions_key6": "A comma\n",
	"assertions_key7": "A `string` to display when the condition is `False`\n",
	"assertions_key8": "For example, enter the following into the interactive `shell`:\n",
	"assertions_key9": "Traceback (most recent call last):\n  `File` \"<py`shell`#10>\", line 1, in <module>\n    assert podBayDoorStatus == 'open', 'The pod bay doors need to be \"open\".'\nAssertion`Error`: The pod bay doors need to be \"open\".\nHere we’ve set podBayDoorStatus to 'open', so from now on, we fully expect the value of this `variable` to be 'open'. In a program that uses this `variable`, we might have written a lot of `code` under the assumption that the value is 'open'—`code` that depends on its being 'open' in order to work as we expect. So we add an assertion to make sure we’re right to assume podBayDoorStatus is 'open'. Here, we include the message 'The pod bay doors need to be \"open\".' so it’ll be easy to see what’s wrong if the assertion fails.\n",
	"assertions_key10": "Later, say we make the obvious mistake of assigning podBayDoorStatus another value, but don’t notice it among many lines of `code`. The assertion catches this mistake and clearly tells us what’s wrong.\n",
	"assertions_key11": "In plain English, an assert `statement` says, “I assert that this condition holds `true`, and if not, there is a bug somewhere in the program.” Unlike exceptions, your `code` should not handle assert `statements` with try and except; if an assert fails, your program should crash. By failing fast like this, you shorten the time between the original cause of the bug and when you first notice the bug. This will reduce the amount of `code` you will have to check before finding the `code` that’s causing the bug.\n",
	"assertions_key12": "Assertions are for programmer `errors`, not user `errors`. For `errors` that can be recovered from (such as a `file` not being found or the user entering invalid data), raise an exception instead of detecting it with an assert `statement`.\n"
}