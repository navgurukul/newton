{
	"getting-the-traceback-as-a-string_key1": "Getting the Traceback as a `String`\n",
	"getting-the-traceback-as-a-string_key2": "When `Python` encounters an `error`, it produces a treasure trove of `error` information called the traceback. The traceback includes the `error` message, the line number of the line that caused the `error`, and the sequence of the function calls that led to the `error`. This sequence of calls is called the call stack.\n",
	"getting-the-traceback-as-a-string_key3": "Open a new `file` `editor` window in IDLE, enter the following program, and `save` it as `errorE`xample.py:\n",
	"getting-the-traceback-as-a-string_key4": "def spam():\n    bacon()\ndef bacon():\n    raise Exception('This is the `error` message.')\n",
	"getting-the-traceback-as-a-string_key5": "spam()\nWhen you run `errorE`xample.py, the `output` will look like this:\n",
	"getting-the-traceback-as-a-string_key6": "Traceback (most recent call last):\n  `File` \"`errorE`xample.py\", line 7, in <module>\n    spam()\n  `File` \"`errorE`xample.py\", line 2, in spam\n    bacon()\n  `File` \"`errorE`xample.py\", line 5, in bacon\n    raise Exception('This is the `error` message.')\nException: This is the `error` message.\nFrom the traceback, you can see that the `error` happened on line 5, in the bacon() function. This particular call to bacon() came from line 2, in the spam() function, which in turn was called on line 7. In programs where functions can be called from multiple places, the call stack can help you determine which call led to the `error`.\n",
	"getting-the-traceback-as-a-string_key7": "The traceback is displayed by `Python` whenever a raised exception goes unhandled. But you can also obtain it as a `string` by calling traceback.format_exc(). This function is useful if you want the information from an exception’s traceback but also want an except `statement` to gracefully handle the exception. You will need to import `Python`’s traceback module before calling this function.\n",
	"getting-the-traceback-as-a-string_key8": "For example, instead of crashing your program right when an exception occurs, you can write the traceback information to a log `file` and keep your program running. You can look at the log `file` later, when you’re ready to debug your program. Enter the following into the interactive `shell`:\n",
	"getting-the-traceback-as-a-string_key9": "116\nThe traceback info was written to `error`Info.txt.\nThe 116 is the return value from the write() method, since 116 characters were written to the `file`. The traceback text was written to `error`Info.txt.\n",
	"getting-the-traceback-as-a-string_key10": "Traceback (most recent call last):\n  `File` \"<py`shell`#28>\", line 2, in <module>\nException: This is the `error` message.\n"
}