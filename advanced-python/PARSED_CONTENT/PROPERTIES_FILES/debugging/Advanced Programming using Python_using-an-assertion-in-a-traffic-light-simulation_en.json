{
	"using-an-assertion-in-a-traffic-light-simulation_key1": "Using an Assertion in a Traffic Light Simulation\n",
	"using-an-assertion-in-a-traffic-light-simulation_key2": "Say you’re building a traffic light simulation program. The data structure representing the stoplights at an intersection is a dictionary with `keys` 'ns' and 'ew', for the stoplights facing north-south and east-west, respectively. The values at these `keys` will be one of the `strings` 'green', ' yellow', or 'red'. The `code` would look something like this:\n",
	"using-an-assertion-in-a-traffic-light-simulation_key3": "market_2nd = {'ns': 'green', 'ew': 'red'}\nmission_16th = {'ns': 'red', 'ew': 'green'}\nThese two `variables` will be for the intersections of Market Street and 2nd Street, and Mission Street and 16th Street. To start the project, you want to write a switchLights() function, which will take an intersection dictionary as an argument and switch the lights.\n",
	"using-an-assertion-in-a-traffic-light-simulation_key4": "At first, you might think that switchLights() should simply switch each light to the next color in the sequence: Any 'green' values should change to 'yellow', 'yellow' values should change to 'red', and 'red' values should change to 'green'. The `code` to implement this idea might look like this:\n",
	"using-an-assertion-in-a-traffic-light-simulation_key5": "def switchLights(stoplight):\n    for `key` in stoplight.`keys`():\n        if stoplight[`key`] == 'green':\n            stoplight[`key`] = 'yellow'\n        elif stoplight[`key`] == 'yellow':\n            stoplight[`key`] = 'red'\n        elif stoplight[`key`] == 'red':\n            stoplight[`key`] = 'green'\n",
	"using-an-assertion-in-a-traffic-light-simulation_key6": "switchLights(market_2nd)\nYou may already see the problem with this `code`, but let’s pretend you wrote the rest of the simulation `code`, thousands of lines long, without noticing it. When you finally do run the simulation, the program doesn’t crash—but your virtual cars do!\n",
	"using-an-assertion-in-a-traffic-light-simulation_key7": "Since you’ve already written the rest of the program, you have no idea where the bug could be. Maybe it’s in the `code` simulating the cars or in the `code` simulating the virtual drivers. It could take hours to trace the bug back to the switchLights() function.\n",
	"using-an-assertion-in-a-traffic-light-simulation_key8": "But if while writing switchLights() you had added an assertion to check that at least one of the lights is always red, you might have included the following at the bottom of the function:\n",
	"using-an-assertion-in-a-traffic-light-simulation_key9": "assert 'red' in stoplight.values(), 'Neither light is red! ' + str(stoplight)\nWith this assertion in place, your program would crash with this `error` message:\n",
	"using-an-assertion-in-a-traffic-light-simulation_key10": "   Traceback (most recent call last):\n     `File` \"carSim.py\", line 14, in <module>\n       switchLights(market_2nd)\n     `File` \"carSim.py\", line 13, in switchLights\n       assert 'red' in stoplight.values(), 'Neither light is red! ' + str(stoplight)\n❶ Assertion`Error`: Neither light is red! {'ns': 'yellow', 'ew': 'green'}\nThe important line here is the Assertion`Error` ❶. While your program crashing is not ideal, it immediately points out that a sanity check failed: Neither direction of traffic has a red light, meaning that traffic could be going both ways. By failing fast early in the program’s execution, you can `save` yourself a lot of future debugging effort.\n"
}