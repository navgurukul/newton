{
	"practice-projects_key1": "name:  practice-projects\n",
	"practice-projects_key2": "# Practice Projects\n\n",
	"practice-projects_key3": "For practice, write programs that do the following.\n",
	"practice-projects_key4": "# PDF Paranoia\n\n",
	"practice-projects_key5": "Using the os.walk() function from Chapter 9, write a script that will go through every PDF in a folder (and its subfolders) and encrypt the PDFs using a password provided on the command line. `Save` each encrypted PDF with an _encrypted.pdf suffix added to the original `file`name. Before deleting the original `file`, have the program attempt to read and decrypt the `file` to ensure that it was encrypted correctly.\nThen, write a program that finds all encrypted PDFs in a folder (and its subfolders) and creates a decrypted copy of the PDF using a provided password. If the password is incorrect, the program should print a message to the user and continue to the next PDF.\n",
	"practice-projects_key6": "# Custom Invitations as Word Documents\n\n",
	"practice-projects_key7": "Say you have a text `file` of guest names. This guests.txt `file` has one name per line, as follows:\nProf. Plum\nMiss Scarlet\nCol. Mustard\nAl Sweigart\nRobocop\nWrite a program that would generate a Word document with custom invitations that look like Figure 13-11.\nSince `Python`-Docx can use only those styles that already exist in the Word document, you will have to first add these styles to a blank Word `file` and then open that `file` with `Python`-Docx. There should be one invitation per page in the resulting Word document, so call add_break() to add a page break after the last paragraph of each invitation. This way, you will need to open only one Word document to print all of the invitations at once.\n",
	"practice-projects_key8": " -->\nFigure 13-11. The Word document generated by your custom invite script\n",
	"practice-projects_key9": "You can download a sample guests.txt `file` from <span><a href=\" http://nostarch.com/automatestuff/.\"> http://nostarch.com/automatestuff/.</a></span>\n",
	"practice-projects_key10": "# Brute-Force PDF Password Breaker\n\n",
	"practice-projects_key11": "Say you have an encrypted PDF that you have forgotten the password to, but you remember it was a single English word. Trying to guess your forgotten password is quite a boring task. Instead you can write a program that will decrypt the PDF by trying every possible English word until it finds one that works. This is called a brute-force password attack. Download the text `file` dictionary.txt from <span><a href=\"http://nostarch.com/automatestuff/\">http://nostarch.com/automatestuff/</a></span>. This dictionary `file` contains over 44,000 English words with one word per line.\n",
	"practice-projects_key12": "Using the `file`-reading skills you learned in Chapter 8, create a list of word `strings` by reading this `file`. Then `loop` over each word in this list, passing it to the decrypt() method. If this method returns the `integer` 0, the password was wrong and your program should continue to the next password. If decrypt() returns 1, then your program should break out of the `loop` and print the hacked password. You should try both the uppercase and lower-case form of each word. (On my laptop, going through all 88,000 uppercase and lowercase words from the dictionary `file` takes a couple of minutes. This is why you shouldnâ€™t use a simple English word for your passwords.)\n"
}