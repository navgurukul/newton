{
	"creating-pdfs_key1": "Creating PDFs\n",
	"creating-pdfs_key2": "PyPDF2’s counterpart to Pdf`File`Reader objects is Pdf`File`Writer objects, which can create new PDF `files`. But PyPDF2 cannot write arbitrary text to a PDF like `Python` can do with plaintext `files`. Instead, PyPDF2’s PDF-writing capabilities are limited to copying pages from other PDFs, rotating pages, overlaying pages, and encrypting `files`.\n",
	"creating-pdfs_key3": "PyPDF2 doesn’t allow you to directly edit a PDF. Instead, you have to create a new PDF and then copy content over from an existing document. The examples in this section will follow this general approach:\n",
	"creating-pdfs_key4": "Open one or more existing PDFs (the source PDFs) into Pdf`File`Reader objects.\n",
	"creating-pdfs_key5": "Create a new Pdf`File`Writer object.\n",
	"creating-pdfs_key6": "Copy pages from the Pdf`File`Reader objects into the Pdf`File`Writer object.\n",
	"creating-pdfs_key7": "Finally, use the Pdf`File`Writer object to write the `output` PDF.\n",
	"creating-pdfs_key8": "Creating a Pdf`File`Writer object creates only a value that represents a PDF document in `Python`. It doesn’t create the actual PDF `file`. For that, you must call the Pdf`File`Writer’s write() method.\n",
	"creating-pdfs_key9": "The write() method takes a regular `File` object that has been opened in write-binary mode. You can get such a `File` object by calling `Python`’s open() function with two arguments: the `string` of what you want the PDF’s `file`name to be and 'wb' to indicate the `file` should be opened in write-binary mode.\n",
	"creating-pdfs_key10": "If this sounds a little confusing, don’t worry—you’ll see how this works in the following `code` examples.\n",
	"creating-pdfs_key11": "Copying Pages\n",
	"creating-pdfs_key12": "You can use PyPDF2 to copy pages from one PDF document to another. This allows you to combine multiple PDF `files`, cut unwanted pages, or reorder pages.\n",
	"creating-pdfs_key13": "Download meetingminutes.pdf and meetingminutes2.pdf from <span><a href=\"http://nostarch.com/automatestuff/\">http://nostarch.com/automatestuff/</a></span> and place the PDFs in the current working directory. Enter the following into the interactive `shell`:\n",
	"creating-pdfs_key14": "Open both PDF `files` in read binary mode and store the two resulting `File` objects in pdf1`File` and pdf2`File`. Call PyPDF2.Pdf`File`Reader() and pass it pdf1`File` to get a Pdf`File`Reader object for meetingminutes.pdf ❶. Call it again and pass it pdf2`File` to get a Pdf`File`Reader object for meetingminutes2.pdf ❷. Then create a new Pdf`File`Writer object, which represents a blank PDF document ❸.\n",
	"creating-pdfs_key15": "Next, copy all the pages from the two source PDFs and add them to the Pdf`File`Writer object. Get the Page object by calling getPage() on a Pdf`File`Reader object ❹. Then pass that Page object to your Pdf`File`Writer’s addPage() method ❺. These steps are done first for pdf1Reader and then again for pdf2Reader. When you’re done copying pages, write a new PDF called combinedminutes.pdf by passing a `File` object to the Pdf`File`Writer’s write() method ❻.\n",
	"creating-pdfs_key16": "Note\n",
	"creating-pdfs_key17": "PyPDF2 cannot insert pages in the middle of a Pdf`File`Writer object; the addPage() method will only add pages to the end.\n",
	"creating-pdfs_key18": "You have now created a new PDF `file` that combines the pages from meetingminutes.pdf and meetingminutes2.pdf into a single document. Remember that the `File` object passed to PyPDF2.Pdf`File`Reader() needs to be opened in read-binary mode by passing 'rb' as the second argument to open(). Likewise, the `File` object passed to PyPDF2.Pdf`File`Writer() needs to be opened in write-binary mode with 'wb'.\n",
	"creating-pdfs_key19": "Rotating Pages\n",
	"creating-pdfs_key20": "The pages of a PDF can also be rotated in 90-degree increments with the rotateClockwise() and rotateCounterClockwise() methods. Pass one of the `integers` 90, 180, or 270 to these methods. Enter the following into the interactive `shell`, with the meetingminutes.pdf `file` in the current working directory:\n",
	"creating-pdfs_key21": "Here we use getPage(0) to select the first page of the PDF ❶, and then we call rotateClockwise(90) on that page ❷. We write a new PDF with the rotated page and `save` it as rotatedPage.pdf ❸.\n",
	"creating-pdfs_key22": "The resulting PDF will have one page, rotated 90 degrees clockwise, as in Figure 13-2. The return values from rotateClockwise() and rotateCounterClockwise() contain a lot of information that you can ignore.\n",
	"creating-pdfs_key23": " -->\nFigure 13-2. The rotatedPage.pdf `file` with the page rotated 90 degrees clockwise\n"
}