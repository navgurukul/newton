{
	"project-sending-member-dues-reminder-emails_key1": "name: project-sending-member-dues-reminder-emails\n",
	"project-sending-member-dues-reminder-emails_key2": "# Project: Sending Member Dues Reminder Emails\n\n",
	"project-sending-member-dues-reminder-emails_key3": "Say you have been “volunteered” to track member dues for the Mandatory Volunteerism Club. This is a truly boring job, involving maintaining a spreadsheet of everyone who has paid each month and emailing reminders to those who haven’t. Instead of going through the spreadsheet yourself and copying and pasting the same email to everyone who is behind on dues, let’s—you guessed it—write a script that does this for you.\n",
	"project-sending-member-dues-reminder-emails_key4": "At a high level, here’s what your program will do:\n",
	"project-sending-member-dues-reminder-emails_key5": "Read data from an Excel spreadsheet.\n",
	"project-sending-member-dues-reminder-emails_key6": "Find all members who have not paid dues for the latest month.\n",
	"project-sending-member-dues-reminder-emails_key7": "Find their email addresses and send them personalized reminders.\n",
	"project-sending-member-dues-reminder-emails_key8": "This means your `code` will need to do the following:\n",
	"project-sending-member-dues-reminder-emails_key9": "Open and read the cells of an Excel document with the openpyxl module. (See Chapter 12 for working with Excel `files`.)\n",
	"project-sending-member-dues-reminder-emails_key10": "Create a dictionary of members who are behind on their dues.\n",
	"project-sending-member-dues-reminder-emails_key11": "Log in to an SMTP server by calling smtplib.SMTP(), ehlo(), starttls(), and login().\n",
	"project-sending-member-dues-reminder-emails_key12": "For all members behind on their dues, send a personalized reminder email by calling the sendmail() method.\n",
	"project-sending-member-dues-reminder-emails_key13": "Open a new `file` `editor` window and `save` it as sendDuesReminders.py.\n",
	"project-sending-member-dues-reminder-emails_key14": "Step 1: Open the Excel `File`\nLet’s say the Excel spreadsheet you use to track membership dues payments looks like Figure 16-2 and is in a `file` named duesRecords.xlsx. You can download this `file` from <span><a href=\"http://nostarch.com/automatestuff/\">http://nostarch.com/automatestuff/</a></span>.\n",
	"project-sending-member-dues-reminder-emails_key15": " -->\nFigure 16-2. The spreadsheet for tracking member dues payments\n",
	"project-sending-member-dues-reminder-emails_key16": "This spreadsheet has every member’s name and email address. Each month has a column tracking members’ payment statuses. The cell for each member is marked with the text paid once they have paid their dues.\n",
	"project-sending-member-dues-reminder-emails_key17": "The program will have to open duesRecords.xlsx and figure out the column for the latest month by calling the get_highest_column() method. (You can consult Chapter 12 for more information on accessing cells in Excel spreadsheet `files` with the openpyxl module.) Enter the following `code` into the `file` `editor` window:\n",
	"project-sending-member-dues-reminder-emails_key18": "   #! `python3`\n",
	"project-sending-member-dues-reminder-emails_key19": "   # sendDuesReminders.py - Sends emails based on payment status in spreadsheet.\n\n\n",
	"project-sending-member-dues-reminder-emails_key20": "   import openpyxl, smtplib, sys\n",
	"project-sending-member-dues-reminder-emails_key21": "   # Open the spreadsheet and get the latest dues status.\n\n",
	"project-sending-member-dues-reminder-emails_key22": "❶ wb = openpyxl.load_workbook('duesRecords.xlsx')\n❷ sheet = wb.get_sheet_by_name('Sheet1')\n",
	"project-sending-member-dues-reminder-emails_key23": "❸ lastCol = sheet.get_highest_column()\n❹ latestMonth = sheet.cell(row=1, column=lastCol).value\n",
	"project-sending-member-dues-reminder-emails_key24": "   # TODO: Check each member's payment status.\n\n\n",
	"project-sending-member-dues-reminder-emails_key25": "   # TODO: Log in to email account.\n\n\n",
	"project-sending-member-dues-reminder-emails_key26": "   # TODO: Send out reminder emails.\n\n",
	"project-sending-member-dues-reminder-emails_key27": "After importing the openpyxl, smtplib, and sys modules, we open our duesRecords.xlsx `file` and store the resulting Workbook object in wb ❶. Then we get Sheet 1 and store the resulting Worksheet object in sheet ❷. Now that we have a Worksheet object, we can access rows, columns, and cells. We store the highest column in lastCol ❸, and we then use row number 1 and lastCol to access the cell that should hold the most recent month. We get the value in this cell and store it in latestMonth ❹.\n",
	"project-sending-member-dues-reminder-emails_key28": "# Step 2: Find All Unpaid Members\n\n",
	"project-sending-member-dues-reminder-emails_key29": "Once you’ve determined the column number of the latest month (stored in lastCol), you can `loop` through all rows after the first row (which has the column headers) to see which members have the text paid in the cell for that month’s dues. If the member hasn’t paid, you can grab the member’s name and email address from columns 1 and 2, respectively. This information will go into the unpaidMembers dictionary, which will track all members who haven’t paid in the most recent month. Add the following `code` to sendDuesReminder.py.\n",
	"project-sending-member-dues-reminder-emails_key30": "   #! `python3`\n",
	"project-sending-member-dues-reminder-emails_key31": "   # sendDuesReminders.py - Sends emails based on payment status in spreadsheet.\n\n\n",
	"project-sending-member-dues-reminder-emails_key32": "   --snip--\n",
	"project-sending-member-dues-reminder-emails_key33": "This `code` sets up an empty dictionary unpaidMembers and then `loops` through all the rows after the first ❶. For each row, the value in the most recent column is stored in payment ❷. If payment is not equal to 'paid', then the value of the first column is stored in name ❸, the value of the second column is stored in email ❹, and name and email are added to unpaidMembers ❺.\n",
	"project-sending-member-dues-reminder-emails_key34": "# Step 3: Send Customized Email Reminders\n\n",
	"project-sending-member-dues-reminder-emails_key35": "Once you have a list of all unpaid members, it’s time to send them email reminders. Add the following `code` to your program, except with your real email address and provider information:\n",
	"project-sending-member-dues-reminder-emails_key36": "#! `python3`\n",
	"project-sending-member-dues-reminder-emails_key37": "# sendDuesReminders.py - Sends emails based on payment status in spreadsheet.\n\n\n",
	"project-sending-member-dues-reminder-emails_key38": "--snip--\n",
	"project-sending-member-dues-reminder-emails_key39": "Create an SMTP object by calling smtplib.SMTP() and passing it the domain name and port for your provider. Call ehlo() and starttls(), and then call login() and pass it your email address and sys.argv[1], which will store your password `string`. You’ll enter the password as a command line argument each time you run the program, to avoid saving your password in your source `code`.\n",
	"project-sending-member-dues-reminder-emails_key40": "Once your program has logged in to your email account, it should go through the unpaidMembers dictionary and send a personalized email to each member’s email address. Add the following to sendDuesReminders.py:\n",
	"project-sending-member-dues-reminder-emails_key41": "   #! `python3`\n",
	"project-sending-member-dues-reminder-emails_key42": "   # sendDuesReminders.py - Sends emails based on payment status in spreadsheet.\n\n\n",
	"project-sending-member-dues-reminder-emails_key43": "   --snip--\n",
	"project-sending-member-dues-reminder-emails_key44": "This `code` `loops` through the names and emails in unpaidMembers. For each member who hasn’t paid, we customize a message with the latest month and the member’s name, and store the message in body ❶. We print `output` saying that we’re sending an email to this member’s email address ❷. Then we call sendmail(), passing it the from address and the customized message ❸. We store the return value in sendmailStatus.\n",
	"project-sending-member-dues-reminder-emails_key45": "Remember that the sendmail() method will return a nonempty dictionary value if the SMTP server reported an `error` sending that particular email. The last part of the for `loop` at ❹ checks if the returned dictionary is nonempty, and if it is, prints the recipient’s email address and the returned dictionary.\n",
	"project-sending-member-dues-reminder-emails_key46": "After the program is done sending all the emails, the quit() method is called to disconnect from the SMTP server.\n",
	"project-sending-member-dues-reminder-emails_key47": "When you run the program, the `output` will look something like this:\n",
	"project-sending-member-dues-reminder-emails_key48": "Sending email to <span><a href=\"alice@example.com\">alice@example.com...</a></span>\nSending email to <span><a href=\"bob@example.com\">bob@example.com...</a></span>\nSending email to <span><a href=\" eve@example.com\"> eve@example.com...</a></span>\nThe recipients will receive an email that looks like Figure 16-3.\n",
	"project-sending-member-dues-reminder-emails_key49": " -->\nFigure 16-3. An automatically sent email from sendDuesReminders.py\n"
}