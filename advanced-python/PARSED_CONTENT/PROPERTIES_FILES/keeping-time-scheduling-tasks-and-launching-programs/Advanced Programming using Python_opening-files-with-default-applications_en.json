{
	"opening-files-with-default-applications_key1": "name: opening-files-with-default-applications\n",
	"opening-files-with-default-applications_key2": "# Opening `Files` with Default `Applications`\n\n",
	"opening-files-with-default-applications_key3": "Double-clicking a .txt `file` on your computer will automatically launch the `application` associated with the .txt `file` extension. Your computer will have several of these `file` extension associations set up already. `Python` can also open `files` this way with Popen().\n",
	"opening-files-with-default-applications_key4": "Each operating system has a program that performs the equivalent of double-clicking a document `file` to open it. On Windows, this is the start program. On OS X, this is the open program. On Ubuntu Linux, this is the see program. Enter the following into the interactive `shell`, passing 'start', 'open', or 'see' to Popen() depending on your system:\n",
	"opening-files-with-default-applications_key5": "12\n",
	"opening-files-with-default-applications_key6": "Here we write Hello world! to a new hello.txt `file`. Then we call Popen(), passing it a list containing the program name (in this example, 'start' for Windows) and the `file`name. We also pass the `shell`=`True` `key`word argument, which is needed only on Windows. The operating system knows all of the `file` associations and can figure out that it should launch, say, Notepad.exe to handle the hello.txt `file`.\n",
	"opening-files-with-default-applications_key7": "On OS X, the open program is used for opening both document `files` and programs. Enter the following into the interactive `shell` if you have a Mac:\n",
	"opening-files-with-default-applications_key8": "The Calculator app should open.\n",
	"opening-files-with-default-applications_key9": "# The UNIX Philosophy\n\n\n",
	"opening-files-with-default-applications_key10": "Programs well designed to be launched by other programs become more powerful than their `code` alone. The Unix philosophy is a set of software design principles es`tab`lished by the programmers of the Unix operating system (on which the modern Linux and OS X are built). It says that it’s better to write small, limited-purpose programs that can interoperate, rather than large, feature-rich `applications`. The smaller programs are easier to understand, and by being interoperable, they can be the building blocks of much more powerful `applications`.\n",
	"opening-files-with-default-applications_key11": "Smartphone apps follow this approach as well. If your restaurant app needs to display directions to a café, the developers didn’t reinvent the wheel by writing their own map `code`. The restaurant app simply launches a map app while passing it the café’s address, just as your `Python` `code` would call a function and pass it arguments.\n",
	"opening-files-with-default-applications_key12": "The `Python` programs you’ve been writing in this book mostly fit the Unix philosophy, especially in one important way: They use command line arguments rather than `input`() function calls. If all the information your program needs can be supplied up front, it is preferable to have this information passed as command line arguments rather than waiting for the user to type it in. This way, the command line arguments can be entered by a human user or supplied by another program. This interoperable approach will make your programs reusable as part of another program.\n",
	"opening-files-with-default-applications_key13": "The sole exception is that you don’t want passwords passed as command line arguments, since the command line may record them as part of its command history feature. Instead, your program should call the `input`() function when it needs you to enter a password.\n",
	"opening-files-with-default-applications_key14": "You can read more about Unix philosophy at <span><a href=\" https://en.wikipedia.org/wiki/Unix_philosophy/.\"> https://en.wikipedia.org/wiki/Unix_philosophy/.</a></span>\n"
}