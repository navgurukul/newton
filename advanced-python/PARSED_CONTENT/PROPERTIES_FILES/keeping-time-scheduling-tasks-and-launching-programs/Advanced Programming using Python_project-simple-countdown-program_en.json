{
	"project-simple-countdown-program_key1": "Project: Simple Countdown Program\n",
	"project-simple-countdown-program_key2": "Just like it’s hard to find a simple stopwatch `application`, it can be hard to find a simple countdown `application`. Let’s write a countdown program that plays an alarm at the end of the countdown.\n",
	"project-simple-countdown-program_key3": "At a high level, here’s what your program will do:\n",
	"project-simple-countdown-program_key4": "Count down from 60.\n",
	"project-simple-countdown-program_key5": "Play a sound `file` (alarm.wav) when the countdown reaches zero.\n",
	"project-simple-countdown-program_key6": "This means your `code` will need to do the following:\n",
	"project-simple-countdown-program_key7": "Pause for one second in between displaying each number in the countdown by calling time.sleep().\n",
	"project-simple-countdown-program_key8": "Call subprocess.Popen() to open the sound `file` with the default `application`.\n",
	"project-simple-countdown-program_key9": "Open a new `file` `editor` window and `save` it as countdown.py.\n",
	"project-simple-countdown-program_key10": "Step 1: Count Down\n",
	"project-simple-countdown-program_key11": "This program will require the time module for the time.sleep() function and the subprocess module for the subprocess.Popen() function. Enter the following `code` and `save` the `file` as countdown.py:\n",
	"project-simple-countdown-program_key12": "   #! `python3`\n",
	"project-simple-countdown-program_key13": "countdown.py - A simple countdown script.\n",
	"project-simple-countdown-program_key14": "TODO: At the end of the countdown, play a sound `file`.\n",
	"project-simple-countdown-program_key15": "After importing time and subprocess, make a `variable` called timeLeft to hold the number of seconds left in the countdown ❶. It can start at 60—or you can change the value here to whatever you need or even have it get set from a command line argument.\n",
	"project-simple-countdown-program_key16": "In a while `loop`, you display the remaining count ❷, pause for one second ❸, and then decrement the timeLeft `variable` ❹ before the `loop` starts over again. The `loop` will keep `loop`ing as long as timeLeft is greater than 0. After that, the countdown will be over.\n",
	"project-simple-countdown-program_key17": "Step 2: Play the Sound `File`\n",
	"project-simple-countdown-program_key18": "While there are third-party modules to play sound `files` of various formats, the quick and easy way is to just launch whatever `application` the user already uses to play sound `files`. The operating system will figure out from the .wav `file` extension which `application` it should launch to play the `file`. This .wav `file` could easily be some other sound `file` format, such as .mp3 or .ogg.\n",
	"project-simple-countdown-program_key19": "You can use any sound `file` that is on your computer to play at the end of the countdown, or you can download alarm.wav from <span><a href=\"http://nostarch.com/automatestuff/.\">http://nostarch.com/automatestuff/.</a></span>\n",
	"project-simple-countdown-program_key20": "Add the following to your `code`:\n",
	"project-simple-countdown-program_key21": "!`python3`\n",
	"project-simple-countdown-program_key22": "countdown.py - A simple countdown script.\n",
	"project-simple-countdown-program_key23": "import time, subprocess\n",
	"project-simple-countdown-program_key24": "--snip--\n",
	"project-simple-countdown-program_key25": "After the while `loop` finishes, alarm.wav (or the sound `file` you choose) will play to notify the user that the countdown is over. On Windows, be sure to include 'start' in the list you pass to Popen() and pass the `key`word argument `shell`=`True`. On OS X, pass 'open' instead of 'start' and remove `shell`=`True`.\n",
	"project-simple-countdown-program_key26": "Instead of playing a sound `file`, you could `save` a text `file` somewhere with a message like Break time is over! and use Popen() to open it at the end of the countdown. This will effectively create a pop-up window with a message. Or you could use the webbrowser.open() function to open a specific website at the end of the countdown. Unlike some free countdown `application` you’d find online, your own countdown program’s alarm can be anything you want!\n",
	"project-simple-countdown-program_key27": "Ideas for Similar Programs\n",
	"project-simple-countdown-program_key28": "A countdown is a simple delay before continuing the program’s execution. This can also be used for other `applications` and features, such as the following:\n",
	"project-simple-countdown-program_key29": "Use time.sleep() to give the user a chance to press CTRL-C to cancel an action, such as deleting `files`. Your program can print a “Press CTRL-C to cancel” message and then handle any `Key`boardInterrupt exceptions with try and except `statements`.\n",
	"project-simple-countdown-program_key30": "For a long-term countdown, you can use timedelta objects to measure the number of days, hours, minutes, and seconds until some point (a birthday? an anniversary?) in the future.\n",
	"project-simple-countdown-program_key31": "Summary\n",
	"project-simple-countdown-program_key32": "The Unix epoch (January 1, 1970, at midnight, UTC) is a standard reference time for many programming languages, including `Python`. While the time.time() function module returns an epoch timestamp (that is, a `float` value of the number of seconds since the Unix epoch), the datetime module is better for performing date arithmetic and formatting or parsing `strings` with date information.\n",
	"project-simple-countdown-program_key33": "The time.sleep() function will block (that is, not return) for a certain number of seconds. It can be used to add pauses to your program. But if you want to schedule your programs to start at a certain time, the instructions at <span><a href=\"http://nostarch.com/automatestuff/\">http://nostarch.com/automatestuff/</a></span> can tell you how to use the scheduler already provided by your operating system.\n",
	"project-simple-countdown-program_key34": "The threading module is used to create multiple threads, which is useful when you need to download multiple `files` or do other tasks simultaneously. But make sure the thread reads and writes only local `variables`, or you might run into concurrency issues.\n",
	"project-simple-countdown-program_key35": "Finally, your `Python` programs can launch other `applications` with the subprocess.Popen() function. Command line arguments can be passed to the Popen() call to open specific documents with the `application`. Alternatively, you can use the start, open, or see program with Popen() to use your computer’s `file` associations to automatically figure out which `application` to use to open a document. By using the other `applications` on your computer, your `Python` programs can leverage their capabilities for your automation needs.\n"
}