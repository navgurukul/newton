{
	"project-generating-random-quiz-files_key1": "name: project-generating-random-quiz-files\n",
	"project-generating-random-quiz-files_key2": "# Project: Generating Random Quiz `Files`\n\n",
	"project-generating-random-quiz-files_key3": "Say you’re a geography teacher with 35 students in your class and you want to give a pop quiz on US state capitals. Alas, your class has a few bad eggs in it, and you can’t trust the students not to cheat. You’d like to randomize the order of questions so that each quiz is unique, making it impossible for anyone to crib answers from anyone else. Of course, doing this by hand would be a lengthy and boring affair. Fortunately, you know some `Python`.\n",
	"project-generating-random-quiz-files_key4": "Here is what the program does:\n",
	"project-generating-random-quiz-files_key5": "Creates 35 different quizzes.\n",
	"project-generating-random-quiz-files_key6": "Creates 50 multiple-choice questions for each quiz, in random order.\n",
	"project-generating-random-quiz-files_key7": "Provides the correct answer and three random wrong answers for each question, in random order.\n",
	"project-generating-random-quiz-files_key8": "Writes the quizzes to 35 text `files`.\n",
	"project-generating-random-quiz-files_key9": "Writes the answer `keys` to 35 text `files`.\n",
	"project-generating-random-quiz-files_key10": "This means the `code` will need to do the following:\n",
	"project-generating-random-quiz-files_key11": "Store the states and their capitals in a dictionary.\n",
	"project-generating-random-quiz-files_key12": "Call open(), write(), and close() for the quiz and answer `key` text `files`.\n",
	"project-generating-random-quiz-files_key13": "Use random.shuffle() to randomize the order of the questions and multiple-choice options.\n",
	"project-generating-random-quiz-files_key14": "# Step 1: Store the Quiz Data in a Dictionary\n\n",
	"project-generating-random-quiz-files_key15": "The first step is to create a skeleton script and fill it with your quiz data. Create a `file` named randomQuizGenerator.py, and make it look like the following:\n",
	"project-generating-random-quiz-files_key16": "   #! `python3`\n",
	"project-generating-random-quiz-files_key17": "   # randomQuizGenerator.py - Creates quizzes with questions and answers in\n\n",
	"project-generating-random-quiz-files_key18": "   # random order, along with the answer `key`.\n\n",
	"project-generating-random-quiz-files_key19": "Since this program will be randomly ordering the questions and answers, you’ll need to import the random module ❶ to make use of its functions. The capitals `variable` ❷ contains a dictionary with US states as `keys` and their capitals as values. And since you want to create 35 quizzes, the `code` that actually generates the quiz and answer `key` `files` (marked with TODO comments for now) will go inside a for `loop` that `loops` 35 times ❸. (This number can be changed to generate any number of quiz `files`.)\n",
	"project-generating-random-quiz-files_key20": "# Step 2: Create the Quiz `File` and Shuffle the Question Order\n\n",
	"project-generating-random-quiz-files_key21": "Now it’s time to start filling in those TODOs.\n",
	"project-generating-random-quiz-files_key22": "The `code` in the `loop` will be repeated 35 times—once for each quiz—so you have to worry about only one quiz at a time within the `loop`. First you’ll create the actual quiz `file`. It needs to have a unique `file`name and should also have some kind of standard header in it, with places for the student to fill in a name, date, and class period. Then you’ll need to get a list of states in randomized order, which can be used later to create the questions and answers for the quiz.\n",
	"project-generating-random-quiz-files_key23": "Add the following lines of `code` to randomQuizGenerator.py:\n",
	"project-generating-random-quiz-files_key24": "   #! `python3`\n",
	"project-generating-random-quiz-files_key25": "   # randomQuizGenerator.py - Creates quizzes with questions and answers in\n\n",
	"project-generating-random-quiz-files_key26": "   # random order, along with the answer `key`.\n\n",
	"project-generating-random-quiz-files_key27": "The `file`names for the quizzes will be capitalsquiz<N>.txt, where <N> is a unique number for the quiz that comes from quizNum, the for `loop`’s counter. The answer `key` for capitalsquiz<N>.txt will be stored in a text `file` named capitalsquiz_answers<N>.txt. Each time through the `loop`, the %s placeholder in 'capitalsquiz%s.txt' and 'capitalsquiz_answers%s.txt' will be replaced by (quizNum + 1), so the first quiz and answer `key` created will be capitalsquiz1.txt and capitalsquiz_answers1.txt. These `files` will be created with calls to the open() function at ❶ and ❷, with 'w' as the second argument to open them in write mode.\n",
	"project-generating-random-quiz-files_key28": "The write() `statements` at ❸ create a quiz header for the student to fill out. Finally, a randomized list of US states is created with the help of the random.shuffle() function ❹, which randomly reorders the values in any list that is passed to it.\n",
	"project-generating-random-quiz-files_key29": "# Step 3: Create the Answer Options\n\n",
	"project-generating-random-quiz-files_key30": "Now you need to generate the answer options for each question, which will be multiple choice from A to D. You’ll need to create another for `loop`—this one to generate the content for each of the 50 questions on the quiz. Then there will be a third for `loop` nested inside to generate the multiple-choice options for each question. Make your `code` look like the following:\n",
	"project-generating-random-quiz-files_key31": "   #! `python3`\n",
	"project-generating-random-quiz-files_key32": "   # randomQuizGenerator.py - Creates quizzes with questions and answers in\n\n",
	"project-generating-random-quiz-files_key33": "   # random order, along with the answer `key`.\n\n\n",
	"project-generating-random-quiz-files_key34": "   --snip--\n",
	"project-generating-random-quiz-files_key35": "❶         correctAnswer = capitals[states[questionNum]]\n❷         wrongAnswers = list(capitals.values())\n❸         del wrongAnswers[wrongAnswers.index(correctAnswer)]\n❹         wrongAnswers = random.sample(wrongAnswers, 3)\n❺         answerOptions = wrongAnswers + [correctAnswer]\n❻         random.shuffle(answerOptions)\n",
	"project-generating-random-quiz-files_key36": "The correct answer is easy to get—it’s stored as a value in the capitals dictionary ❶. This `loop` will `loop` through the states in the shuffled states list, from states[0] to states[49], find each state in capitals, and store that state’s corresponding capital in correctAnswer.\n",
	"project-generating-random-quiz-files_key37": "The list of possible wrong answers is trickier. You can get it by duplicating all the values in the capitals dictionary ❷, deleting the correct answer ❸, and selecting three random values from this list ❹. The random.sample() function makes it easy to do this selection. Its first argument is the list you want to select from; the second argument is the number of values you want to select. The full list of answer options is the combination of these three wrong answers with the correct answers ❺. Finally, the answers need to be randomized ❻ so that the correct response isn’t always choice D.\n",
	"project-generating-random-quiz-files_key38": "Step 4: Write Content to the Quiz and Answer `Key` `Files`\nAll that is left is to write the question to the quiz `file` and the answer to the answer `key` `file`. Make your `code` look like the following:\n",
	"project-generating-random-quiz-files_key39": "   #! `python3`\n",
	"project-generating-random-quiz-files_key40": "   # randomQuizGenerator.py - Creates quizzes with questions and answers in\n\n",
	"project-generating-random-quiz-files_key41": "   # random order, along with the answer `key`.\n\n\n",
	"project-generating-random-quiz-files_key42": "   --snip--\n",
	"project-generating-random-quiz-files_key43": "A for `loop` that goes through `integers` 0 to 3 will write the answer options in the answerOptions list ❶. The expression 'ABCD'[i] at ❷ treats the `string` 'ABCD' as an array and will evaluate to 'A','B', 'C', and then 'D' on each respective iteration through the `loop`.\n",
	"project-generating-random-quiz-files_key44": "In the final line ❸, the expression answerOptions.index(correctAnswer) will find the `integer` index of the correct answer in the randomly ordered answer options, and 'ABCD'[answerOptions.index(correctAnswer)] will evaluate to the correct answer’s letter to be written to the answer `key` `file`.\n",
	"project-generating-random-quiz-files_key45": "After you run the program, this is how your capitalsquiz1.txt `file` will look, though of course your questions and answer options may be different from those shown here, depending on the outcome of your random.shuffle() calls:\n",
	"project-generating-random-quiz-files_key46": "Name:\n",
	"project-generating-random-quiz-files_key47": "Date:\n",
	"project-generating-random-quiz-files_key48": "Period:\n",
	"project-generating-random-quiz-files_key49": "What is the capital of West Virginia?\n A. Hartford\n B. Santa Fe\n C. Harrisburg\n D. Charleston\n\n",
	"project-generating-random-quiz-files_key50": "What is the capital of Colorado?\n A. Raleigh\n B. Harrisburg\n C. Denver\n D. Lincoln\n\n\n",
	"project-generating-random-quiz-files_key51": "--snip--\nThe corresponding capitalsquiz_answers1.txt text `file` will look like this:\n",
	"project-generating-random-quiz-files_key52": "D\n",
	"project-generating-random-quiz-files_key53": "C\n",
	"project-generating-random-quiz-files_key54": "A\n",
	"project-generating-random-quiz-files_key55": "C\n",
	"project-generating-random-quiz-files_key56": "--snip--\n"
}