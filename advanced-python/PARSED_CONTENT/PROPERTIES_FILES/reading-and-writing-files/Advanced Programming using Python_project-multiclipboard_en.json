{
	"project-multiclipboard_key1": "Project: Multiclipboard\n",
	"project-multiclipboard_key2": "Say you have the boring task of filling out many forms in a web page or software with several text fields. The clipboard `saves` you from typing the same text over and over again. But only one thing can be on the clipboard at a time. If you have several different pieces of text that you need to copy and paste, you have to keep highlighting and copying the same few things over and over again.\n",
	"project-multiclipboard_key3": "You can write a `Python` program to keep track of multiple pieces of text. This “multiclipboard” will be named mcb.pyw (since “mcb” is shorter to type than “multiclipboard”). The .pyw extension means that `Python` won’t show a `Terminal` window when it runs this program. (See Appendix B for more details.)\n",
	"project-multiclipboard_key4": "The program will `save` each piece of clipboard text under a `key`word. For example, when you run py mcb.pyw `save` spam, the current contents of the clipboard will be `save`d with the `key`word spam. This text can later be loaded to the clipboard again by running py mcb.pyw spam. And if the user forgets what `key`words they have, they can run py mcb.pyw list to copy a list of all `key`words to the clipboard.\n",
	"project-multiclipboard_key5": "Here’s what the program does:\n",
	"project-multiclipboard_key6": "The command line argument for the `key`word is checked.\n",
	"project-multiclipboard_key7": "If the argument is `save`, then the clipboard contents are `save`d to the `key`word.\n",
	"project-multiclipboard_key8": "If the argument is list, then all the `key`words are copied to the clipboard.\n",
	"project-multiclipboard_key9": "Otherwise, the text for the `key`word is copied to the clipboard.\n",
	"project-multiclipboard_key10": "This means the `code` will need to do the following:\n",
	"project-multiclipboard_key11": "Read the command line arguments from sys.argv.\n",
	"project-multiclipboard_key12": "Read and write to the clipboard.\n",
	"project-multiclipboard_key13": "`Save` and load to a shelf `file`.\n",
	"project-multiclipboard_key14": "If you use Windows, you can easily run this script from the Run... window by creating a batch `file` named mcb.bat with the following content:\n",
	"project-multiclipboard_key15": "@pyw.exe C:\\`Python3`4\\mcb.pyw %*\n",
	"project-multiclipboard_key16": "Step 1: Comments and Shelf Setup\n",
	"project-multiclipboard_key17": "Let’s start by making a skeleton script with some comments and basic setup. Make your `code` look like the following:\n",
	"project-multiclipboard_key18": "   #! `python3`\n",
	"project-multiclipboard_key19": "mcb.pyw - `Saves` and loads pieces of text to the clipboard.\n",
	"project-multiclipboard_key20": "❶ # Usage: py.exe mcb.pyw `save` <`key`word> - `Saves` clipboard to `key`word.\n",
	"project-multiclipboard_key21": "py.exe mcb.pyw <`key`word> - Loads `key`word to clipboard.\n",
	"project-multiclipboard_key22": "py.exe mcb.pyw list - Loads all `key`words to clipboard.\n",
	"project-multiclipboard_key23": "❷ import shelve, pyperclip, sys\n",
	"project-multiclipboard_key24": "❸ mcbShelf = shelve.open('mcb')\n",
	"project-multiclipboard_key25": "TODO: `Save` clipboard content.\n",
	"project-multiclipboard_key26": "TODO: List `key`words and load content.\n",
	"project-multiclipboard_key27": "It’s common practice to put general usage information in comments at the top of the `file` ❶. If you ever forget how to run your script, you can always look at these comments for a reminder. Then you import your modules ❷. Copying and pasting will require the pyperclip module, and reading the command line arguments will require the sys module. The shelve module will also come in handy: Whenever the user wants to `save` a new piece of clipboard text, you’ll `save` it to a shelf `file`. Then, when the user wants to paste the text back to their clipboard, you’ll open the shelf `file` and load it back into your program. The shelf `file` will be named with the prefix mcb ❸.\n",
	"project-multiclipboard_key28": "Step 2: `Save` Clipboard Content with a `Key`word\n",
	"project-multiclipboard_key29": "The program does different things depending on whether the user wants to `save` text to a `key`word, load text into the clipboard, or list all the existing `key`words. Let’s deal with that first case. Make your `code` look like the following:\n",
	"project-multiclipboard_key30": "   #! `python3`\n",
	"project-multiclipboard_key31": "mcb.pyw - `Saves` and loads pieces of text to the clipboard.\n",
	"project-multiclipboard_key32": "   --snip--\n",
	"project-multiclipboard_key33": "❸    # TODO: List `key`words and load content.\n",
	"project-multiclipboard_key34": "   mcbShelf.close()\nIf the first command line argument (which will always be at index 1 of the sys.argv list) is '`save`' ❶, the second command line argument is the `key`word for the current content of the clipboard. The `key`word will be used as the `key` for mcbShelf, and the value will be the text currently on the clipboard ❷.\n",
	"project-multiclipboard_key35": "If there is only one command line argument, you will assume it is either 'list' or a `key`word to load content onto the clipboard. You will implement that `code` later. For now, just put a TODO comment there ❸.\n",
	"project-multiclipboard_key36": "Step 3: List `Key`words and Load a `Key`word’s Content\n",
	"project-multiclipboard_key37": "Finally, let’s implement the two remaining cases: The user wants to load clipboard text in from a `key`word, or they want a list of all available `key`words. Make your `code` look like the following:\n",
	"project-multiclipboard_key38": "   #! `python3`\n",
	"project-multiclipboard_key39": "mcb.pyw - `Saves` and loads pieces of text to the clipboard.\n",
	"project-multiclipboard_key40": "   --snip--\n",
	"project-multiclipboard_key41": "`Save` clipboard content.\n",
	"project-multiclipboard_key42": "   if len(sys.argv) == 3 and sys.argv[1].lower() == '`save`':\n           mcbShelf[sys.argv[2]] = pyperclip.paste()\n   elif len(sys.argv) == 2:\n",
	"project-multiclipboard_key43": "   mcbShelf.close()\nIf there is only one command line argument, first let’s check whether it’s 'list' ❶. If so, a `string` representation of the list of shelf `keys` will be copied to the clipboard ❷. The user can paste this list into an open text `editor` to read it.\n",
	"project-multiclipboard_key44": "Otherwise, you can assume the command line argument is a `key`word. If this `key`word exists in the mcbShelf shelf as a `key`, you can load the value onto the clipboard ❸.\n",
	"project-multiclipboard_key45": "And that’s it! Launching this program has different steps depending on what operating system your computer uses. See Appendix B for details for your operating system.\n",
	"project-multiclipboard_key46": "Recall the password locker program you created in Chapter 6 that stored the passwords in a dictionary. Updating the passwords required changing the source `code` of the program. This isn’t ideal because average users don’t feel comfor`tab`le changing source `code` to update their software. Also, every time you modify the source `code` to a program, you run the risk of accidentally introducing new bugs. By storing the data for a program in a different place than the `code`, you can make your programs easier for others to use and more resistant to bugs.\n",
	"project-multiclipboard_key47": "Summary\n",
	"project-multiclipboard_key48": "`Files` are organized into folders (also called directories), and a path describes the location of a `file`. Every program running on your computer has a current working directory, which allows you to specify `file` paths relative to the current location instead of always typing the full (or absolute) path. The os.path module has many functions for manipulating `file` paths.\n",
	"project-multiclipboard_key49": "Your programs can also directly interact with the contents of text `files`. The open() function can open these `files` to read in their contents as one large `string` (with the read() method) or as a list of `strings` (with the readlines() method). The open() function can open `files` in write or append mode to create new text `files` or add to existing text `files`, respectively.\n",
	"project-multiclipboard_key50": "In previous chapters, you used the clipboard as a way of getting large amounts of text into a program, rather than typing it all in. Now you can have your programs read `files` directly from the hard drive, which is a big improvement, since `files` are much less volatile than the clipboard.\n",
	"project-multiclipboard_key51": "In the next chapter, you will learn how to handle the `files` themselves, by copying them, deleting them, renaming them, moving them, and more.\n"
}