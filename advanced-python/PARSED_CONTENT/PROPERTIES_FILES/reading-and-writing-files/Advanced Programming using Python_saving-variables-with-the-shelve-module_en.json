{
	"saving-variables-with-the-shelve-module_key1": "Saving `Variables` with the shelve Module\n",
	"saving-variables-with-the-shelve-module_key2": "You can `save` `variables` in your `Python` programs to binary shelf `files` using the shelve module. This way, your program can restore data to `variables` from the hard drive. The shelve module will let you add `Save` and Open features to your program. For example, if you ran a program and entered some configuration settings, you could `save` those settings to a shelf `file` and then have the program load them the next time it is run.\n",
	"saving-variables-with-the-shelve-module_key3": "Enter the following into the interactive `shell`:\n",
	"saving-variables-with-the-shelve-module_key4": "To read and write data using the shelve module, you first import shelve. Call shelve.open() and pass it a `file`name, and then store the returned shelf value in a `variable`. You can make changes to the shelf value as if it were a dictionary. When you’re done, call close() on the shelf value. Here, our shelf value is stored in shelf`File`. We create a list cats and write shelf`File`['cats'] = cats to store the list in shelf`File` as a value associated with the `key` 'cats' (like in a dictionary). Then we call close() on shelf`File`.\n",
	"saving-variables-with-the-shelve-module_key5": "After running the previous `code` on Windows, you will see three new `files` in the current working directory: mydata.bak, mydata.dat, and mydata.dir. On OS X, only a single mydata.db `file` will be created.\n",
	"saving-variables-with-the-shelve-module_key6": "These binary `files` contain the data you stored in your shelf. The format of these binary `files` is not important; you only need to know what the shelve module does, not how it does it. The module frees you from worrying about how to store your program’s data to a `file`.\n",
	"saving-variables-with-the-shelve-module_key7": "Your programs can use the shelve module to later reopen and retrieve the data from these shelf `files`. Shelf values don’t have to be opened in read or write mode—they can do both once opened. Enter the following into the interactive `shell`:\n",
	"saving-variables-with-the-shelve-module_key8": "Here, we open the shelf `files` to check that our data was stored correctly. Entering shelf`File`['cats'] returns the same list that we stored earlier, so we know that the list is correctly stored, and we call close().\n",
	"saving-variables-with-the-shelve-module_key9": "Just like dictionaries, shelf values have `keys`() and values() methods that will return list-like values of the `keys` and values in the shelf. Since these methods return list-like values instead of `true` lists, you should pass them to the list() function to get them in list form. Enter the following into the interactive `shell`:\n",
	"saving-variables-with-the-shelve-module_key10": "Plaintext is useful for creating `files` that you’ll read in a text `editor` such as Notepad or TextEdit, but if you want to `save` data from your `Python` programs, use the shelve module.\n",
	"saving-variables-with-the-shelve-module_key11": "Saving `Variables` with the pprint.pformat() Function\n",
	"saving-variables-with-the-shelve-module_key12": "Recall from Pretty Printing that the pprint.pprint() function will “pretty print” the contents of a list or dictionary to the screen, while the pprint.pformat() function will return this same text as a `string` instead of printing it. Not only is this `string` formatted to be easy to read, but it is also syntactically correct `Python` `code`. Say you have a dictionary stored in a `variable` and you want to `save` this `variable` and its contents for future use. Using pprint.pformat() will give you a `string` that you can write to .py `file`. This `file` will be your very own module that you can import whenever you want to use the `variable` stored in it.\n",
	"saving-variables-with-the-shelve-module_key13": "For example, enter the following into the interactive `shell`:\n",
	"saving-variables-with-the-shelve-module_key14": "Here, we import pprint to let us use pprint.pformat(). We have a list of dictionaries, stored in a `variable` cats. To keep the list in cats available even after we close the `shell`, we use pprint.pformat() to return it as a `string`. Once we have the data in cats as a `string`, it’s easy to write the `string` to a `file`, which we’ll call myCats.py.\n",
	"saving-variables-with-the-shelve-module_key15": "The modules that an import `statement` imports are themselves just `Python` scripts. When the `string` from pprint.pformat() is `save`d to a .py `file`, the `file` is a module that can be imported just like any other.\n",
	"saving-variables-with-the-shelve-module_key16": "And since `Python` scripts are themselves just text `files` with the .py `file` extension, your `Python` programs can even generate other `Python` programs. You can then import these `files` into scripts.\n",
	"saving-variables-with-the-shelve-module_key17": "The benefit of creating a .py `file` (as opposed to saving `variables` with the shelve module) is that because it is a text `file`, the contents of the `file` can be read and modified by anyone with a simple text `editor`. For most `applications`, however, saving data using the shelve module is the preferred way to `save` `variables` to a `file`. Only basic data types such as `integers`, `floats`, `strings`, lists, and dictionaries can be written to a `file` as simple text. `File` objects, for example, cannot be en`code`d as text.\n"
}