{
	"the-file-reading-process_key1": "The `File` Reading/Writing Process\n",
	"the-file-reading-process_key2": "Once you are comfor`tab`le working with folders and relative paths, you’ll be able to specify the location of `files` to read and write. The functions covered in the next few sections will apply to plaintext `files`. Plaintext `files` contain only basic text characters and do not include font, size, or color information. Text `files` with the .txt extension or `Python` script `files` with the .py extension are examples of plaintext `files`. These can be opened with Windows’s Notepad or OS X’s TextEdit `application`. Your programs can easily read the contents of plaintext `files` and treat them as an ordinary `string` value.\n",
	"the-file-reading-process_key3": "Binary `files` are all other `file` types, such as word processing documents, PDFs, images, spreadsheets, and execu`tab`le programs. If you open a binary `file` in Notepad or TextEdit, it will look like scrambled nonsense, like in Figure 8-5.\n",
	"the-file-reading-process_key4": " The Windows calc.exe program opened in Notepad\nFigure 8-5. The Windows calc.exe program opened in Notepad\n",
	"the-file-reading-process_key5": "Since every different type of binary `file` must be handled in its own way, this book will not go into reading and writing raw binary `files` directly. Fortunately, many modules make working with binary `files` easier—you will explore one of them, the shelve module, later in this chapter.\n",
	"the-file-reading-process_key6": "There are three steps to reading or writing `files` in `Python`.\n",
	"the-file-reading-process_key7": "Call the open() function to return a `File` object.\n",
	"the-file-reading-process_key8": "Call the read() or write() method on the `File` object.\n",
	"the-file-reading-process_key9": "Close the `file` by calling the close() method on the `File` object.\n",
	"the-file-reading-process_key10": "Opening `Files` with the open() Function\n",
	"the-file-reading-process_key11": "To open a `file` with the open() function, you pass it a `string` path indicating the `file` you want to open; it can be either an absolute or relative path. The open() function returns a `File` object.\n",
	"the-file-reading-process_key12": "Try it by creating a text `file` named hello.txt using Notepad or TextEdit. Type Hello world! as the content of this text `file` and `save` it in your user home folder. Then, if you’re using Windows, enter the following into the interactive `shell`:\n",
	"the-file-reading-process_key13": "If you’re using OS X, enter the following into the interactive `shell` instead:\n",
	"the-file-reading-process_key14": "Make sure to replace your_home_folder with your computer username. For example, my username is asweigart, so I’d enter 'C:\\\\Users\\\\asweigart\\\\ hello.txt' on Windows.\n",
	"the-file-reading-process_key15": "Both these commands will open the `file` in “reading plaintext” mode, or read mode for short. When a `file` is opened in read mode, `Python` lets you only read data from the `file`; you can’t write or modify it in any way. Read mode is the default mode for `files` you open in `Python`. But if you don’t want to rely on `Python`’s defaults, you can explicitly specify the mode by passing the `string` value 'r' as a second argument to open(). So open('/Users/asweigart/ hello.txt', 'r') and open('/Users/asweigart/hello.txt') do the same thing.\n",
	"the-file-reading-process_key16": "The call to open() returns a `File` object. A `File` object represents a `file` on your computer; it is simply another type of value in `Python`, much like the lists and dictionaries you’re already familiar with. In the previous example, you stored the `File` object in the `variable` hello`File`. Now, whenever you want to read from or write to the `file`, you can do so by calling methods on the `File` object in hello`File`.\n",
	"the-file-reading-process_key17": "Reading the Contents of `Files`\n",
	"the-file-reading-process_key18": "Now that you have a `File` object, you can start reading from it. If you want to read the entire contents of a `file` as a `string` value, use the `File` object’s read() method. Let’s continue with the hello.txt `File` object you stored in hello`File`. Enter the following into the interactive `shell`:\n",
	"the-file-reading-process_key19": "'Hello world!'\nIf you think of the contents of a `file` as a single large `string` value, the read() method returns the `string` that is stored in the `file`.\n",
	"the-file-reading-process_key20": "Alternatively, you can use the readlines() method to get a list of `string` values from the `file`, one `string` for each line of text. For example, create a `file` named sonnet29.txt in the same directory as hello.txt and write the following text in it:\n",
	"the-file-reading-process_key21": "When, in disgrace with fortune and men's eyes,\nI all alone beweep my outcast state,\nAnd trouble deaf heaven with my bootless cries,\nAnd look upon myself and curse my fate,\nMake sure to separate the four lines with line breaks. Then enter the following into the interactive `shell`:\n",
	"the-file-reading-process_key22": "[When, in disgrace with fortune and men's eyes,\\n', ' I all alone beweep my\noutcast state,\\n', And trouble deaf heaven with my bootless cries,\\n', And\nlook upon myself and curse my fate,']\nNote that each of the `string` values ends with a newline character, \\n, except for the last line of the `file`. A list of `strings` is often easier to work with than a single large `string` value.\n"
}