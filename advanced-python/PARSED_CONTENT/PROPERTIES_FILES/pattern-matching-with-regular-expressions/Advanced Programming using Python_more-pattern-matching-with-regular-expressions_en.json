{
	"more-pattern-matching-with-regular-expressions_key1": "name: more-pattern-matching-with-regular-expressions\n",
	"more-pattern-matching-with-regular-expressions_key2": "# More Pattern Matching with Regular Expressions\n\n",
	"more-pattern-matching-with-regular-expressions_key3": "Now that you know the basic steps for creating and finding regular expression objects with `Python`, you’re ready to try some of their more powerful pattern-matching capabilities.\n",
	"more-pattern-matching-with-regular-expressions_key4": "# Grouping with Parentheses\n\n",
	"more-pattern-matching-with-regular-expressions_key5": "Say you want to separate the area `code` from the rest of the phone number. Adding parentheses will create groups in the regex: (\\d\\d\\d)-(\\d\\d\\d-\\d\\d\\d\\d). Then you can use the group() match object method to grab the matching text from just one group.\n",
	"more-pattern-matching-with-regular-expressions_key6": "The first set of parentheses in a regex `string` will be group 1. The second set will be group 2. By passing the `integer` 1 or 2 to the group() match object method, you can grab different parts of the matched text. Passing 0 or nothing to the group() method will return the entire matched text. Enter the following into the interactive `shell`:\n",
	"more-pattern-matching-with-regular-expressions_key7": "If you would like to retrieve all the groups at once, use the groups() method—note the plural form for the name.\n",
	"more-pattern-matching-with-regular-expressions_key8": "Since mo.groups() returns a tuple of multiple values, you can use the multiple-assignment trick to assign each value to a separate `variable`, as in the previous area`Code`, mainNumber = mo.groups() line.\n",
	"more-pattern-matching-with-regular-expressions_key9": "Parentheses have a special meaning in regular expressions, but what do you do if you need to match a parenthesis in your text? For instance, maybe the phone numbers you are trying to match have the area `code` set in parentheses. In this case, you need to escape the ( and ) characters with a backslash. Enter the following into the interactive `shell`:\n",
	"more-pattern-matching-with-regular-expressions_key10": "The \\( and \\) escape characters in the raw `string` passed to re.compile() will match actual parenthesis characters.\n",
	"more-pattern-matching-with-regular-expressions_key11": "# Matching Multiple Groups with the Pipe\n\n",
	"more-pattern-matching-with-regular-expressions_key12": "The | character is called a pipe. You can use it anywhere you want to match one of many expressions. For example, the regular expression r'Batman|Tina Fey' will match either 'Batman' or 'Tina Fey'.\n",
	"more-pattern-matching-with-regular-expressions_key13": "When both Batman and Tina Fey occur in the searched `string`, the first occurrence of matching text will be returned as the Match object. Enter the following into the interactive `shell`:\n",
	"more-pattern-matching-with-regular-expressions_key14": "# Note\n\n",
	"more-pattern-matching-with-regular-expressions_key15": "You can find all matching occurrences with the findall() method that’s discussed in The findall() Method.\n",
	"more-pattern-matching-with-regular-expressions_key16": "You can also use the pipe to match one of several patterns as part of your regex. For example, say you wanted to match any of the `strings` 'Batman', 'Batmobile', 'Batcopter', and 'Batbat'. Since all these `strings` start with Bat, it would be nice if you could specify that prefix only once. This can be done with parentheses. Enter the following into the interactive `shell`:\n",
	"more-pattern-matching-with-regular-expressions_key17": "The method call mo.group() returns the full matched text 'Batmobile', while mo.group(1) returns just the part of the matched text inside the first parentheses group, 'mobile'. By using the pipe character and grouping parentheses, you can specify several alternative patterns you would like your regex to match.\n",
	"more-pattern-matching-with-regular-expressions_key18": "If you need to match an actual pipe character, escape it with a backslash, like \\|.\n"
}