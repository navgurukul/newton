{
	"function_define_key1": "name: function_define\n",
	"function_define_key2": "# def `Statements` with Parameters\n\n",
	"function_define_key3": "When you call the print() or len() function, you pass in values, called arguments in this context, by typing them between the parentheses. You can also define your own functions that accept arguments. Type this example into the `file` `editor` and `save` it as helloFunc2.py:\n",
	"function_define_key4": "When you run this program, the `output` looks like this:\n",
	"function_define_key5": "Hello Alice\nHello Bob\nThe definition of the hello() function in this program has a parameter called name ❶. A parameter is a `variable` that an argument is stored in when a function is called. The first time the hello() function is called, it’s with the argument 'Alice' ❸. The program execution enters the function, and the `variable` name is automatically set to 'Alice', which is what gets printed by the print() `statement` ❷.\n",
	"function_define_key6": "One special thing to note about parameters is that the value stored in a parameter is forgotten when the function returns. For example, if you added print(name) after hello('Bob') in the previous program, the program would give you a Name`Error` because there is no `variable` named name. This `variable` was destroyed after the function call hello('Bob') had returned, so print(name) would refer to a name `variable` that does not exist.\n",
	"function_define_key7": "This is similar to how a program’s `variables` are forgotten when the program terminates. I’ll talk more about why that happens later in the chapter, when I discuss what a function’s local scope is.\n"
}