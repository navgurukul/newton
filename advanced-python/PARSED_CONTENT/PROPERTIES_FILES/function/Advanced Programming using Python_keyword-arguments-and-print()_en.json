{
	"keyword-arguments-and-print()_key1": "name: keyword-arguments-and-print()\n",
	"keyword-arguments-and-print()_key2": "# `Key`word Arguments and print()\n\n",
	"keyword-arguments-and-print()_key3": "Most arguments are identified by their position in the function call. For example, random.randint(1, 10) is different from random.randint(10, 1). The function call random.randint(1, 10) will return a random `integer` between 1 and 10, because the first argument is the low end of the range and the second argument is the high end (while random.randint(10, 1) causes an `error`).\n",
	"keyword-arguments-and-print()_key4": "However, `key`word arguments are identified by the `key`word put before them in the function call. `Key`word arguments are often used for optional parameters. For example, the print() function has the optional parameters end and sep to specify what should be printed at the end of its arguments and between its arguments (separating them), respectively.\n",
	"keyword-arguments-and-print()_key5": "If you ran the following program:\n",
	"keyword-arguments-and-print()_key6": "print('Hello')\nprint('World')\nthe `output` would look like this:\n",
	"keyword-arguments-and-print()_key7": "Hello\nWorld\nThe two `strings` appear on separate lines because the print() function automatically adds a newline character to the end of the `string` it is passed. However, you can set the end `key`word argument to change this to a different `string`. For example, if the program were this:\n",
	"keyword-arguments-and-print()_key8": "print('Hello', end='')\nprint('World')\nthe `output` would look like this:\n",
	"keyword-arguments-and-print()_key9": "HelloWorld\nThe `output` is printed on a single line because there is no longer a new-line printed after 'Hello'. Instead, the blank `string` is printed. This is useful if you need to disable the newline that gets added to the end of every print() function call.\n",
	"keyword-arguments-and-print()_key10": "Similarly, when you pass multiple `string` values to print(), the function will automatically separate them with a single space. Enter the following into the interactive `shell`:\n",
	"keyword-arguments-and-print()_key11": "cats dogs mice\nBut you could replace the default separating `string` by passing the sep `key`word argument. Enter the following into the interactive `shell`:\n",
	"keyword-arguments-and-print()_key12": "cats,dogs,mice\nYou can add `key`word arguments to the functions you write as well, but first youâ€™ll have to learn about the list and dictionary data types in the next two chapters. For now, just know that some functions have optional `key`word arguments that can be specified when the function is called.\n"
}