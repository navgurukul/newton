{
	"return-values-and-return-statements_key1": "name: return-values-and-return-statements\n",
	"return-values-and-return-statements_key2": "# Return Values and return `Statements`\n\n",
	"return-values-and-return-statements_key3": "When you call the len() function and pass it an argument such as 'Hello', the function call evaluates to the `integer` value 5, which is the length of the `string` you passed it. In general, the value that a function call evaluates to is called the return value of the function.\n",
	"return-values-and-return-statements_key4": "When creating a function using the def `statement`, you can specify what the return value should be with a return `statement`. A return `statement` consists of the following:\n",
	"return-values-and-return-statements_key5": "The return `key`word\n",
	"return-values-and-return-statements_key6": "The value or expression that the function should return\n",
	"return-values-and-return-statements_key7": "When an expression is used with a return `statement`, the return value is what this expression evaluates to. For example, the following program defines a function that returns a different `string` depending on what number it is passed as an argument. Type this `code` into the `file` `editor` and `save` it as magic8Ball.py:\n",
	"return-values-and-return-statements_key8": "❹ r = random.randint(1, 9)\n❺ fortune = getAnswer(r)\n❻ print(fortune)\nWhen this program starts, `Python` first imports the random module ❶. Then the getAnswer() function is defined ❷. Because the function is being defined (and not called), the execution skips over the `code` in it. Next, the random.randint() function is called with two arguments, 1 and 9 ❹. It evaluates to a random `integer` between 1 and 9 (including 1 and 9 themselves), and this value is stored in a `variable` named r.\n",
	"return-values-and-return-statements_key9": "The getAnswer() function is called with r as the argument ❺. The program execution moves to the top of the getAnswer() function ❸, and the value r is stored in a parameter named answerNumber. Then, depending on this value in answerNumber, the function returns one of many possible `string` values. The program execution returns to the line at the bottom of the program that originally called getAnswer() ❺. The returned `string` is assigned to a `variable` named fortune, which then gets passed to a print() call ❻ and is printed to the screen.\n",
	"return-values-and-return-statements_key10": "Note that since you can pass return values as an argument to another function call, you could shorten these three lines:\n",
	"return-values-and-return-statements_key11": "r = random.randint(1, 9)\nfortune = getAnswer(r)\nprint(fortune)\nto this single equivalent line:\n",
	"return-values-and-return-statements_key12": "print(getAnswer(random.randint(1, 9)))\nRemember, expressions are composed of values and `operators`. A function call can be used in an expression because it evaluates to its return value.\n",
	"return-values-and-return-statements_key13": "# The None Value\n\n",
	"return-values-and-return-statements_key14": "In `Python` there is a value called None, which represents the absence of a value. None is the only value of the NoneType data type. (Other programming languages might call this value null, nil, or undefined.) Just like the Boolean `True` and `False` values, None must be typed with a capital N.\n",
	"return-values-and-return-statements_key15": "This value-without-a-value can be helpful when you need to store something that won’t be confused for a real value in a `variable`. One place where None is used is as the return value of print(). The print() function displays text on the screen, but it doesn’t need to return anything in the same way len() or `input`() does. But since all function calls need to evaluate to a return value, print() returns None. To see this in action, enter the following into the interactive `shell`:\n",
	"return-values-and-return-statements_key16": "Hello!\n",
	"return-values-and-return-statements_key17": "`True`\nBehind the scenes, `Python` adds return None to the end of any function definition with no return `statement`. This is similar to how a while or for `loop` implicitly ends with a continue `statement`. Also, if you use a return `statement` without a value (that is, just the return `key`word by itself), then None is returned.\n"
}