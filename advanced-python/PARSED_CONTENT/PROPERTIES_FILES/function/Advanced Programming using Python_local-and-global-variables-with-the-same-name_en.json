{
	"local-and-global-variables-with-the-same-name_key1": "Local and Global `Variables` with the Same Name\n",
	"local-and-global-variables-with-the-same-name_key2": "To simplify your life, avoid using local `variables` that have the same name as a global `variable` or another local `variable`. But technically, it’s perfectly legal to do so in `Python`. To see what happens, type the following `code` into the `file` `editor` and `save` it as sameName.py:\n",
	"local-and-global-variables-with-the-same-name_key3": "When you run this program, it `outputs` the following:\n",
	"local-and-global-variables-with-the-same-name_key4": "bacon local\nspam local\nbacon local\nglobal\nThere are actually three different `variables` in this program, but confusingly they are all named eggs. The `variables` are as follows:\n",
	"local-and-global-variables-with-the-same-name_key5": "❶ A `variable` named eggs that exists in a local scope when spam() is called.\n",
	"local-and-global-variables-with-the-same-name_key6": "❷ A `variable` named eggs that exists in a local scope when bacon() is called.\n",
	"local-and-global-variables-with-the-same-name_key7": "❸ A `variable` named eggs that exists in the global scope.\n",
	"local-and-global-variables-with-the-same-name_key8": "Since these three separate `variables` all have the same name, it can be confusing to keep track of which one is being used at any given time. This is why you should avoid using the same `variable` name in different scopes.\n"
}