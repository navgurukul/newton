{
    "Function-parameters_key1": "पैरामीटर एक फ़ंक्शन में `variables` के रूप में काम करेंगे जो तर्कों को मानों के रूप में संग्रहीत करेगा।\n",
    "Function-parameters_key2": "पैरामीटर्स को कोष्ठक के सेट के अंदर फ़ंक्शन की पहली पंक्ति पर सेट किया जाता है, जैसे:\n",
    "Function-parameters_key3": "फ़ंक्शननाम (तर्क 1, तर्क 2, तर्क 3);\n",
    "Function-parameters_key4": "जब आपका `code` चल रहा हो, तब आप `input` मान स्वीकार करने के लिए अपने फ़ंक्शन को परिभाषित करते समय पैरामीटर निर्दिष्ट कर सकते हैं। पैरामीटर एक फ़ंक्शन के भीतर प्लेसहोल्डर `variables` की तरह काम करते हैं; फ़ंक्शन कॉलिंग के समय फ़ंक्शन को प्रदान किए गए मानों (जिसे तर्क के रूप में जाना जाता है) द्वारा रन टाइम पर प्रतिस्थापित किया जाता है। उपरोक्त उदाहरण में देखें, जब हम फ़ंक्शन को कॉल कर रहे हैं और पैरामीटर 1, पैरामीटर 2, पैरामीटर 3 जैसे पैरामीटर द्वारा एक्सेस कर रहे हैं तो हमें 3 तर्क दिए गए हैं।\n",
    "Function-parameters_key5": "**उदाहरण:**\n",
    "Function-parameters_key6": "आप जितने चाहें उतने पैरामीटर घोषित कर सकते हैं। हालाँकि, आपके द्वारा लिखे गए प्रत्येक पैरामीटर के लिए, जब इसे कॉल किया जाता है, तो संबंधित तर्क को फ़ंक्शन में पारित करने की आवश्यकता होती है, यदि पारित नहीं होता है तो इसका मान अपरिभाषित हो जाता है। आइए निम्नलिखित उदाहरण पर विचार करें:\n",
    "Function-parameters_key7": "**व्यायाम:**\n",
    "Function-parameters_key8": "एक फ़ंक्शन डिस्प्ले मल्टीप्ली () लिखें और 3 पैरामीटर पास करें और रनटाइम में num1, num2, num3 नामों के साथ तर्क लें और उन्हें गुणा करें और परिणाम वापस करें?\n\n\n",
    "Function-parameters_key9": "सबमिट करने के बाद प्रतिक्रिया\n",
    "Function-parameters_key10": "निम्नलिखित में से `output` क्या है `code`?\n\n\n",
    "Function-parameters_key11": "इस `code` में `error` क्या है?\n\n",
    "Function-parameters_key12": "सबमिट करने के बाद प्रतिक्रिया\nनहीं `error`। भले ही एक अतिरिक्त पैरामीटर (5) पारित किया गया हो, फ़ंक्शन getResult बस इसका उपयोग नहीं करता है।\n",
    "Function-parameters_key13": "एक प्रोग्राम लिखें जो दो पैरामीटर लेगा और उसका योग प्रिंट करेगा?\n\n\n",
    "Function-parameters_key14": "सबमिट करने के बाद प्रतिक्रिया\n",
    "Function-parameters_key15": "निम्नलिखित में से `output` क्या है `code`?\n\n",
    "Function-parameters_key16": "निम्नलिखित में `error` क्या है `code`?\n\n",
    "Function-parameters_key17": "फ़ंक्शन का नाम कॉलिंग नाम से मेल नहीं खाता है, इसलिए इसे संदर्भ `Error` दिया जाता है।\n"
}