{
    "Functions_key1": "आप शायद पहले से ही जानते हैं कि फ़ंक्शन क्या है। जेएस में एक फ़ंक्शन कैसा दिखता है।\n",
    "Functions_key2": "हम कार्यों को परिभाषित करते हैं ताकि हम उनका बार-बार उपयोग कर सकें। उदाहरण के लिए, ऊपर दिए गए फ़ंक्शन में, हम एक बार ड्रॉसर्कल फ़ंक्शन को परिभाषित करते हैं, और फिर हर बार जब हमें एक सर्कल बनाने की आवश्यकता होती है, तो हम उस फ़ंक्शन को कॉल करते हैं।\n",
    "Functions_key3": "किसी फ़ंक्शन का उपयोग करने से पहले, हमें इसे परिभाषित करने की आवश्यकता है। जावास्क्रिप्ट में किसी फ़ंक्शन को परिभाषित करने का सबसे आम तरीका है फ़ंक्शन `key` शब्द का उपयोग करना, उसके बाद एक अद्वितीय फ़ंक्शन नाम, मापदंडों की एक सूची (जो खाली हो सकती है), और एक `statement` ब्लॉक घुंघराले ब्रेसिज़ से घिरा हुआ है।\n",
    "Functions_key4": "फ़ंक्शन `code` का एक ब्लॉक है जिसे आप जितनी बार चाहें कॉल कर सकते हैं। एक फ़ंक्शन `statements` का एक समूह है जो विशिष्ट कार्य करता है और इसे मुख्य कार्यक्रम से अलग रखा और बनाए रखा जा सकता है। कार्यों का उपयोग करने के कुछ फायदे यहां दिए गए हैं:\n",
    "Functions_key5": "**फ़ंक्शंस `code`** की पुनरावृत्ति को कम करते हैं — फ़ंक्शन हमें `code` के सामान्य रूप से उपयोग किए जाने वाले ब्लॉकों को एक ही स्थान पर प्राप्त करने की अनुमति देता है। अब आप अपने `code` के भीतर जहां चाहें इस फ़ंक्शन को कॉल करके एक ही ईवेंट को बार-बार `code` के एक ही ब्लॉक को लिखे बिना निष्पादित कर सकते हैं।\n\n",
    "Functions_key6": "**फ़ंक्शन `code` को संभालना बहुत आसान बनाता है** — क्योंकि एक बार बनाया गया फ़ंक्शन कई बार उपयोग किया जा सकता है, इसलिए फ़ंक्शन के अंदर किए गए कोई भी परिवर्तन सभी `files` को छुए बिना सभी स्थानों पर स्वचालित रूप से चला जाता है।\n\n",
    "Functions_key7": "**फ़ंक्शंस `errors`** को खत्म करना आसान बनाता है — यदि कोई `error` होता है तो आप ठीक से जानते हैं कि `error` किस फ़ंक्शन के कारण हुआ और इसे कहां खोजना है। इसलिए, `errors` को ठीक करना आपके `code` में बहुत आसान हो जाता है।\n"
}