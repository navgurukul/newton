[
	{
		"component": "header",
		"variant": 1,
		"value": "The startswith() and endswith() <span style=\"\">String</span> Methods"
	},
	{
		"component": "text",
		"value": "The startswith() and endswith() methods return <span style=\"\">True</span> if the <span style=\"\">string</span> value they are called on begins or ends (respectively) with the <span style=\"\">string</span> passed to the method; otherwise, they return <span style=\"\">False</span>. Enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> 'Hello world!'.startswith('Hello')<br>True<br>>>> 'Hello world!'.endswith('world!')<br>True<br>>>> 'abc123'.startswith('abcdef')<br>False<br>>>> 'abc123'.endswith('12')<br>False<br>>>> 'Hello world!'.startswith('Hello world!')<br>True<br>>>> 'Hello world!'.endswith('Hello world!')<br>True"
	},
	{
		"component": "text",
		"value": "These methods are useful alternatives to the == equals <span style=\"\">operator</span> if you need to check only whether the first or last part of the <span style=\"\">string</span>, rather than the whole thing, is equal to another <span style=\"\">string</span>."
	},
	{
		"component": "text",
		"value": "The join() and split() <span style=\"\">String</span> Methods<br>The join() method is useful when you have a list of <span style=\"\">strings</span> that need to be joined together into a single <span style=\"\">string</span> value. The join() method is called on a <span style=\"\">string</span>, gets passed a list of <span style=\"\">strings</span>, and returns a <span style=\"\">string</span>. The returned <span style=\"\">string</span> is the concatenation of each <span style=\"\">string</span> in the passed-in list. For example, enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> ', '.join(['cats', 'rats', 'bats'])<br>'cats, rats, bats'<br>>>> ' '.join(['My', 'name', 'is', 'Simon'])<br>'My name is Simon'<br>>>> 'ABC'.join(['My', 'name', 'is', 'Simon'])<br>'MyABCnameABCisABCSimon'"
	},
	{
		"component": "text",
		"value": "Notice that the <span style=\"\">string</span> join() calls on is inserted between each <span style=\"\">string</span> of the list argument. For example, when join(['cats', 'rats', 'bats']) is called on the ', ' <span style=\"\">string</span>, the returned <span style=\"\">string</span> is ‘cats, rats, bats’."
	},
	{
		"component": "text",
		"value": "Remember that join() is called on a <span style=\"\">string</span> value and is passed a list value. (It’s easy to accidentally call it the other way around.) The split() method does the opposite: It’s called on a <span style=\"\">string</span> value and returns a list of <span style=\"\">strings</span>. Enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> 'My name is Simon'.split()<br>['My', 'name', 'is', 'Simon']"
	},
	{
		"component": "text",
		"value": "By default, the <span style=\"\">string</span> 'My name is Simon' is split wherever whitespace characters such as the space, <span style=\"\">tab</span>, or newline characters are found. These whitespace characters are not included in the <span style=\"\">strings</span> in the returned list. You can pass a delimiter <span style=\"\">string</span> to the split() method to specify a different <span style=\"\">string</span> to split upon. For example, enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> 'MyABCnameABCisABCSimon'.split('ABC')<br>['My', 'name', 'is', 'Simon']<br>>>> 'My name is Simon'.split('m')<br>['My na', 'e is Si', 'on']"
	},
	{
		"component": "text",
		"value": "A common use of split() is to split a multiline <span style=\"\">string</span> along the newline characters. Enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> spam = '''Dear Alice,<br>How have you been? I am fine.<br>There is a container in the fridge<br>that is labeled \"Milk Experiment\".<br><br>Please do not drink it.<br>Sincerely,<br>Bob'''<br>>>> spam.split('\\n')<br>['Dear Alice,', 'How have you been? I am fine.', 'There is a container in the'<br>fridge', 'that is labeled \"Milk Experiment\".', '', 'Please do not drink it.','<br>'Sincerely,', 'Bob']"
	},
	{
		"component": "text",
		"value": "Passing split() the argument '\\n' lets us split the multiline <span style=\"\">string</span> stored in spam along the newlines and return a list in which each item corresponds to one line of the <span style=\"\">string</span>."
	},
	{
		"component": "text",
		"value": "Justifying Text with rjust(), ljust(), and center()<br>The rjust() and ljust() <span style=\"\">string</span> methods return a padded version of the <span style=\"\">string</span> they are called on, with spaces inserted to justify the text. The first argument to both methods is an <span style=\"\">integer</span> length for the justified <span style=\"\">string</span>. Enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> 'Hello'.rjust(10)<br>'     Hello'<br>>>> 'Hello'.rjust(20)<br>'               Hello'<br>>>> 'Hello World'.rjust(20)<br>'         Hello World'<br>>>> 'Hello'.ljust(10)<br>'Hello     '"
	},
	{
		"component": "text",
		"value": "'Hello'.rjust(10) says that we want to right-justify 'Hello' in a <span style=\"\">string</span> of total length 10. 'Hello' is five characters, so five spaces will be added to its left, giving us a <span style=\"\">string</span> of 10 characters with 'Hello' justified right."
	},
	{
		"component": "text",
		"value": "An optional second argument to rjust() and ljust() will specify a fill character other than a space character. Enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> 'Hello'.rjust(20, '*')<br>'***************Hello'<br>>>> 'Hello'.ljust(20, '-')<br>'Hello---------------'"
	},
	{
		"component": "text",
		"value": "The center() <span style=\"\">string</span> method works like ljust() and rjust() but centers the text rather than justifying it to the left or right. Enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> 'Hello'.center(20)<br>'       Hello       '<br>>>> 'Hello'.center(20, '=')<br>'=======Hello========'"
	},
	{
		"component": "text",
		"value": "These methods are especially useful when you need to print <span style=\"\">tab</span>ular data that has the correct spacing. Open a new <span style=\"\">file</span> <span style=\"\">editor</span> window and enter the following <span style=\"\">code</span>, saving it as picnic<span style=\"\">Tab</span>le.py:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "def printPicnic(itemsDict, leftWidth, rightWidth):<br>    print('PICNIC ITEMS'.center(leftWidth + rightWidth, '-'))<br>    for k, v in itemsDict.items():<br>        print(k.ljust(leftWidth, '.') + str(v).rjust(rightWidth))<br>picnicItems = {'sandwiches': 4, 'apples': 12, 'cups': 4, 'cookies': 8000}<br>printPicnic(picnicItems, 12, 5)<br>printPicnic(picnicItems, 20, 6)"
	},
	{
		"component": "text",
		"value": "In this program, we define a printPicnic() method that will take in a dictionary of information and use center(), ljust(), and rjust() to display that information in a neatly aligned <span style=\"\">tab</span>le-like format."
	},
	{
		"component": "text",
		"value": "The dictionary that we’ll pass to printPicnic() is picnicItems. In picnicItems, we have 4 sandwiches, 12 apples, 4 cups, and 8000 cookies. We want to organize this information into two columns, with the name of the item on the left and the quantity on the right."
	},
	{
		"component": "text",
		"value": "To do this, we decide how wide we want the left and right columns to be. Along with our dictionary, we’ll pass these values to printPicnic()."
	},
	{
		"component": "text",
		"value": "printPicnic() takes in a dictionary, a leftWidth for the left column of a <span style=\"\">tab</span>le, and a rightWidth for the right column. It prints a title, PICNIC ITEMS, centered above the <span style=\"\">tab</span>le. Then, it <span style=\"\">loops</span> through the dictionary, printing each <span style=\"\">key</span>-value pair on a line with the <span style=\"\">key</span> justified left and padded by periods, and the value justified right and padded by spaces."
	},
	{
		"component": "text",
		"value": "After defining printPicnic(), we define the dictionary picnicItems and call printPicnic() twice, passing it different widths for the left and right <span style=\"\">tab</span>le columns."
	},
	{
		"component": "text",
		"value": "When you run this program, the picnic items are displayed twice. The first time the left column is 12 characters wide, and the right column is 5 characters wide. The second time they are 20 and 6 characters wide, respectively."
	},
	{
		"component": "text",
		"value": "---PICNIC ITEMS--<br>sandwiches..    4<br>apples……   12<br>cups……..    4<br>cookies….. 8000<br>-------PICNIC ITEMS-------<br>sandwiches……….     4<br>apples…………..    12<br>cups…………….     4<br>cookies………….  8000<br>Using rjust(), ljust(), and center() lets you ensure that <span style=\"\">strings</span> are neatly aligned, even if you aren’t sure how many characters long your <span style=\"\">strings</span> are."
	},
	{
		"component": "text",
		"value": "Removing Whitespace with strip(), rstrip(), and lstrip()<br>Sometimes you may want to strip off whitespace characters (space, <span style=\"\">tab</span>, and newline) from the left side, right side, or both sides of a <span style=\"\">string</span>. The strip() <span style=\"\">string</span> method will return a new <span style=\"\">string</span> without any whitespace characters at the beginning or end. The lstrip() and rstrip() methods will remove whitespace characters from the left and right ends, respectively. Enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> spam = '    Hello World     '<br>>>> spam.strip()<br>'Hello World'<br>>>> spam.lstrip()<br>'Hello World '<br>>>> spam.rstrip()<br>'    Hello World'"
	},
	{
		"component": "text",
		"value": "Optionally, a <span style=\"\">string</span> argument will specify which characters on the ends should be stripped. Enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> spam = 'SpamSpamBaconSpamEggsSpamSpam'<br>>>> spam.strip('ampS')<br>'BaconSpamEggs'"
	},
	{
		"component": "text",
		"value": "Passing strip() the argument 'ampS' will tell it to strip occurences of a, m, p, and capital S from the ends of the <span style=\"\">string</span> stored in spam. The order of the characters in the <span style=\"\">string</span> passed to strip() does not matter: strip('ampS') will do the same thing as strip('mapS') or strip('Spam')."
	}
]