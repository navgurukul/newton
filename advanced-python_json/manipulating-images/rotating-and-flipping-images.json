[
	{
		"component": "header",
		"variant": 1,
		"value": "Rotating and Flipping Images"
	},
	{
		"component": "text",
		"value": "Images can be rotated with the rotate() method, which returns a new Image object of the rotated image and leaves the original Image object unchanged. The argument to rotate() is a single <span style=\"\">integer</span> or <span style=\"\">float</span> representing the number of degrees to rotate the image counterclockwise. Enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> catIm.rotate(90).save('rotated90.png')<br>>>> catIm.rotate(180).save('rotated180.png')<br>>>> catIm.rotate(270).save('rotated270.png')"
	},
	{
		"component": "text",
		"value": "Note how you can chain method calls by calling <span style=\"\">save</span>() directly on the Image object returned from rotate(). The first rotate() and <span style=\"\">save</span>() call makes a new Image object representing the image rotated counterclockwise by 90 degrees and <span style=\"\">saves</span> the rotated image to rotated90.png. The second and third calls do the same, but with 180 degress and 270 degress. The results look like Figure 17-7."
	},
	{
		"component": "text",
		"value": "Figure 17-7. The original image (left) and the image rotated counterclockwise by 90, 180, and 270 degrees"
	},
	{
		"component": "text",
		"value": "Notice that the width and height of the image change when the image is rotated 90 or 270 degrees. If you rotate an image by some other amount, the original dimensions of the image are maintained. On Windows, a black background is used to fill in any gaps made by the rotation, like in Figure 17-8. On OS X, transparent pixels are used for the gaps instead."
	},
	{
		"component": "text",
		"value": "The rotate() method has an optional expand <span style=\"\">key</span>word argument that can be set to <span style=\"\">True</span> to enlarge the dimensions of the image to fit the entire rotated new image. For example, enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "blockquote",
		"value": "<blockquote>\n  catIm.rotate(6).<span style=\"\">save</span>('rotated6.png')<br>&gt; catIm.rotate(6, expand=<span style=\"\">True</span>).<span style=\"\">save</span>('rotated6<i>expanded.png')<br>The first call rotates the image 6 degrees and <span style=\"\">saves</span> it to rotate6.png (see the image on the left of Figure 17-8). The second call rotates the image 6 degrees with expand set to <span style=\"\">True</span> and <span style=\"\">saves</span> it to rotate6</i>expanded.png (see the image on the right of Figure 17-8).<br>\n</blockquote>"
	},
	{
		"component": "text",
		"value": "Figure 17-8. The image rotated 6 degrees normally (left) and with expand=<span style=\"\">True</span> (right)"
	},
	{
		"component": "text",
		"value": "You can also get a “mirror flip” of an image with the transpose() method. You must pass either Image.FLIP<i>LEFT</i>RIGHT or Image.FLIP<i>TOP</i>BOTTOM to the transpose() method. Enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "blockquote",
		"value": "<blockquote>\n  catIm.transpose(Image.FLIP<i>LEFT</i>RIGHT).<span style=\"\">save</span>('horizontal<i>flip.png')<br>> catIm.transpose(Image.FLIP</i>TOP<i>BOTTOM).<span style=\"\">save</span>('vertical</i>flip.png')<br>Like rotate(), transpose() creates a new Image object. Here was pass Image.FLIP<i>LEFT</i>RIGHT to flip the image horizontally and then <span style=\"\">save</span> the result to horizontal<i>flip.png. To flip the image vertically, we pass Image.FLIP</i>TOP<i>BOTTOM and <span style=\"\">save</span> to vertical</i>flip.png. The results look like Figure 17-9.<br>\n</blockquote>"
	},
	{
		"component": "text",
		"value": "Figure 17-9. The original image (left), horizontal flip (center), and vertical flip (right)"
	}
]