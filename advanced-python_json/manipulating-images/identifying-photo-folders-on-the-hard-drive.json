[
	{
		"component": "header",
		"variant": 1,
		"value": "Identifying Photo Folders on the Hard Drive"
	},
	{
		"component": "text",
		"value": "I have a bad habit of transferring <span style=\"\">files</span> from my digital camera to temporary folders somewhere on the hard drive and then forgetting about these folders. It would be nice to write a program that could scan the entire hard drive and find these leftover “photo folders.”"
	},
	{
		"component": "text",
		"value": "Write a program that goes through every folder on your hard drive and finds potential photo folders. Of course, first you’ll have to define what you consider a “photo folder” to be; let’s say that it’s any folder where more than half of the <span style=\"\">files</span> are photos. And how do you define what <span style=\"\">files</span> are photos?"
	},
	{
		"component": "text",
		"value": "First, a photo <span style=\"\">file</span> must have the <span style=\"\">file</span> extension .png or .jpg. Also, photos are large images; a photo <span style=\"\">file</span>’s width and height must both be larger than 500 pixels. This is a safe bet, since most digital camera photos are several thousand pixels in width and height."
	},
	{
		"component": "text",
		"value": "As a hint, here’s a rough skeleton of what this program might look like:"
	},
	{
		"component": "text",
		"value": "<h1 id=\"spanstylepython3spanbrimportmodulesandwritecommentstodescribethisprogram\">! <span style=\"\">python3</span> #<br>Import modules and write comments to describe this program.</h1>"
	},
	{
		"component": "text",
		"value": "for foldername, subfolders, <span style=\"\">file</span>names in os.walk('C:\\'):<br>    numPhoto<span style=\"\">Files</span> = 0<br>    numNonPhoto<span style=\"\">Files</span> = 0<br>    for <span style=\"\">file</span>name in <span style=\"\">file</span>names:<br>        # Check if <span style=\"\">file</span> extension isn't .png or .jpg.<br>        if TODO:<br>            numNonPhoto<span style=\"\">Files</span> += 1<br>            continue    # skip to next <span style=\"\">file</span>name"
	},
	{
		"component": "text",
		"value": "# Open image file using Pillow.<br><br>    # Check if width & height are larger than 500.<br>    if TODO:<br>        # Image is large enough to be considered a photo.<br>        numPhotoFiles += 1<br>    else:<br>        # Image is too small to be a photo.<br>        numNonPhotoFiles += 1<br><br># If more than half of files were photos,<br># print the absolute path of the folder.<br>if TODO:<br>    print(TODO)"
	},
	{
		"component": "text",
		"value": "When the program runs, it should print the absolute path of any photo folders to the screen."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Custom Seating Cards"
	},
	{
		"component": "text",
		"value": "Chapter 13 included a practice project to create custom invitations from a list of guests in a plaintext <span style=\"\">file</span>. As an additional project, use the pillow module to create images for custom seating cards for your guests. For each of the guests listed in the guests.txt <span style=\"\">file</span> from the resources at <span><a href=\"http://nostarch.com/automatestuff/\">http://nostarch.com/automatestuff/</a></span>, generate an image <span style=\"\">file</span> with the guest name and some flowery decoration. A public domain flower image is available in the resources at <span><a href=\" http://nostarch.com/automatestuff/\"> http://nostarch.com/automatestuff/</a></span>."
	},
	{
		"component": "text",
		"value": "To ensure that each seating card is the same size, add a black rectangle on the edges of the invitation image so that when the image is printed out, there will be a guideline for cutting. The PNG <span style=\"\">files</span> that Pillow produces are set to 72 pixels per inch, so a 4×5-inch card would require a 288×360-pixel image."
	}
]