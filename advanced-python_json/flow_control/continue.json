[
	{
		"component": "header",
		"variant": 1,
		"value": "continue <span style=\"\">Statements</span>"
	},
	{
		"component": "text",
		"value": "Like break <span style=\"\">statements</span>, continue <span style=\"\">statements</span> are used inside <span style=\"\">loops</span>. When the program execution reaches a continue <span style=\"\">statement</span>, the program execution immediately jumps back to the start of the <span style=\"\">loop</span> and reevaluates the <span style=\"\">loop</span>’s condition. (This is also what happens when the execution reaches the end of the <span style=\"\">loop</span>.)"
	},
	{
		"component": "text",
		"value": "Trapped in an Infinite <span style=\"\">Loop</span>?"
	},
	{
		"component": "text",
		"value": "If you ever run a program that has a bug causing it to get stuck in an infinite <span style=\"\">loop</span>, press CTRL-C. This will send a <span style=\"\">Key</span>boardInterrupt <span style=\"\">error</span> to your program and cause it to stop immediately. To try it, create a simple infinite <span style=\"\">loop</span> in the <span style=\"\">file</span> <span style=\"\">editor</span>, and <span style=\"\">save</span> it as infinite<span style=\"\">loop</span>.py."
	},
	{
		"component": "text",
		"value": "while <span style=\"\">True</span>:<br>    print('Hello world!')<br>When you run this program, it will print Hello world! to the screen forever, because the while <span style=\"\">statement</span>’s condition is always <span style=\"\">True</span>. In IDLE’s interactive <span style=\"\">shell</span> window, there are only two ways to stop this program: press CTRL-C or select <span style=\"\">Shell</span> ▸ restart <span style=\"\">Shell</span> from the menu. CTRL-C is handy if you ever want to terminate your program immediately, even if it’s not stuck in an infinite <span style=\"\">loop</span>."
	},
	{
		"component": "text",
		"value": "Let’s use continue to write a program that asks for a name and password. Enter the following <span style=\"\">code</span> into a new <span style=\"\">file</span> <span style=\"\">editor</span> window and <span style=\"\">save</span> the program as swordfish.py.<br>If the user enters any name besides Joe ❶, the continue <span style=\"\">statement</span> ❷ causes the program execution to jump back to the start of the <span style=\"\">loop</span>. When it reevaluates the condition, the execution will always enter the <span style=\"\">loop</span>, since the condition is simply the value <span style=\"\">True</span>. Once they make it past that if <span style=\"\">statement</span>, the user is asked for a password ❸. If the password entered is swordfish, then the break <span style=\"\">statement</span> ❹ is run, and the execution jumps out of the while <span style=\"\">loop</span> to print Access granted ❺. Otherwise, the execution continues to the end of the while <span style=\"\">loop</span>, where it then jumps back to the start of the <span style=\"\">loop</span>. See Figure 2-13 for this program’s flowchart."
	},
	{
		"component": "text",
		"value": "Figure 2-13. A flowchart for swordfish.py. The X path will logically never happen because the <span style=\"\">loop</span> condition is always <span style=\"\">True</span>."
	},
	{
		"component": "text",
		"value": "“Truthy” and “<span style=\"\">False</span>y” Values"
	},
	{
		"component": "text",
		"value": "There are some values in other data types that conditions will consider equivalent to <span style=\"\">True</span> and <span style=\"\">False</span>. When used in conditions, 0, 0.0, and '' (the empty <span style=\"\">string</span>) are considered <span style=\"\">False</span>, while all other values are considered <span style=\"\">True</span>. For example, look at the following program:<br>If the user enters a blank <span style=\"\">string</span> for name, then the while <span style=\"\">statement</span>’s condition will be <span style=\"\">True</span> ❶, and the program continues to ask for a name. If the value for numOfGuests is not 0 ❷, then the condition is considered to be <span style=\"\">True</span>, and the program will print a reminder for the user ❸."
	},
	{
		"component": "text",
		"value": "You could have typed not name != '' instead of not name, and numOfGuests != 0 instead of numOfGuests, but using the truthy and <span style=\"\">false</span>y values can make your <span style=\"\">code</span> easier to read."
	},
	{
		"component": "text",
		"value": "Run this program and give it some <span style=\"\">input</span>. Until you claim to be Joe, it shouldn’t ask for a password, and once you enter the correct password, it should exit."
	},
	{
		"component": "text",
		"value": "Who are you?<br>I'm fine, thanks. Who are you?<br>Who are you?<br>Joe<br>Hello, Joe. What is the password? (It is a fish.)<br>Mary<br>Who are you?<br>Joe<br>Hello, Joe. What is the password? (It is a fish.)<br>swordfish<br>Access granted."
	}
]