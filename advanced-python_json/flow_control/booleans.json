[
	{
		"component": "header",
		"variant": 1,
		"value": "Boolean Values"
	},
	{
		"component": "text",
		"value": "While the <span style=\"\">integer</span>, <span style=\"\">float</span>ing-point, and <span style=\"\">string</span> data types have an unlimited number of possible values, the Boolean data type has only two values: <span style=\"\">True</span> and <span style=\"\">False</span>. (Boolean is capitalized because the data type is named after mathematician George Boole.) When typed as <span style=\"\">Python</span> <span style=\"\">code</span>, the Boolean values <span style=\"\">True</span> and <span style=\"\">False</span> lack the quotes you place around <span style=\"\">strings</span>, and they always start with a capital T or F, with the rest of the word in lowercase. Enter the following into the interactive <span style=\"\">shell</span>. (Some of these instructions are intentionally incorrect, and they’ll cause <span style=\"\">error</span> messages to appear.)"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Comparison <span style=\"\">Operators</span>"
	},
	{
		"component": "table",
		"value": [
			{
				"header": "`Operator",
				"items": [
					"==",
					"!=",
					"&lt;",
					"&gt;",
					"&lt;=",
					"<blockquote>\n  =\n</blockquote>"
				]
			},
			{
				"header": "Meaning",
				"items": [
					"Equal to",
					"Not equal to",
					"less than",
					"Greater than",
					"Less than or equal to",
					"greater than or equal to"
				]
			}
		]
	},
	{
		"component": "text",
		"value": "These <span style=\"\">operators</span> evaluate to <span style=\"\">True</span> or <span style=\"\">False</span> depending on the values you give them. Let’s try some <span style=\"\">operators</span> now, starting with == and !=."
	},
	{
		"component": "text",
		"value": "As you might expect, == (equal to) evaluates to <span style=\"\">True</span> when the values on both sides are the same, and != (not equal to) evaluates to <span style=\"\">True</span> when the two values are different. The == and != <span style=\"\">operators</span> can actually work with values of any data type.<br>The <, >, <=, and >= <span style=\"\">operators</span>, on the other hand, work properly only with <span style=\"\">integer</span> and <span style=\"\">float</span>ing-point values."
	},
	{
		"component": "header",
		"variant": 2,
		"value": "The Difference Between the == and = <span style=\"\">Operators</span>"
	},
	{
		"component": "text",
		"value": "You might have noticed that the == <span style=\"\">operator</span> (equal to) has two equal signs, while the = <span style=\"\">operator</span> (assignment) has just one equal sign. It’s easy to confuse these two <span style=\"\">operators</span> with each other. Just remember these points:"
	},
	{
		"component": "text",
		"value": "The == operator (equal to) asks whether two values are the same as each other.",
		"decoration": {
			"type": "number",
			"value": 1
		}
	},
	{
		"component": "text",
		"value": "The = operator (assignment) puts the value on the right into the variable on the left.",
		"decoration": {
			"type": "number",
			"value": 2
		}
	},
	{
		"component": "text",
		"value": "To help remember which is which, notice that the == <span style=\"\">operator</span> (equal to) consists of two characters, just like the != <span style=\"\">operator</span> (not equal to) consists of two characters."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Boolean <span style=\"\">Operators</span>"
	},
	{
		"component": "text",
		"value": "The three Boolean <span style=\"\">operators</span> (and, or, and not) are used to compare Boolean values. Like comparison <span style=\"\">operators</span>, they evaluate these expressions down to a Boolean value. Let’s explore these <span style=\"\">operators</span> in detail, starting with the and <span style=\"\">operator</span>."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Binary Boolean <span style=\"\">Operators</span>"
	},
	{
		"component": "text",
		"value": "The and and or <span style=\"\">operators</span> always take two Boolean values (or expressions), so they’re considered binary <span style=\"\">operators</span>. The and <span style=\"\">operator</span> evaluates an expression to <span style=\"\">True</span> if both Boolean values are <span style=\"\">True</span>; otherwise, it evaluates to <span style=\"\">False</span>. Enter some expressions using and into the interactive <span style=\"\">shell</span> to see it in action."
	},
	{
		"component": "text",
		"value": "A truth <span style=\"\">tab</span>le shows every possible result of a Boolean <span style=\"\">operator</span>. <span style=\"\">Tab</span>le 2-2 is the truth <span style=\"\">tab</span>le for the and <span style=\"\">operator</span>."
	},
	{
		"component": "table",
		"value": [
			{
				"header": "Expression",
				"items": [
					"True and True",
					"True and False",
					"False and True",
					"False and False"
				]
			},
			{
				"header": "Evaluates to…",
				"items": [
					"True",
					"False",
					"False",
					"false"
				]
			}
		]
	},
	{
		"component": "text",
		"value": "On the other hand, the or <span style=\"\">operator</span> evaluates an expression to <span style=\"\">True</span> if either of the two Boolean values is <span style=\"\">True</span>. If both are <span style=\"\">False</span>, it evaluates to <span style=\"\">False</span>."
	},
	{
		"component": "text",
		"value": "You can see every possible outcome of the or <span style=\"\">operator</span> in its truth <span style=\"\">tab</span>le, shown in <span style=\"\">Tab</span>le 2-3."
	},
	{
		"component": "text",
		"value": "<span style=\"\">Tab</span>le 2-3. The or <span style=\"\">Operator</span>’s Truth <span style=\"\">Tab</span>le"
	},
	{
		"component": "table",
		"value": [
			{
				"header": "Expression",
				"items": [
					"True or True",
					"True or False",
					"False or True",
					"False or False"
				]
			},
			{
				"header": "Evaluates to…",
				"items": [
					"True",
					"True",
					"True",
					"false"
				]
			}
		]
	},
	{
		"component": "header",
		"variant": 1,
		"value": "The not <span style=\"\">Operator</span>"
	},
	{
		"component": "text",
		"value": "Unlike and and or, the not <span style=\"\">operator</span> operates on only one Boolean value (or expression). The not <span style=\"\">operator</span> simply evaluates to the opposite Boolean value."
	},
	{
		"component": "text",
		"value": "Much like using double negatives in speech and writing, you can nest not <span style=\"\">operators</span> ❶, though there’s never not no reason to do this in real programs. <span style=\"\">Tab</span>le 2-4 shows the truth <span style=\"\">tab</span>le for not."
	},
	{
		"component": "table",
		"value": [
			{
				"header": "Expression",
				"items": [
					"not True",
					"not False"
				]
			},
			{
				"header": "Evaluates to…",
				"items": [
					"False",
					"True"
				]
			}
		]
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Mixing Boolean and Comparison <span style=\"\">Operators</span>"
	},
	{
		"component": "text",
		"value": "Since the comparison <span style=\"\">operators</span> evaluate to Boolean values, you can use them in expressions with the Boolean <span style=\"\">operators</span>."
	},
	{
		"component": "text",
		"value": "Recall that the and, or, and not <span style=\"\">operators</span> are called Boolean <span style=\"\">operators</span> because they always operate on the Boolean values <span style=\"\">True</span> and <span style=\"\">False</span>. While expressions like 4 &lt; 5 aren’t Boolean values, they are expressions that evaluate down to Boolean values. Try entering some Boolean expressions that use comparison <span style=\"\">operators</span> into the interactive <span style=\"\">shell</span>."
	},
	{
		"component": "text",
		"value": "The computer will evaluate the left expression first, and then it will evaluate the right expression. When it knows the Boolean value for each, it will then evaluate the whole expression down to one Boolean value. You can think of the computer’s evaluation process for (4 &lt; 5) and (5 &lt; 6) as shown in Figure 2-2."
	},
	{
		"component": "text",
		"value": "You can also use multiple Boolean <span style=\"\">operators</span> in an expression, along with the comparison <span style=\"\">operators</span>."
	},
	{
		"component": "text",
		"value": "The Boolean <span style=\"\">operators</span> have an order of operations just like the math <span style=\"\">operators</span> do. After any math and comparison <span style=\"\">operators</span> evaluate, <span style=\"\">Python</span> evaluates the not <span style=\"\">operators</span> first, then the and <span style=\"\">operators</span>, and then the or <span style=\"\">operators</span>."
	}
]