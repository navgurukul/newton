{
	"overlaying-pages_key1": "Overlaying Pages",
	"overlaying-pages_key2": "PyPDF2 can also overlay the contents of one page over another, which is useful for adding a logo, timestamp, or watermark to a page. With <span style=\"\">Python</span>, it’s easy to add watermarks to multiple <span style=\"\">files</span> and only to pages your program specifies.",
	"overlaying-pages_key3": "Download watermark.pdf from <span><a href=\"http://nostarch.com/automatestuff/\">http://nostarch.com/automatestuff/</a></span> and place the PDF in the current working directory along with meetingminutes.pdf. Then enter the following into the interactive <span style=\"\">shell</span>:",
	"overlaying-pages_key4": "Here we make a Pdf<span style=\"\">File</span>Reader object of meetingminutes.pdf ❶. We call getPage(0) to get a Page object for the first page and store this object in minutesFirstPage ❷. We then make a Pdf<span style=\"\">File</span>Reader object for watermark.pdf ❸ and call mergePage() on minutesFirstPage ❹. The argument we pass to mergePage() is a Page object for the first page of watermark.pdf.",
	"overlaying-pages_key5": "Now that we’ve called mergePage() on minutesFirstPage, minutesFirstPage represents the watermarked first page. We make a Pdf<span style=\"\">File</span>Writer object ❺ and add the watermarked first page ❻. Then we <span style=\"\">loop</span> through the rest of the pages in meetingminutes.pdf and add them to the Pdf<span style=\"\">File</span>Writer object ❼. Finally, we open a new PDF called watermarkedCover.pdf and write the contents of the Pdf<span style=\"\">File</span>Writer to the new PDF.",
	"overlaying-pages_key6": "Figure 13-3 shows the results. Our new PDF, watermarkedCover.pdf, has all the contents of the meetingminutes.pdf, and the first page is watermarked.",
	"overlaying-pages_key7": "Figure 13-3. The original PDF (left), the watermark PDF (center), and the merged PDF (right)"
}