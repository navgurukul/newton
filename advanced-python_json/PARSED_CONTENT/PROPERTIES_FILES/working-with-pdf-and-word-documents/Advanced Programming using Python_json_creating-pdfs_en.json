{
	"creating-pdfs_key1": "Creating PDFs",
	"creating-pdfs_key2": "PyPDF2’s counterpart to Pdf<span style=\"\">File</span>Reader objects is Pdf<span style=\"\">File</span>Writer objects, which can create new PDF <span style=\"\">files</span>. But PyPDF2 cannot write arbitrary text to a PDF like <span style=\"\">Python</span> can do with plaintext <span style=\"\">files</span>. Instead, PyPDF2’s PDF-writing capabilities are limited to copying pages from other PDFs, rotating pages, overlaying pages, and encrypting <span style=\"\">files</span>.",
	"creating-pdfs_key3": "PyPDF2 doesn’t allow you to directly edit a PDF. Instead, you have to create a new PDF and then copy content over from an existing document. The examples in this section will follow this general approach:",
	"creating-pdfs_key4": "Open one or more existing PDFs (the source PDFs) into Pdf<span style=\"\">File</span>Reader objects.",
	"creating-pdfs_key5": "Create a new Pdf<span style=\"\">File</span>Writer object.",
	"creating-pdfs_key6": "Copy pages from the Pdf<span style=\"\">File</span>Reader objects into the Pdf<span style=\"\">File</span>Writer object.",
	"creating-pdfs_key7": "Finally, use the Pdf<span style=\"\">File</span>Writer object to write the <span style=\"\">output</span> PDF.",
	"creating-pdfs_key8": "Creating a Pdf<span style=\"\">File</span>Writer object creates only a value that represents a PDF document in <span style=\"\">Python</span>. It doesn’t create the actual PDF <span style=\"\">file</span>. For that, you must call the Pdf<span style=\"\">File</span>Writer’s write() method.",
	"creating-pdfs_key9": "The write() method takes a regular <span style=\"\">File</span> object that has been opened in write-binary mode. You can get such a <span style=\"\">File</span> object by calling <span style=\"\">Python</span>’s open() function with two arguments: the <span style=\"\">string</span> of what you want the PDF’s <span style=\"\">file</span>name to be and 'wb' to indicate the <span style=\"\">file</span> should be opened in write-binary mode.",
	"creating-pdfs_key10": "If this sounds a little confusing, don’t worry—you’ll see how this works in the following <span style=\"\">code</span> examples.",
	"creating-pdfs_key11": "Copying Pages",
	"creating-pdfs_key12": "You can use PyPDF2 to copy pages from one PDF document to another. This allows you to combine multiple PDF <span style=\"\">files</span>, cut unwanted pages, or reorder pages.",
	"creating-pdfs_key13": "Download meetingminutes.pdf and meetingminutes2.pdf from <span><a href=\"http://nostarch.com/automatestuff/\">http://nostarch.com/automatestuff/</a></span> and place the PDFs in the current working directory. Enter the following into the interactive <span style=\"\">shell</span>:",
	"creating-pdfs_key14": "Open both PDF <span style=\"\">files</span> in read binary mode and store the two resulting <span style=\"\">File</span> objects in pdf1<span style=\"\">File</span> and pdf2<span style=\"\">File</span>. Call PyPDF2.Pdf<span style=\"\">File</span>Reader() and pass it pdf1<span style=\"\">File</span> to get a Pdf<span style=\"\">File</span>Reader object for meetingminutes.pdf ❶. Call it again and pass it pdf2<span style=\"\">File</span> to get a Pdf<span style=\"\">File</span>Reader object for meetingminutes2.pdf ❷. Then create a new Pdf<span style=\"\">File</span>Writer object, which represents a blank PDF document ❸.",
	"creating-pdfs_key15": "Next, copy all the pages from the two source PDFs and add them to the Pdf<span style=\"\">File</span>Writer object. Get the Page object by calling getPage() on a Pdf<span style=\"\">File</span>Reader object ❹. Then pass that Page object to your Pdf<span style=\"\">File</span>Writer’s addPage() method ❺. These steps are done first for pdf1Reader and then again for pdf2Reader. When you’re done copying pages, write a new PDF called combinedminutes.pdf by passing a <span style=\"\">File</span> object to the Pdf<span style=\"\">File</span>Writer’s write() method ❻.",
	"creating-pdfs_key16": "Note",
	"creating-pdfs_key17": "PyPDF2 cannot insert pages in the middle of a Pdf<span style=\"\">File</span>Writer object; the addPage() method will only add pages to the end.",
	"creating-pdfs_key18": "You have now created a new PDF <span style=\"\">file</span> that combines the pages from meetingminutes.pdf and meetingminutes2.pdf into a single document. Remember that the <span style=\"\">File</span> object passed to PyPDF2.Pdf<span style=\"\">File</span>Reader() needs to be opened in read-binary mode by passing 'rb' as the second argument to open(). Likewise, the <span style=\"\">File</span> object passed to PyPDF2.Pdf<span style=\"\">File</span>Writer() needs to be opened in write-binary mode with 'wb'.",
	"creating-pdfs_key19": "Rotating Pages",
	"creating-pdfs_key20": "The pages of a PDF can also be rotated in 90-degree increments with the rotateClockwise() and rotateCounterClockwise() methods. Pass one of the <span style=\"\">integers</span> 90, 180, or 270 to these methods. Enter the following into the interactive <span style=\"\">shell</span>, with the meetingminutes.pdf <span style=\"\">file</span> in the current working directory:",
	"creating-pdfs_key21": "Here we use getPage(0) to select the first page of the PDF ❶, and then we call rotateClockwise(90) on that page ❷. We write a new PDF with the rotated page and <span style=\"\">save</span> it as rotatedPage.pdf ❸.",
	"creating-pdfs_key22": "The resulting PDF will have one page, rotated 90 degrees clockwise, as in Figure 13-2. The return values from rotateClockwise() and rotateCounterClockwise() contain a lot of information that you can ignore.",
	"creating-pdfs_key23": "Figure 13-2. The rotatedPage.pdf <span style=\"\">file</span> with the page rotated 90 degrees clockwise"
}