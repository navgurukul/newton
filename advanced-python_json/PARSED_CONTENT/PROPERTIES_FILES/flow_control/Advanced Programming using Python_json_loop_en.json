{
	"loop_key1": "for <span style=\"\">Loops</span> and the range() Function",
	"loop_key2": "The while <span style=\"\">loop</span> keeps <span style=\"\">loop</span>ing while its condition is <span style=\"\">True</span> (which is the reason for its name), but what if you want to <span style=\"\">execute</span> a block of <span style=\"\">code</span> only a certain number of times? You can do this with a for <span style=\"\">loop</span> <span style=\"\">statement</span> and the range() function.",
	"loop_key3": "In <span style=\"\">code</span>, a for <span style=\"\">statement</span> looks something like for i in range(5): and always includes the following:",
	"loop_key4": "The for <span style=\"\">key</span>word",
	"loop_key5": "A <span style=\"\">variable</span> name",
	"loop_key6": "The in <span style=\"\">key</span>word",
	"loop_key7": "A call to the range() method with up to three <span style=\"\">integers</span> passed to it",
	"loop_key8": "A colon",
	"loop_key9": "Starting on the next line, an indented block of <span style=\"\">code</span> (called the for clause)",
	"loop_key10": "Let’s create a new program called fiveTimes.py to help you see a for <span style=\"\">loop</span> in action.<br>The <span style=\"\">code</span> in the for <span style=\"\">loop</span>’s clause is run five times. The first time it is run, the <span style=\"\">variable</span> i is set to 0. The print() call in the clause will print Jimmy Five Times (0). After <span style=\"\">Python</span> finishes an iteration through all the <span style=\"\">code</span> inside the for <span style=\"\">loop</span>’s clause, the execution goes back to the top of the <span style=\"\">loop</span>, and the for <span style=\"\">statement</span> increments i by one. This is why range(5) results in five iterations through the clause, with i being set to 0, then 1, then 2, then 3, and then 4. The <span style=\"\">variable</span> i will go up to, but will not include, the <span style=\"\">integer</span> passed to range(). Figure 2-14 shows a flowchart for the fiveTimes.py program.",
	"loop_key11": "When you run this program, it should print Jimmy Five Times followed by the value of i five times before leaving the for <span style=\"\">loop</span>.",
	"loop_key12": "My name is<br>Jimmy Five Times (0)<br>Jimmy Five Times (1)<br>Jimmy Five Times (2)<br>Jimmy Five Times (3)<br>Jimmy Five Times (4)<br>Note<br>You can use break and continue <span style=\"\">statements</span> inside for <span style=\"\">loops</span> as well. The continue <span style=\"\">statement</span> will continue to the next value of the for <span style=\"\">loop</span>’s counter, as if the program execution had reached the end of the <span style=\"\">loop</span> and returned to the start. In fact, you can use continue and break <span style=\"\">statements</span> only inside while and for <span style=\"\">loops</span>. If you try to use these <span style=\"\">statements</span> elsewhere, <span style=\"\">Python</span> will give you an <span style=\"\">error</span>.",
	"loop_key13": "As another for <span style=\"\">loop</span> example, consider this story about the mathematician Karl Friedrich Gauss. When Gauss was a boy, a teacher wanted to give the class some busywork. The teacher told them to add up all the numbers from 0 to 100. Young Gauss came up with a clever trick to figure out the answer in a few seconds, but you can write a <span style=\"\">Python</span> program with a for <span style=\"\">loop</span> to do this calculation for you.<br>The result should be 5,050. When the program first starts, the total <span style=\"\">variable</span> is set to 0 ❶. The for <span style=\"\">loop</span> ❷ then <span style=\"\">executes</span> total = total + num ❸ 100 times. By the time the <span style=\"\">loop</span> has finished all of its 100 iterations, every <span style=\"\">integer</span> from 0 to 100 will have been added to total. At this point, total is printed to the screen ❹. Even on the slowest computers, this program takes less than a second to complete.",
	"loop_key14": "(Young Gauss figured out that there were 50 pairs of numbers that added up to 101: 1 + 100, 2 + 99, 3 + 98, 4 + 97, and so on, until 50 + 51. Since 50 × 101 is 5,050, the sum of all the numbers from 0 to 100 is 5,050. Clever kid!)",
	"loop_key15": "An Equivalent while <span style=\"\">Loop</span>",
	"loop_key16": "You can actually use a while <span style=\"\">loop</span> to do the same thing as a for <span style=\"\">loop</span>; for <span style=\"\">loops</span> are just more concise. Let’s rewrite fiveTimes.py to use a while <span style=\"\">loop</span> equivalent of a for <span style=\"\">loop</span>.<br>If you run this program, the <span style=\"\">output</span> should look the same as the fiveTimes.py program, which uses a for <span style=\"\">loop</span>.",
	"loop_key17": "The Starting, Stopping, and Stepping Arguments to range()",
	"loop_key18": "Some functions can be called with multiple arguments separated by a comma, and range() is one of them. This lets you change the <span style=\"\">integer</span> passed to range() to follow any sequence of <span style=\"\">integers</span>, including starting at a number other than zero.",
	"loop_key19": "The first argument will be where the for <span style=\"\">loop</span>’s <span style=\"\">variable</span> starts, and the second argument will be up to, but not including, the number to stop at.",
	"loop_key20": "12<br>13<br>14<br>15<br>The range() function can also be called with three arguments. The first two arguments will be the start and stop values, and the third will be the step argument. The step is the amount that the <span style=\"\">variable</span> is increased by after each iteration.",
	"loop_key21": "So calling range(0, 10, 2) will count from zero to eight by intervals of two.",
	"loop_key22": "0<br>2<br>4<br>6<br>8<br>The range() function is flexible in the sequence of numbers it produces for for <span style=\"\">loops</span>. For example (I never apologize for my puns), you can even use a negative number for the step argument to make the for <span style=\"\">loop</span> count down instead of up.<br>Running a for <span style=\"\">loop</span> to print i with range(5, -1, -1) should print from five down to zero.",
	"loop_key23": "5<br>4<br>3<br>2<br>1<br>0"
}