{
	"break_key1": "break <span style=\"\">Statements</span>",
	"break_key2": "There is a shortcut to getting the program execution to break out of a while <span style=\"\">loop</span>’s clause early. If the execution reaches a break <span style=\"\">statement</span>, it immediately exits the while <span style=\"\">loop</span>’s clause. In <span style=\"\">code</span>, a break <span style=\"\">statement</span> simply contains the break <span style=\"\">key</span>word.",
	"break_key3": "Pretty simple, right? Here’s a program that does the same thing as the previous program, but it uses a break <span style=\"\">statement</span> to escape the <span style=\"\">loop</span>. Enter the following <span style=\"\">code</span>, and <span style=\"\">save</span> the <span style=\"\">file</span> as yourName2.py:",
	"break_key4": "The first line ❶ creates an infinite <span style=\"\">loop</span>; it is a while <span style=\"\">loop</span> whose condition is always <span style=\"\">True</span>. (The expression <span style=\"\">True</span>, after all, always evaluates down to the value <span style=\"\">True</span>.) The program execution will always enter the <span style=\"\">loop</span> and will exit it only when a break <span style=\"\">statement</span> is <span style=\"\">execute</span>d. (An infinite <span style=\"\">loop</span> that never exits is a common programming bug.)",
	"break_key5": "Just like before, this program asks the user to type your name ❷. Now, however, while the execution is still inside the while <span style=\"\">loop</span>, an if <span style=\"\">statement</span> gets <span style=\"\">execute</span>d ❸ to check whether name is equal to your name. If this condition is <span style=\"\">True</span>, the break <span style=\"\">statement</span> is run ❹, and the execution moves out of the <span style=\"\">loop</span> to print('Thank you!') ❺. Otherwise, the if <span style=\"\">statement</span>’s clause with the break <span style=\"\">statement</span> is skipped, which puts the execution at the end of the while <span style=\"\">loop</span>. At this point, the program execution jumps back to the start of the while <span style=\"\">statement</span> ❶ to recheck the condition. Since this condition is merely the <span style=\"\">True</span> Boolean value, the execution enters the <span style=\"\">loop</span> to ask the user to type your name again. See Figure 2-12 for the flowchart of this program.",
	"break_key6": "Run yourName2.py, and enter the same text you entered for yourName.py. The rewritten program should respond in the same way as the original.",
	"break_key7": "Figure 2-12. The flowchart for the yourName2.py program with an infinite <span style=\"\">loop</span>. Note that the X path will logically never happen because the <span style=\"\">loop</span> condition is always <span style=\"\">True</span>."
}