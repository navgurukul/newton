{
	"writing-excel-documents_key1": "Writing Excel Documents",
	"writing-excel-documents_key2": "OpenPyXL also provides ways of writing data, meaning that your programs can create and edit spreadsheet <span style=\"\">files</span>. With <span style=\"\">Python</span>, it’s simple to create spreadsheets with thousands of rows of data.",
	"writing-excel-documents_key3": "Creating and Saving Excel Documents<br>Call the openpyxl.Workbook() function to create a new, blank Workbook object. Enter the following into the interactive <span style=\"\">shell</span>:",
	"writing-excel-documents_key4": "['Sheet']",
	"writing-excel-documents_key5": "'Sheet'",
	"writing-excel-documents_key6": "['Spam Bacon Eggs Sheet']<br>The workbook will start off with a single sheet named Sheet. You can change the name of the sheet by storing a new <span style=\"\">string</span> in its title attribute.",
	"writing-excel-documents_key7": "Any time you modify the Workbook object or its sheets and cells, the spreadsheet <span style=\"\">file</span> will not be <span style=\"\">save</span>d until you call the <span style=\"\">save</span>() workbook method. Enter the following into the interactive <span style=\"\">shell</span> (with example.xlsx in the current working directory):",
	"writing-excel-documents_key8": "Here, we change the name of our sheet. To <span style=\"\">save</span> our changes, we pass a <span style=\"\">file</span>name as a <span style=\"\">string</span> to the <span style=\"\">save</span>() method. Passing a different <span style=\"\">file</span>name than the original, such as 'example_copy.xlsx', <span style=\"\">saves</span> the changes to a copy of the spreadsheet.",
	"writing-excel-documents_key9": "Whenever you edit a spreadsheet you’ve loaded from a <span style=\"\">file</span>, you should always <span style=\"\">save</span> the new, edited spreadsheet to a different <span style=\"\">file</span>name than the original. That way, you’ll still have the original spreadsheet <span style=\"\">file</span> to work with in case a bug in your <span style=\"\">code</span> caused the new, <span style=\"\">save</span>d <span style=\"\">file</span> to have incorrect or corrupt data.",
	"writing-excel-documents_key10": "Creating and Removing Sheets<br>Sheets can be added to and removed from a workbook with the create<i>sheet() and remove</i>sheet() methods. Enter the following into the interactive <span style=\"\">shell</span>:",
	"writing-excel-documents_key11": "['Sheet']",
	"writing-excel-documents_key12": "<Worksheet \"Sheet1\">",
	"writing-excel-documents_key13": "['Sheet', 'Sheet1']",
	"writing-excel-documents_key14": "<Worksheet \"First Sheet\">",
	"writing-excel-documents_key15": "['First Sheet', 'Sheet', 'Sheet1']",
	"writing-excel-documents_key16": "<Worksheet \"Middle Sheet\">",
	"writing-excel-documents_key17": "['First Sheet', 'Sheet', 'Middle Sheet', 'Sheet1']<br>The create_sheet() method returns a new Worksheet object named SheetX, which by default is set to be the last sheet in the workbook. Optionally, the index and name of the new sheet can be specified with the index and title <span style=\"\">key</span>word arguments.",
	"writing-excel-documents_key18": "Continue the previous example by entering the following:",
	"writing-excel-documents_key19": "['First Sheet', 'Sheet', 'Middle Sheet', 'Sheet1']",
	"writing-excel-documents_key20": "['First Sheet', 'Sheet']<br>The remove<i>sheet() method takes a Worksheet object, not a <span style=\"\">string</span> of the sheet name, as its argument. If you know only the name of a sheet you want to remove, call get</i>sheet<i>by</i>name() and pass its return value into remove_sheet().",
	"writing-excel-documents_key21": "Remember to call the <span style=\"\">save</span>() method to <span style=\"\">save</span> the changes after adding sheets to or removing sheets from the workbook.",
	"writing-excel-documents_key22": "Writing Values to Cells",
	"writing-excel-documents_key23": "Writing values to cells is much like writing values to <span style=\"\">keys</span> in a dictionary. Enter this into the interactive <span style=\"\">shell</span>:",
	"writing-excel-documents_key24": "'Hello world!'<br>If you have the cell’s coordinate as a <span style=\"\">string</span>, you can use it just like a dictionary <span style=\"\">key</span> on the Worksheet object to specify which cell to write to."
}