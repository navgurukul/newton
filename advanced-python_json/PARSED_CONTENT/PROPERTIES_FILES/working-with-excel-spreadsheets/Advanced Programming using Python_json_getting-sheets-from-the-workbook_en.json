{
	"getting-sheets-from-the-workbook_key1": "Getting Sheets from the Workbook",
	"getting-sheets-from-the-workbook_key2": "You can get a list of all the sheet names in the workbook by calling the get<i>sheet</i>names() method. Enter the following into the interactive <span style=\"\">shell</span>:",
	"getting-sheets-from-the-workbook_key3": "['Sheet1', 'Sheet2', 'Sheet3']",
	"getting-sheets-from-the-workbook_key4": "<Worksheet \"Sheet3\">",
	"getting-sheets-from-the-workbook_key5": "<blockquote>\n  type(sheet) <class 'openpyxl.worksheet.worksheet.Worksheet'><br>&gt; sheet.title<br>'Sheet3'<br>\n</blockquote>",
	"getting-sheets-from-the-workbook_key6": "<Worksheet \"Sheet1\"><br>Each sheet is represented by a Worksheet object, which you can obtain by passing the sheet name <span style=\"\">string</span> to the get<i>sheet</i>by_name() workbook method. Finally, you can read the active member <span style=\"\">variable</span> of a Workbook object to get the workbook’s active sheet. The active sheet is the sheet that’s on top when the workbook is opened in Excel. Once you have the Worksheet object, you can get its name from the title attribute.",
	"getting-sheets-from-the-workbook_key7": "Getting Cells from the Sheets",
	"getting-sheets-from-the-workbook_key8": "Once you have a Worksheet object, you can access a Cell object by its name. Enter the following into the interactive <span style=\"\">shell</span>:",
	"getting-sheets-from-the-workbook_key9": "Here, accessing the value attribute of our Cell object for cell B1 gives us the <span style=\"\">string</span> 'Apples'. The row attribute gives us the <span style=\"\">integer</span> 1, the column attribute gives us 'B', and the coordinate attribute gives us 'B1'.",
	"getting-sheets-from-the-workbook_key10": "OpenPyXL will automatically interpret the dates in column A and return them as datetime values rather than <span style=\"\">strings</span>. The datetime data type is explained further in Chapter 16.",
	"getting-sheets-from-the-workbook_key11": "Specifying a column by letter can be tricky to program, especially because after column Z, the columns start by using two letters: AA, AB, AC, and so on. As an alternative, you can also get a cell using the sheet’s cell() method and passing <span style=\"\">integers</span> for its row and column <span style=\"\">key</span>word arguments. The first row or column <span style=\"\">integer</span> is 1, not 0. Continue the interactive <span style=\"\">shell</span> example by entering the following:",
	"getting-sheets-from-the-workbook_key12": "1 Apples<br>3 Pears<br>5 Apples<br>7 Strawberries<br>As you can see, using the sheet’s cell() method and passing it row=1 and column=2 gets you a Cell object for cell B1, just like specifying sheet['B1'] did. Then, using the cell() method and its <span style=\"\">key</span>word arguments, you can write a for <span style=\"\">loop</span> to print the values of a series of cells.",
	"getting-sheets-from-the-workbook_key13": "Say you want to go down column B and print the value in every cell with an odd row number. By passing 2 for the range() function’s “step” parameter, you can get cells from every second row (in this case, all the odd-numbered rows). The for <span style=\"\">loop</span>’s i <span style=\"\">variable</span> is passed for the row <span style=\"\">key</span>word argument to the cell() method, while 2 is always passed for the column <span style=\"\">key</span>word argument. Note that the <span style=\"\">integer</span> 2, not the <span style=\"\">string</span> 'B', is passed.",
	"getting-sheets-from-the-workbook_key14": "You can determine the size of the sheet with the Worksheet object’s max<i>row and max</i>column member <span style=\"\">variables</span>. Enter the following into the interactive <span style=\"\">shell</span>:",
	"getting-sheets-from-the-workbook_key15": "7",
	"getting-sheets-from-the-workbook_key16": "3<br>Note that the max_column method returns an <span style=\"\">integer</span> rather than the letter that appears in Excel."
}