{
	"logging-to-a-file_key1": "Logging to a <span style=\"\">File</span>",
	"logging-to-a-file_key2": "Instead of displaying the log messages to the screen, you can write them to a text <span style=\"\">file</span>. The logging.basicConfig() function takes a <span style=\"\">file</span>name <span style=\"\">key</span>word argument, like so:",
	"logging-to-a-file_key3": "import logging<br>logging.basicConfig(<span style=\"\">file</span>name='myProgramLog.txt', level=logging.DEBUG, format='<br>%(asctime)s - %(levelname)s - %(message)s')<br>The log messages will be <span style=\"\">save</span>d to myProgramLog.txt. While logging messages are helpful, they can clutter your screen and make it hard to read the program’s <span style=\"\">output</span>. Writing the logging messages to a <span style=\"\">file</span> will keep your screen clear and store the messages so you can read them after running the program. You can open this text <span style=\"\">file</span> in any text <span style=\"\">editor</span>, such as Notepad or TextEdit.",
	"logging-to-a-file_key4": "IDLE’s Debugger",
	"logging-to-a-file_key5": "The debugger is a feature of IDLE that allows you to <span style=\"\">execute</span> your program one line at a time. The debugger will run a single line of <span style=\"\">code</span> and then wait for you to tell it to continue. By running your program “under the debugger” like this, you can take as much time as you want to examine the values in the <span style=\"\">variables</span> at any given point during the program’s lifetime. This is a valuable tool for tracking down bugs.",
	"logging-to-a-file_key6": "To enable IDLE’s debugger, click Debug▸Debugger in the interactive <span style=\"\">shell</span> window. This will bring up the Debug Control window, which looks like Figure 10-1.",
	"logging-to-a-file_key7": "When the Debug Control window appears, select all four of the Stack, Locals, Source, and Globals checkboxes so that the window shows the full set of debug information. While the Debug Control window is displayed, any time you run a program from the <span style=\"\">file</span> <span style=\"\">editor</span>, the debugger will pause execution before the first instruction and display the following:",
	"logging-to-a-file_key8": "The line of <span style=\"\">code</span> that is about to be <span style=\"\">execute</span>d",
	"logging-to-a-file_key9": "A list of all local <span style=\"\">variables</span> and their values",
	"logging-to-a-file_key10": "A list of all global <span style=\"\">variables</span> and their values",
	"logging-to-a-file_key11": "The Debug Control window",
	"logging-to-a-file_key12": "You’ll notice that in the list of global <span style=\"\">variables</span> there are several <span style=\"\">variables</span> you haven’t defined, such as <b>builtins</b>, <b>doc</b>, <b><span style=\"\">file</span></b>, and so on. These are <span style=\"\">variables</span> that <span style=\"\">Python</span> automatically sets whenever it runs a program. The meaning of these <span style=\"\">variables</span> is beyond the scope of this book, and you can comfor<span style=\"\">tab</span>ly ignore them.",
	"logging-to-a-file_key13": "The program will stay paused until you press one of the five buttons in the Debug Control window: Go, Step, Over, Out, or Quit.",
	"logging-to-a-file_key14": "Go",
	"logging-to-a-file_key15": "Clicking the Go button will cause the program to <span style=\"\">execute</span> normally until it terminates or reaches a breakpoint. (Breakpoints are described later in this chapter.) If you are done debugging and want the program to continue normally, click the Go button.",
	"logging-to-a-file_key16": "Step",
	"logging-to-a-file_key17": "Clicking the Step button will cause the debugger to <span style=\"\">execute</span> the next line of <span style=\"\">code</span> and then pause again. The Debug Control window’s list of global and local <span style=\"\">variables</span> will be updated if their values change. If the next line of <span style=\"\">code</span> is a function call, the debugger will “step into” that function and jump to the first line of <span style=\"\">code</span> of that function.",
	"logging-to-a-file_key18": "Over",
	"logging-to-a-file_key19": "Clicking the Over button will <span style=\"\">execute</span> the next line of <span style=\"\">code</span>, similar to the Step button. However, if the next line of <span style=\"\">code</span> is a function call, the Over button will “step over” the <span style=\"\">code</span> in the function. The function’s <span style=\"\">code</span> will be <span style=\"\">execute</span>d at full speed, and the debugger will pause as soon as the function call returns. For example, if the next line of <span style=\"\">code</span> is a print() call, you don’t really care about <span style=\"\">code</span> inside the built-in print() function; you just want the <span style=\"\">string</span> you pass it printed to the screen. For this reason, using the Over button is more common than the Step button.",
	"logging-to-a-file_key20": "Out",
	"logging-to-a-file_key21": "Clicking the Out button will cause the debugger to <span style=\"\">execute</span> lines of <span style=\"\">code</span> at full speed until it returns from the current function. If you have stepped into a function call with the Step button and now simply want to keep executing instructions until you get back out, click the Out button to “step out” of the current function call.",
	"logging-to-a-file_key22": "Quit",
	"logging-to-a-file_key23": "If you want to stop debugging entirely and not bother to continue executing the rest of the program, click the Quit button. The Quit button will immediately terminate the program. If you want to run your program normally again, select Debug▸Debugger again to disable the debugger."
}