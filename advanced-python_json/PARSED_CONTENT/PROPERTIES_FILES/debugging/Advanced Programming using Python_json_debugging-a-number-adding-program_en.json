{
	"debugging-a-number-adding-program_key1": "Debugging a Number Adding Program",
	"debugging-a-number-adding-program_key2": "Open a new <span style=\"\">file</span> <span style=\"\">editor</span> window and enter the following <span style=\"\">code</span>:",
	"debugging-a-number-adding-program_key3": "print('Enter the first number to add:')<br>first = <span style=\"\">input</span>()<br>print('Enter the second number to add:')<br>second = <span style=\"\">input</span>()<br>print('Enter the third number to add:')<br>third = <span style=\"\">input</span>()<br>print('The sum is ' + first + second + third)<br><span style=\"\">Save</span> it as buggyAddingProgram.py and run it first without the debugger enabled. The program will <span style=\"\">output</span> something like this:",
	"debugging-a-number-adding-program_key4": "Enter the first number to add:<br>5<br>Enter the second number to add:<br>3<br>Enter the third number to add:<br>42<br>The sum is 5342<br>The program hasn’t crashed, but the sum is obviously wrong. Let’s enable the Debug Control window and run it again, this time under the debugger.",
	"debugging-a-number-adding-program_key5": "When you press F5 or select Run▸Run Module (with Debug▸Debugger enabled and all four checkboxes on the Debug Control window checked), the program starts in a paused state on line 1. The debugger will always pause on the line of <span style=\"\">code</span> it is about to <span style=\"\">execute</span>. The Debug Control window will look like Figure 10-2.",
	"debugging-a-number-adding-program_key6": "The Debug Control window when the program first starts under the debugger",
	"debugging-a-number-adding-program_key7": "Click the Over button once to <span style=\"\">execute</span> the first print() call. You should use Over instead of Step here, since you don’t want to step into the <span style=\"\">code</span> for the print() function. The Debug Control window will update to line 2, and line 2 in the <span style=\"\">file</span> <span style=\"\">editor</span> window will be highlighted, as shown in Figure 10-3. This shows you where the program execution currently is.",
	"debugging-a-number-adding-program_key8": "The Debug Control window after clicking Over",
	"debugging-a-number-adding-program_key9": "Click Over again to <span style=\"\">execute</span> the <span style=\"\">input</span>() function call, and the buttons in the Debug Control window will disable themselves while IDLE waits for you to type something for the <span style=\"\">input</span>() call into the interactive <span style=\"\">shell</span> window. Enter 5 and press Return. The Debug Control window buttons will be reenabled.",
	"debugging-a-number-adding-program_key10": "Keep clicking Over, entering 3 and 42 as the next two numbers, until the debugger is on line 7, the final print() call in the program. The Debug Control window should look like Figure 10-4. You can see in the Globals section that the first, second, and third <span style=\"\">variables</span> are set to <span style=\"\">string</span> values '5', '3', and '42' instead of <span style=\"\">integer</span> values 5, 3, and 42. When the last line is <span style=\"\">execute</span>d, these <span style=\"\">strings</span> are concatenated instead of added together, causing the bug.",
	"debugging-a-number-adding-program_key11": "Figure 10-4. The Debug Control window on the last line. The <span style=\"\">variables</span> are set to <span style=\"\">strings</span>, causing the bug.",
	"debugging-a-number-adding-program_key12": "Stepping through the program with the debugger is helpful but can also be slow. Often you’ll want the program to run normally until it reaches a certain line of <span style=\"\">code</span>. You can configure the debugger to do this with breakpoints."
}