{
	"getting-the-traceback-as-a-string_key1": "Getting the Traceback as a <span style=\"\">String</span>",
	"getting-the-traceback-as-a-string_key2": "When <span style=\"\">Python</span> encounters an <span style=\"\">error</span>, it produces a treasure trove of <span style=\"\">error</span> information called the traceback. The traceback includes the <span style=\"\">error</span> message, the line number of the line that caused the <span style=\"\">error</span>, and the sequence of the function calls that led to the <span style=\"\">error</span>. This sequence of calls is called the call stack.",
	"getting-the-traceback-as-a-string_key3": "Open a new <span style=\"\">file</span> <span style=\"\">editor</span> window in IDLE, enter the following program, and <span style=\"\">save</span> it as <span style=\"\">errorE</span>xample.py:",
	"getting-the-traceback-as-a-string_key4": "def spam():<br>    bacon()<br>def bacon():<br>    raise Exception('This is the <span style=\"\">error</span> message.')",
	"getting-the-traceback-as-a-string_key5": "spam()<br>When you run <span style=\"\">errorE</span>xample.py, the <span style=\"\">output</span> will look like this:",
	"getting-the-traceback-as-a-string_key6": "Traceback (most recent call last):<br>  <span style=\"\">File</span> \"<span style=\"\">errorE</span>xample.py\", line 7, in <module><br>    spam()<br>  <span style=\"\">File</span> \"<span style=\"\">errorE</span>xample.py\", line 2, in spam<br>    bacon()<br>  <span style=\"\">File</span> \"<span style=\"\">errorE</span>xample.py\", line 5, in bacon<br>    raise Exception('This is the <span style=\"\">error</span> message.')<br>Exception: This is the <span style=\"\">error</span> message.<br>From the traceback, you can see that the <span style=\"\">error</span> happened on line 5, in the bacon() function. This particular call to bacon() came from line 2, in the spam() function, which in turn was called on line 7. In programs where functions can be called from multiple places, the call stack can help you determine which call led to the <span style=\"\">error</span>.",
	"getting-the-traceback-as-a-string_key7": "The traceback is displayed by <span style=\"\">Python</span> whenever a raised exception goes unhandled. But you can also obtain it as a <span style=\"\">string</span> by calling traceback.format_exc(). This function is useful if you want the information from an exception’s traceback but also want an except <span style=\"\">statement</span> to gracefully handle the exception. You will need to import <span style=\"\">Python</span>’s traceback module before calling this function.",
	"getting-the-traceback-as-a-string_key8": "For example, instead of crashing your program right when an exception occurs, you can write the traceback information to a log <span style=\"\">file</span> and keep your program running. You can look at the log <span style=\"\">file</span> later, when you’re ready to debug your program. Enter the following into the interactive <span style=\"\">shell</span>:",
	"getting-the-traceback-as-a-string_key9": "116<br>The traceback info was written to <span style=\"\">error</span>Info.txt.<br>The 116 is the return value from the write() method, since 116 characters were written to the <span style=\"\">file</span>. The traceback text was written to <span style=\"\">error</span>Info.txt.",
	"getting-the-traceback-as-a-string_key10": "Traceback (most recent call last):<br>  <span style=\"\">File</span> \"<py<span style=\"\">shell</span>#28>\", line 2, in <module><br>Exception: This is the <span style=\"\">error</span> message."
}