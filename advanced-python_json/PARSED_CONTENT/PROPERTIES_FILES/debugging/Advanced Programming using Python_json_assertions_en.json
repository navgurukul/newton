{
	"assertions_key1": "Assertions",
	"assertions_key2": "An assertion is a sanity check to make sure your <span style=\"\">code</span> isn’t doing something obviously wrong. These sanity checks are performed by assert <span style=\"\">statements</span>. If the sanity check fails, then an Assertion<span style=\"\">Error</span> exception is raised. In <span style=\"\">code</span>, an assert <span style=\"\">statement</span> consists of the following:",
	"assertions_key3": "The assert <span style=\"\">key</span>word",
	"assertions_key4": "A condition (that is, an expression that evaluates to <span style=\"\">True</span> or <span style=\"\">False</span>)",
	"assertions_key5": "A comma",
	"assertions_key6": "A <span style=\"\">string</span> to display when the condition is <span style=\"\">False</span>",
	"assertions_key7": "For example, enter the following into the interactive <span style=\"\">shell</span>:",
	"assertions_key8": "Traceback (most recent call last):<br>  <span style=\"\">File</span> \"<py<span style=\"\">shell</span>#10>\", line 1, in <module><br>    assert podBayDoorStatus == 'open', 'The pod bay doors need to be \"open\".'<br>Assertion<span style=\"\">Error</span>: The pod bay doors need to be \"open\".<br>Here we’ve set podBayDoorStatus to 'open', so from now on, we fully expect the value of this <span style=\"\">variable</span> to be 'open'. In a program that uses this <span style=\"\">variable</span>, we might have written a lot of <span style=\"\">code</span> under the assumption that the value is 'open'—<span style=\"\">code</span> that depends on its being 'open' in order to work as we expect. So we add an assertion to make sure we’re right to assume podBayDoorStatus is 'open'. Here, we include the message 'The pod bay doors need to be \"open\".' so it’ll be easy to see what’s wrong if the assertion fails.",
	"assertions_key9": "Later, say we make the obvious mistake of assigning podBayDoorStatus another value, but don’t notice it among many lines of <span style=\"\">code</span>. The assertion catches this mistake and clearly tells us what’s wrong.",
	"assertions_key10": "In plain English, an assert <span style=\"\">statement</span> says, “I assert that this condition holds <span style=\"\">true</span>, and if not, there is a bug somewhere in the program.” Unlike exceptions, your <span style=\"\">code</span> should not handle assert <span style=\"\">statements</span> with try and except; if an assert fails, your program should crash. By failing fast like this, you shorten the time between the original cause of the bug and when you first notice the bug. This will reduce the amount of <span style=\"\">code</span> you will have to check before finding the <span style=\"\">code</span> that’s causing the bug.",
	"assertions_key11": "Assertions are for programmer <span style=\"\">errors</span>, not user <span style=\"\">errors</span>. For <span style=\"\">errors</span> that can be recovered from (such as a <span style=\"\">file</span> not being found or the user entering invalid data), raise an exception instead of detecting it with an assert <span style=\"\">statement</span>."
}