{
	"debugging_key1": "Debugging",
	"debugging_key2": "Now that you know enough to write more complicated programs, you may start finding not-so-simple bugs in them. This chapter covers some tools and techniques for finding the root cause of bugs in your program to help you fix bugs faster and with less effort.",
	"debugging_key3": "To paraphrase an old joke among programmers, “Writing <span style=\"\">code</span> accounts for 90 percent of programming. Debugging <span style=\"\">code</span> accounts for the other 90 percent.”",
	"debugging_key4": "Your computer will do only what you tell it to do; it won’t read your mind and do what you intended it to do. Even professional programmers create bugs all the time, so don’t feel discouraged if your program has a problem.",
	"debugging_key5": "Fortunately, there are a few tools and techniques to identify what exactly your <span style=\"\">code</span> is doing and where it’s going wrong. First, you will look at logging and assertions, two features that can help you detect bugs early. In general, the earlier you catch bugs, the easier they will be to fix.",
	"debugging_key6": "Second, you will look at how to use the debugger. The debugger is a feature of IDLE that <span style=\"\">executes</span> a program one instruction at a time, giving you a chance to inspect the values in <span style=\"\">variables</span> while your <span style=\"\">code</span> runs, and track how the values change over the course of your program. This is much slower than running the program at full speed, but it is helpful to see the actual values in a program while it runs, rather than deducing what the values might be from the source <span style=\"\">code</span>.",
	"debugging_key7": "Raising Exceptions",
	"debugging_key8": "<span style=\"\">Python</span> raises an exception whenever it tries to <span style=\"\">execute</span> invalid <span style=\"\">code</span>. In Chapter 3, you read about how to handle <span style=\"\">Python</span>’s exceptions with try and except <span style=\"\">statements</span> so that your program can recover from exceptions that you anticipated. But you can also raise your own exceptions in your <span style=\"\">code</span>. Raising an exception is a way of saying, “Stop running the <span style=\"\">code</span> in this function and move the program execution to the except <span style=\"\">statement</span>.”",
	"debugging_key9": "Exceptions are raised with a raise <span style=\"\">statement</span>. In <span style=\"\">code</span>, a raise <span style=\"\">statement</span> consists of the following:",
	"debugging_key10": "The raise <span style=\"\">key</span>word",
	"debugging_key11": "A call to the Exception() function",
	"debugging_key12": "A <span style=\"\">string</span> with a helpful <span style=\"\">error</span> message passed to the Exception() function",
	"debugging_key13": "For example, enter the following into the interactive <span style=\"\">shell</span>:",
	"debugging_key14": "Traceback (most recent call last):<br>  <span style=\"\">File</span> \"<py<span style=\"\">shell</span>#191>\", line 1, in <module><br>    raise Exception('This is the <span style=\"\">error</span> message.')<br>Exception: This is the <span style=\"\">error</span> message.<br>If there are no try and except <span style=\"\">statements</span> covering the raise <span style=\"\">statement</span> that raised the exception, the program simply crashes and displays the exception’s <span style=\"\">error</span> message.",
	"debugging_key15": "Often it’s the <span style=\"\">code</span> that calls the function, not the function itself, that knows how to handle an exception. So you will commonly see a raise <span style=\"\">statement</span> inside a function and the try and except <span style=\"\">statements</span> in the <span style=\"\">code</span> calling the function. For example, open a new <span style=\"\">file</span> <span style=\"\">editor</span> window, enter the following <span style=\"\">code</span>, and <span style=\"\">save</span> the program as boxPrint.py:",
	"debugging_key16": "def boxPrint(symbol, width, height):<br>       if len(symbol) != 1:<br>❶         raise Exception('Symbol must be a single character <span style=\"\">string</span>.')<br>       if width <= 2:<br>❷         raise Exception('Width must be greater than 2.')<br>       if height <= 2:<br>❸         raise Exception('Height must be greater than 2.')<br>       print(symbol * width)<br>       for i in range(height - 2):<br>           print(symbol + (' ' * (width - 2)) + symbol)<br>       print(symbol * width)",
	"debugging_key17": "for sym, w, h in (('*', 4, 4), ('O', 20, 5), ('x', 1, 3), ('ZZ', 3, 3)):<br>       try:<br>           boxPrint(sym, w, h)<br>❹     except Exception as err:<br>❺         print('An exception happened: ' + str(err))<br>Here we’ve defined a boxPrint() function that takes a character, a width, and a height, and uses the character to make a little picture of a box with that width and height. This box shape is printed to the screen.",
	"debugging_key18": "Say we want the character to be a single character, and the width and height to be greater than 2. We add if <span style=\"\">statements</span> to raise exceptions if these requirements aren’t satisfied. Later, when we call boxPrint() with various arguments, our try/except will handle invalid arguments.",
	"debugging_key19": "This program uses the except Exception as err form of the except <span style=\"\">statement</span> ❹. If an Exception object is returned from boxPrint() ❶❷❸, this except <span style=\"\">statement</span> will store it in a <span style=\"\">variable</span> named err. The Exception object can then be converted to a <span style=\"\">string</span> by passing it to str() to produce a user-friendly <span style=\"\">error</span> message ❺. When you run this boxPrint.py, the <span style=\"\">output</span> will look like this:",
	"debugging_key20": "<hr>",
	"debugging_key21": "*",
	"debugging_key22": "*",
	"debugging_key23": "<hr>",
	"debugging_key24": "OOOOOOOOOOOOOOOOOOOO<br>O                  O<br>O                  O<br>O                  O<br>OOOOOOOOOOOOOOOOOOOO<br>An exception happened: Width must be greater than 2.<br>An exception happened: Symbol must be a single character <span style=\"\">string</span>.<br>Using the try and except <span style=\"\">statements</span>, you can handle <span style=\"\">errors</span> more gracefully instead of letting the entire program crash."
}