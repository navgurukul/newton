{
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key1": "Checking Whether a <span style=\"\">Key</span> or Value Exists in a Dictionary",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key2": "Recall from the previous chapter that the in and not in <span style=\"\">operators</span> can check whether a value exists in a list. You can also use these <span style=\"\">operators</span> to see whether a certain <span style=\"\">key</span> or value exists in a dictionary. Enter the following into the interactive <span style=\"\">shell</span>:",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key3": "In the previous example, notice that 'color' in spam is essentially a shorter version of writing 'color' in spam.<span style=\"\">keys</span>(). This is always the case: If you ever want to check whether a value is (or isn’t) a <span style=\"\">key</span> in the dictionary, you can simply use the in (or not in) <span style=\"\">key</span>word with the dictionary value itself.",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key4": "The get() Method",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key5": "It’s tedious to check whether a <span style=\"\">key</span> exists in a dictionary before accessing that <span style=\"\">key</span>’s value. Fortunately, dictionaries have a get() method that takes two arguments: the <span style=\"\">key</span> of the value to retrieve and a fallback value to return if that <span style=\"\">key</span> does not exist.",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key6": "Enter the following into the interactive <span style=\"\">shell</span>:",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key7": "Because there is no 'eggs' <span style=\"\">key</span> in the picnicItems dictionary, the default value 0 is returned by the get() method. Without using get(), the <span style=\"\">code</span> would have caused an <span style=\"\">error</span> message, such as in the following example:",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key8": "You’ll often have to set a value in a dictionary for a certain <span style=\"\">key</span> only if that <span style=\"\">key</span> does not already have a value. The <span style=\"\">code</span> looks something like this:",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key9": "<h1 id=\"thesetdefaultmethodoffersawaytodothisinonelineofspanstylecodespanthefirstargumentpassedtothemethodisthespanstylekeyspantocheckforandthesecondargumentisthevaluetosetatthatspanstylekeyspanifthespanstylekeyspandoesnotexistifthespanstylekeyspandoesexistthesetdefaultmethodreturnsthespanstylekeyspansvalueenterthefollowingintotheinteractivespanstyleshellspan\">The setdefault() method offers a way to do this in one line of <span style=\"\">code</span>. The first argument passed to the method is the <span style=\"\">key</span> to check for, and the second argument is the value to set at that <span style=\"\">key</span> if the <span style=\"\">key</span> does not exist. If the <span style=\"\">key</span> does exist, the setdefault() method returns the <span style=\"\">key</span>’s value. Enter the following into the interactive <span style=\"\">shell</span>:</h1>",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key10": "The first time setdefault() is called, the dictionary in spam changes to {'color': 'black', 'age': 5, 'name': 'Pooka'}. The method returns the value 'black' because this is now the value set for the <span style=\"\">key</span> 'color'. When spam.setdefault('color', 'white') is called next, the value for that <span style=\"\">key</span> is not changed to 'white' because spam already has a <span style=\"\">key</span> named 'color'.",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key11": "The setdefault() method is a nice shortcut to ensure that a <span style=\"\">key</span> exists. Here is a short program that counts the number of occurrences of each letter in a <span style=\"\">string</span>. Open the <span style=\"\">file</span> <span style=\"\">editor</span> window and enter the following <span style=\"\">code</span>, saving it as characterCount.py:",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key12": "The program <span style=\"\">loops</span> over each character in the message <span style=\"\">variable</span>’s <span style=\"\">string</span>, counting how often each character appears. The setdefault() method call ensures that the <span style=\"\">key</span> is in the count dictionary (with a default value of 0) so the program doesn’t throw a <span style=\"\">KeyE</span>rror <span style=\"\">error</span> when count[character] = count[character] + 1 is <span style=\"\">execute</span>d. When you run this program, the <span style=\"\">output</span> will look like this:",
	"checking-whether-a-key-or-value-exists-in-a-dictionary_key13": "{' ': 13, ',': 1, '.': 1, 'A': 1, 'I': 1, 'a': 4, 'c': 3, 'b': 1, 'e': 5, 'd': 3, 'g': 2, 'i':<br>6, 'h': 3, 'k': 2, 'l': 3, 'o': 2, 'n': 4, 'p': 1, 's': 3, 'r': 5, 't': 6, 'w': 2, 'y': 1}<br>From the <span style=\"\">output</span>, you can see that the lowercase letter c appears 3 times, the space character appears 13 times, and the uppercase letter A appears 1 time. This program will work no matter what <span style=\"\">string</span> is inside the message <span style=\"\">variable</span>, even if the <span style=\"\">string</span> is millions of characters long!"
}