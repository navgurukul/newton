{
	"rounding-numbers_key1": "Rounding Numbers",
	"rounding-numbers_key2": "When working with times, you’ll often encounter <span style=\"\">float</span> values with many digits after the decimal. To make these values easier to work with, you can shorten them with <span style=\"\">Python</span>’s built-in round() function, which rounds a <span style=\"\">float</span> to the precision you specify. Just pass in the number you want to round, plus an optional second argument representing how many digits after the decimal point you want to round it to. If you omit the second argument, round() rounds your number to the nearest whole <span style=\"\">integer</span>. Enter the following into the interactive <span style=\"\">shell</span>:",
	"rounding-numbers_key3": "1425064108.017826",
	"rounding-numbers_key4": "1425064108.02",
	"rounding-numbers_key5": "1425064108.0178",
	"rounding-numbers_key6": "1425064108<br>After importing time and storing time.time() in now, we call round(now, 2) to round now to two digits after the decimal, round(now, 4) to round to four digits after the decimal, and round(now) to round to the nearest <span style=\"\">integer</span>."
}