{
	"writer-objects_key1": "Writer Objects",
	"writer-objects_key2": "A Writer object lets you write data to a CSV <span style=\"\">file</span>. To create a Writer object, you use the csv.writer() function. Enter the following into the interactive <span style=\"\">shell</span>:",
	"writer-objects_key3": "21",
	"writer-objects_key4": "32",
	"writer-objects_key5": "16",
	"writer-objects_key6": "First, call open() and pass it 'w' to open a <span style=\"\">file</span> in write mode ❶. This will create the object you can then pass to csv.writer() ❷ to create a Writer object.",
	"writer-objects_key7": "On Windows, you’ll also need to pass a blank <span style=\"\">string</span> for the open() function’s newline <span style=\"\">key</span>word argument. For technical reasons beyond the scope of this book, if you forget to set the newline argument, the rows in <span style=\"\">output</span>.csv will be double-spaced, as shown in Figure 14-1.",
	"writer-objects_key8": "Figure 14-1. If you forget the newline='' <span style=\"\">key</span>word argument in open(), the CSV <span style=\"\">file</span> will be double-spaced.",
	"writer-objects_key9": "The writerow() method for Writer objects takes a list argument. Each value in the list is placed in its own cell in the <span style=\"\">output</span> CSV <span style=\"\">file</span>. The return value of writerow() is the number of characters written to the <span style=\"\">file</span> for that row (including newline characters).",
	"writer-objects_key10": "This <span style=\"\">code</span> produces an <span style=\"\">output</span>.csv <span style=\"\">file</span> that looks like this:",
	"writer-objects_key11": "spam,eggs,bacon,ham<br>\"Hello, world!\",eggs,bacon,ham<br>1,2,3.141592,4<br>Notice how the Writer object automatically escapes the comma in the value 'Hello, world!' with double quotes in the CSV <span style=\"\">file</span>. The csv module <span style=\"\">saves</span> you from having to handle these special cases yourself."
}