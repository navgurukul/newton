{
	"project-multiclipboard_key1": "Project: Multiclipboard",
	"project-multiclipboard_key2": "Say you have the boring task of filling out many forms in a web page or software with several text fields. The clipboard <span style=\"\">saves</span> you from typing the same text over and over again. But only one thing can be on the clipboard at a time. If you have several different pieces of text that you need to copy and paste, you have to keep highlighting and copying the same few things over and over again.",
	"project-multiclipboard_key3": "You can write a <span style=\"\">Python</span> program to keep track of multiple pieces of text. This “multiclipboard” will be named mcb.pyw (since “mcb” is shorter to type than “multiclipboard”). The .pyw extension means that <span style=\"\">Python</span> won’t show a <span style=\"\">Terminal</span> window when it runs this program. (See Appendix B for more details.)",
	"project-multiclipboard_key4": "The program will <span style=\"\">save</span> each piece of clipboard text under a <span style=\"\">key</span>word. For example, when you run py mcb.pyw <span style=\"\">save</span> spam, the current contents of the clipboard will be <span style=\"\">save</span>d with the <span style=\"\">key</span>word spam. This text can later be loaded to the clipboard again by running py mcb.pyw spam. And if the user forgets what <span style=\"\">key</span>words they have, they can run py mcb.pyw list to copy a list of all <span style=\"\">key</span>words to the clipboard.",
	"project-multiclipboard_key5": "Here’s what the program does:",
	"project-multiclipboard_key6": "The command line argument for the <span style=\"\">key</span>word is checked.",
	"project-multiclipboard_key7": "If the argument is <span style=\"\">save</span>, then the clipboard contents are <span style=\"\">save</span>d to the <span style=\"\">key</span>word.",
	"project-multiclipboard_key8": "If the argument is list, then all the <span style=\"\">key</span>words are copied to the clipboard.",
	"project-multiclipboard_key9": "Otherwise, the text for the <span style=\"\">key</span>word is copied to the clipboard.",
	"project-multiclipboard_key10": "This means the <span style=\"\">code</span> will need to do the following:",
	"project-multiclipboard_key11": "Read the command line arguments from sys.argv.",
	"project-multiclipboard_key12": "Read and write to the clipboard.",
	"project-multiclipboard_key13": "<span style=\"\">Save</span> and load to a shelf <span style=\"\">file</span>.",
	"project-multiclipboard_key14": "If you use Windows, you can easily run this script from the Run… window by creating a batch <span style=\"\">file</span> named mcb.bat with the following content:",
	"project-multiclipboard_key15": "@pyw.exe C:\\<span style=\"\">Python3</span>4\\mcb.pyw %*",
	"project-multiclipboard_key16": "Step 1: Comments and Shelf Setup",
	"project-multiclipboard_key17": "Let’s start by making a skeleton script with some comments and basic setup. Make your <span style=\"\">code</span> look like the following:",
	"project-multiclipboard_key18": "#! <span style=\"\">python3</span>",
	"project-multiclipboard_key19": "mcb.pyw - <span style=\"\">Saves</span> and loads pieces of text to the clipboard.",
	"project-multiclipboard_key20": "❶ # Usage: py.exe mcb.pyw <span style=\"\">save</span> <<span style=\"\">key</span>word> - <span style=\"\">Saves</span> clipboard to <span style=\"\">key</span>word.",
	"project-multiclipboard_key21": "py.exe mcb.pyw <<span style=\"\">key</span>word> - Loads <span style=\"\">key</span>word to clipboard.",
	"project-multiclipboard_key22": "py.exe mcb.pyw list - Loads all <span style=\"\">key</span>words to clipboard.",
	"project-multiclipboard_key23": "❷ import shelve, pyperclip, sys",
	"project-multiclipboard_key24": "❸ mcbShelf = shelve.open('mcb')",
	"project-multiclipboard_key25": "TODO: <span style=\"\">Save</span> clipboard content.",
	"project-multiclipboard_key26": "TODO: List <span style=\"\">key</span>words and load content.",
	"project-multiclipboard_key27": "It’s common practice to put general usage information in comments at the top of the <span style=\"\">file</span> ❶. If you ever forget how to run your script, you can always look at these comments for a reminder. Then you import your modules ❷. Copying and pasting will require the pyperclip module, and reading the command line arguments will require the sys module. The shelve module will also come in handy: Whenever the user wants to <span style=\"\">save</span> a new piece of clipboard text, you’ll <span style=\"\">save</span> it to a shelf <span style=\"\">file</span>. Then, when the user wants to paste the text back to their clipboard, you’ll open the shelf <span style=\"\">file</span> and load it back into your program. The shelf <span style=\"\">file</span> will be named with the prefix mcb ❸.",
	"project-multiclipboard_key28": "Step 2: <span style=\"\">Save</span> Clipboard Content with a <span style=\"\">Key</span>word",
	"project-multiclipboard_key29": "The program does different things depending on whether the user wants to <span style=\"\">save</span> text to a <span style=\"\">key</span>word, load text into the clipboard, or list all the existing <span style=\"\">key</span>words. Let’s deal with that first case. Make your <span style=\"\">code</span> look like the following:",
	"project-multiclipboard_key30": "#! <span style=\"\">python3</span>",
	"project-multiclipboard_key31": "mcb.pyw - <span style=\"\">Saves</span> and loads pieces of text to the clipboard.",
	"project-multiclipboard_key32": "--snip--",
	"project-multiclipboard_key33": "❸    # TODO: List <span style=\"\">key</span>words and load content.",
	"project-multiclipboard_key34": "mcbShelf.close()<br>If the first command line argument (which will always be at index 1 of the sys.argv list) is '<span style=\"\">save</span>' ❶, the second command line argument is the <span style=\"\">key</span>word for the current content of the clipboard. The <span style=\"\">key</span>word will be used as the <span style=\"\">key</span> for mcbShelf, and the value will be the text currently on the clipboard ❷.",
	"project-multiclipboard_key35": "If there is only one command line argument, you will assume it is either 'list' or a <span style=\"\">key</span>word to load content onto the clipboard. You will implement that <span style=\"\">code</span> later. For now, just put a TODO comment there ❸.",
	"project-multiclipboard_key36": "Step 3: List <span style=\"\">Key</span>words and Load a <span style=\"\">Key</span>word’s Content",
	"project-multiclipboard_key37": "Finally, let’s implement the two remaining cases: The user wants to load clipboard text in from a <span style=\"\">key</span>word, or they want a list of all available <span style=\"\">key</span>words. Make your <span style=\"\">code</span> look like the following:",
	"project-multiclipboard_key38": "#! <span style=\"\">python3</span>",
	"project-multiclipboard_key39": "mcb.pyw - <span style=\"\">Saves</span> and loads pieces of text to the clipboard.",
	"project-multiclipboard_key40": "--snip--",
	"project-multiclipboard_key41": "<span style=\"\">Save</span> clipboard content.",
	"project-multiclipboard_key42": "if len(sys.argv) == 3 and sys.argv[1].lower() == '<span style=\"\">save</span>':<br>           mcbShelf[sys.argv[2]] = pyperclip.paste()<br>   elif len(sys.argv) == 2:",
	"project-multiclipboard_key43": "mcbShelf.close()<br>If there is only one command line argument, first let’s check whether it’s 'list' ❶. If so, a <span style=\"\">string</span> representation of the list of shelf <span style=\"\">keys</span> will be copied to the clipboard ❷. The user can paste this list into an open text <span style=\"\">editor</span> to read it.",
	"project-multiclipboard_key44": "Otherwise, you can assume the command line argument is a <span style=\"\">key</span>word. If this <span style=\"\">key</span>word exists in the mcbShelf shelf as a <span style=\"\">key</span>, you can load the value onto the clipboard ❸.",
	"project-multiclipboard_key45": "And that’s it! Launching this program has different steps depending on what operating system your computer uses. See Appendix B for details for your operating system.",
	"project-multiclipboard_key46": "Recall the password locker program you created in Chapter 6 that stored the passwords in a dictionary. Updating the passwords required changing the source <span style=\"\">code</span> of the program. This isn’t ideal because average users don’t feel comfor<span style=\"\">tab</span>le changing source <span style=\"\">code</span> to update their software. Also, every time you modify the source <span style=\"\">code</span> to a program, you run the risk of accidentally introducing new bugs. By storing the data for a program in a different place than the <span style=\"\">code</span>, you can make your programs easier for others to use and more resistant to bugs.",
	"project-multiclipboard_key47": "Summary",
	"project-multiclipboard_key48": "<span style=\"\">Files</span> are organized into folders (also called directories), and a path describes the location of a <span style=\"\">file</span>. Every program running on your computer has a current working directory, which allows you to specify <span style=\"\">file</span> paths relative to the current location instead of always typing the full (or absolute) path. The os.path module has many functions for manipulating <span style=\"\">file</span> paths.",
	"project-multiclipboard_key49": "Your programs can also directly interact with the contents of text <span style=\"\">files</span>. The open() function can open these <span style=\"\">files</span> to read in their contents as one large <span style=\"\">string</span> (with the read() method) or as a list of <span style=\"\">strings</span> (with the readlines() method). The open() function can open <span style=\"\">files</span> in write or append mode to create new text <span style=\"\">files</span> or add to existing text <span style=\"\">files</span>, respectively.",
	"project-multiclipboard_key50": "In previous chapters, you used the clipboard as a way of getting large amounts of text into a program, rather than typing it all in. Now you can have your programs read <span style=\"\">files</span> directly from the hard drive, which is a big improvement, since <span style=\"\">files</span> are much less volatile than the clipboard.",
	"project-multiclipboard_key51": "In the next chapter, you will learn how to handle the <span style=\"\">files</span> themselves, by copying them, deleting them, renaming them, moving them, and more."
}