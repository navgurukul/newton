{
	"saving-variables-with-the-shelve-module_key1": "Saving <span style=\"\">Variables</span> with the shelve Module",
	"saving-variables-with-the-shelve-module_key2": "You can <span style=\"\">save</span> <span style=\"\">variables</span> in your <span style=\"\">Python</span> programs to binary shelf <span style=\"\">files</span> using the shelve module. This way, your program can restore data to <span style=\"\">variables</span> from the hard drive. The shelve module will let you add <span style=\"\">Save</span> and Open features to your program. For example, if you ran a program and entered some configuration settings, you could <span style=\"\">save</span> those settings to a shelf <span style=\"\">file</span> and then have the program load them the next time it is run.",
	"saving-variables-with-the-shelve-module_key3": "Enter the following into the interactive <span style=\"\">shell</span>:",
	"saving-variables-with-the-shelve-module_key4": "To read and write data using the shelve module, you first import shelve. Call shelve.open() and pass it a <span style=\"\">file</span>name, and then store the returned shelf value in a <span style=\"\">variable</span>. You can make changes to the shelf value as if it were a dictionary. When you’re done, call close() on the shelf value. Here, our shelf value is stored in shelf<span style=\"\">File</span>. We create a list cats and write shelf<span style=\"\">File</span>['cats'] = cats to store the list in shelf<span style=\"\">File</span> as a value associated with the <span style=\"\">key</span> 'cats' (like in a dictionary). Then we call close() on shelf<span style=\"\">File</span>.",
	"saving-variables-with-the-shelve-module_key5": "After running the previous <span style=\"\">code</span> on Windows, you will see three new <span style=\"\">files</span> in the current working directory: mydata.bak, mydata.dat, and mydata.dir. On OS X, only a single mydata.db <span style=\"\">file</span> will be created.",
	"saving-variables-with-the-shelve-module_key6": "These binary <span style=\"\">files</span> contain the data you stored in your shelf. The format of these binary <span style=\"\">files</span> is not important; you only need to know what the shelve module does, not how it does it. The module frees you from worrying about how to store your program’s data to a <span style=\"\">file</span>.",
	"saving-variables-with-the-shelve-module_key7": "Your programs can use the shelve module to later reopen and retrieve the data from these shelf <span style=\"\">files</span>. Shelf values don’t have to be opened in read or write mode—they can do both once opened. Enter the following into the interactive <span style=\"\">shell</span>:",
	"saving-variables-with-the-shelve-module_key8": "Here, we open the shelf <span style=\"\">files</span> to check that our data was stored correctly. Entering shelf<span style=\"\">File</span>['cats'] returns the same list that we stored earlier, so we know that the list is correctly stored, and we call close().",
	"saving-variables-with-the-shelve-module_key9": "Just like dictionaries, shelf values have <span style=\"\">keys</span>() and values() methods that will return list-like values of the <span style=\"\">keys</span> and values in the shelf. Since these methods return list-like values instead of <span style=\"\">true</span> lists, you should pass them to the list() function to get them in list form. Enter the following into the interactive <span style=\"\">shell</span>:",
	"saving-variables-with-the-shelve-module_key10": "Plaintext is useful for creating <span style=\"\">files</span> that you’ll read in a text <span style=\"\">editor</span> such as Notepad or TextEdit, but if you want to <span style=\"\">save</span> data from your <span style=\"\">Python</span> programs, use the shelve module.",
	"saving-variables-with-the-shelve-module_key11": "Saving <span style=\"\">Variables</span> with the pprint.pformat() Function",
	"saving-variables-with-the-shelve-module_key12": "Recall from Pretty Printing that the pprint.pprint() function will “pretty print” the contents of a list or dictionary to the screen, while the pprint.pformat() function will return this same text as a <span style=\"\">string</span> instead of printing it. Not only is this <span style=\"\">string</span> formatted to be easy to read, but it is also syntactically correct <span style=\"\">Python</span> <span style=\"\">code</span>. Say you have a dictionary stored in a <span style=\"\">variable</span> and you want to <span style=\"\">save</span> this <span style=\"\">variable</span> and its contents for future use. Using pprint.pformat() will give you a <span style=\"\">string</span> that you can write to .py <span style=\"\">file</span>. This <span style=\"\">file</span> will be your very own module that you can import whenever you want to use the <span style=\"\">variable</span> stored in it.",
	"saving-variables-with-the-shelve-module_key13": "For example, enter the following into the interactive <span style=\"\">shell</span>:",
	"saving-variables-with-the-shelve-module_key14": "Here, we import pprint to let us use pprint.pformat(). We have a list of dictionaries, stored in a <span style=\"\">variable</span> cats. To keep the list in cats available even after we close the <span style=\"\">shell</span>, we use pprint.pformat() to return it as a <span style=\"\">string</span>. Once we have the data in cats as a <span style=\"\">string</span>, it’s easy to write the <span style=\"\">string</span> to a <span style=\"\">file</span>, which we’ll call myCats.py.",
	"saving-variables-with-the-shelve-module_key15": "The modules that an import <span style=\"\">statement</span> imports are themselves just <span style=\"\">Python</span> scripts. When the <span style=\"\">string</span> from pprint.pformat() is <span style=\"\">save</span>d to a .py <span style=\"\">file</span>, the <span style=\"\">file</span> is a module that can be imported just like any other.",
	"saving-variables-with-the-shelve-module_key16": "And since <span style=\"\">Python</span> scripts are themselves just text <span style=\"\">files</span> with the .py <span style=\"\">file</span> extension, your <span style=\"\">Python</span> programs can even generate other <span style=\"\">Python</span> programs. You can then import these <span style=\"\">files</span> into scripts.",
	"saving-variables-with-the-shelve-module_key17": "The benefit of creating a .py <span style=\"\">file</span> (as opposed to saving <span style=\"\">variables</span> with the shelve module) is that because it is a text <span style=\"\">file</span>, the contents of the <span style=\"\">file</span> can be read and modified by anyone with a simple text <span style=\"\">editor</span>. For most <span style=\"\">applications</span>, however, saving data using the shelve module is the preferred way to <span style=\"\">save</span> <span style=\"\">variables</span> to a <span style=\"\">file</span>. Only basic data types such as <span style=\"\">integers</span>, <span style=\"\">floats</span>, <span style=\"\">strings</span>, lists, and dictionaries can be written to a <span style=\"\">file</span> as simple text. <span style=\"\">File</span> objects, for example, cannot be en<span style=\"\">code</span>d as text."
}