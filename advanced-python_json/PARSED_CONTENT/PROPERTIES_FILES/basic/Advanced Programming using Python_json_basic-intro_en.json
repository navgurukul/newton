{
	"basic-intro_key1": "<span style=\"\">Python</span> Basics",
	"basic-intro_key2": "The <span style=\"\">Python</span> programming language has a wide range of syntactical constructions, standard library functions, and interactive development environment features. Fortunately, you can ignore most of that; you just need to learn enough to write some handy little programs.<br>You will, however, have to learn some basic programming concepts before you can do anything. Like a wizard-in-training, you might think these concepts seem arcane and tedious, but with some knowledge and practice, you’ll be able to command your computer like a magic wand to perform incredible feats.",
	"basic-intro_key3": "This chapter has a few examples that encourage you to type into the interactive <span style=\"\">shell</span>, which lets you <span style=\"\">execute</span> <span style=\"\">Python</span> instructions one at a time and shows you the results instantly. Using the interactive <span style=\"\">shell</span> is great for learning what basic <span style=\"\">Python</span> instructions do, so give it a try as you follow along. You’ll remember the things you do much better than the things you only read.",
	"basic-intro_key4": "Entering Expressions into the Interactive <span style=\"\">Shell</span>",
	"basic-intro_key5": "You run the interactive <span style=\"\">shell</span> by launching IDLE, which you installed with <span style=\"\">Python</span> in the introduction. On Windows, open the Start menu, select All Programs ▸ <span style=\"\">Python</span> 3.3, and then select IDLE (<span style=\"\">Python</span> GUI). On OS X, select <span style=\"\">Applications</span> ▸ Mac<span style=\"\">Python</span> 3.3 ▸ IDLE. On Ubuntu, open a new <span style=\"\">Terminal</span> window and enter idle3.",
	"basic-intro_key6": "A window with the &gt;&gt;&gt; prompt should appear; that’s the interactive <span style=\"\">shell</span>. Enter 2 + 2 at the prompt to have <span style=\"\">Python</span> do some simple math.",
	"basic-intro_key7": "4<br>The IDLE window should now show some text like this:",
	"basic-intro_key8": "<span style=\"\">Python</span> 3.3.2 (v3.3.2:d047928ae3f6, May 16 2013, 00:06:53) [MSC v.1600 64 bit<br>(AMD64)] on win32",
	"basic-intro_key9": "4",
	"basic-intro_key10": "In <span style=\"\">Python</span>, 2 + 2 is called an expression, which is the most basic kind of programming instruction in the language. Expressions consist of values (such as 2) and <span style=\"\">operators</span> (such as +), and they can always evaluate (that is, reduce) down to a single value. That means you can use expressions anywhere in <span style=\"\">Python</span> <span style=\"\">code</span> that you could also use a value.",
	"basic-intro_key11": "In the previous example, 2 + 2 is evaluated down to a single value, 4. A single value with no <span style=\"\">operators</span> is also considered an expression, though it evaluates only to itself, as shown here:",
	"basic-intro_key12": "2<br><span style=\"\">Errors</span> are Okay!",
	"basic-intro_key13": "Programs will crash if they contain <span style=\"\">code</span> the computer can’t understand, which will cause <span style=\"\">Python</span> to show an <span style=\"\">error</span> message. An <span style=\"\">error</span> message won’t break your computer, though, so don’t be afraid to make mistakes. A crash just means the program stopped running unexpectedly.",
	"basic-intro_key14": "If you want to know more about an <span style=\"\">error</span> message, you can search for the exact message text online to find out more about that specific <span style=\"\">error</span>. You can also check out the resources at <span><a href=\"http://nostarch.com/automatestuff/\">http://nostarch.com/automatestuff/</a></span> to see a list of common <span style=\"\">Python</span> <span style=\"\">error</span> messages and their meanings.",
	"basic-intro_key15": "There are plenty of other <span style=\"\">operators</span> you can use in <span style=\"\">Python</span> expressions, too. For example, <span style=\"\">Tab</span>le 1-1 lists all the math <span style=\"\">operators</span> in <span style=\"\">Python</span>.",
	"basic-intro_key16": "<span style=\"\">Tab</span>le 1-1. Math <span style=\"\">Operators</span> from Highest to Lowest Precedence",
	"basic-intro_key17": "`Operator",
	"basic-intro_key18": "**",
	"basic-intro_key19": "%",
	"basic-intro_key20": "//",
	"basic-intro_key21": "*",
	"basic-intro_key22": "-",
	"basic-intro_key23": "+",
	"basic-intro_key24": "Operation",
	"basic-intro_key25": "Exponent",
	"basic-intro_key26": "Modules/remainder",
	"basic-intro_key27": "integer division/foored quotient",
	"basic-intro_key28": "Multiplication",
	"basic-intro_key29": "Subtraction",
	"basic-intro_key30": "Addition",
	"basic-intro_key31": "ExampleEvaluates to…",
	"basic-intro_key32": "2**3 = 8",
	"basic-intro_key33": "2%8 = 6",
	"basic-intro_key34": "22//8 = 2",
	"basic-intro_key35": "3*5 = 15",
	"basic-intro_key36": "5-2 = 3",
	"basic-intro_key37": "2+2 = 4",
	"basic-intro_key38": "The order of operations (also called precedence) of <span style=\"\">Python</span> math <span style=\"\">operators</span> is similar to that of mathematics. The ** <span style=\"\">operator</span> is evaluated first; the *, /, //, and % <span style=\"\">operators</span> are evaluated next, from left to right; and the + and - <span style=\"\">operators</span> are evaluated last (also from left to right). You can use parentheses to override the usual precedence if you need to. Enter the following expressions into the interactive <span style=\"\">shell</span>",
	"basic-intro_key39": "20",
	"basic-intro_key40": "30",
	"basic-intro_key41": "28093077826734",
	"basic-intro_key42": "256",
	"basic-intro_key43": "3.2857142857142856",
	"basic-intro_key44": "3",
	"basic-intro_key45": "2",
	"basic-intro_key46": "4",
	"basic-intro_key47": "16.0",
	"basic-intro_key48": "In each case, you as the programmer must enter the expression, but <span style=\"\">Python</span> does the hard part of evaluating it down to a single value. <span style=\"\">Python</span> will keep evaluating parts of the expression until it becomes a single value, as shown in Figure 1-1.",
	"basic-intro_key49": "Figure 1-1. Evaluating an expression reduces it to a single value.",
	"basic-intro_key50": "These rules for putting <span style=\"\">operators</span> and values together to form expressions are a fundamental part of <span style=\"\">Python</span> as a programming language, just like the grammar rules that help us communicate. Here’s an example:",
	"basic-intro_key51": "This is a grammatically correct English sentence.",
	"basic-intro_key52": "This grammatically is sentence not English correct a.",
	"basic-intro_key53": "The second line is difficult to parse because it doesn’t follow the rules of English. Similarly, if you type in a bad <span style=\"\">Python</span> instruction, <span style=\"\">Python</span> won’t be able to understand it and will display a <span style=\"\">SyntaxE</span>rror <span style=\"\">error</span> message, as shown here:",
	"basic-intro_key54": "You can always test to see whether an instruction works by typing it into the interactive <span style=\"\">shell</span>. Don’t worry about breaking the computer: The worst thing that could happen is that <span style=\"\">Python</span> responds with an <span style=\"\">error</span> message. Professional software developers get <span style=\"\">error</span> messages while writing <span style=\"\">code</span> all the time.",
	"basic-intro_key55": "The <span style=\"\">Integer</span>, <span style=\"\">Float</span>ing-Point, and <span style=\"\">String</span> Data Types",
	"basic-intro_key56": "Remember that expressions are just values combined with <span style=\"\">operators</span>, and they always evaluate down to a single value. A data type is a category for values, and every value belongs to exactly one data type. The most common data types in <span style=\"\">Python</span> are listed in <span style=\"\">Tab</span>le 1-2. The values -2 and 30, for example, are said to be <span style=\"\">integer</span> values. The <span style=\"\">integer</span> (or int) data type indicates values that are whole numbers. Numbers with a decimal point, such as 3.14, are called <span style=\"\">float</span>ing-point numbers (or <span style=\"\">floats</span>). Note that even though the value 42 is an <span style=\"\">integer</span>, the value 42.0 would be a <span style=\"\">float</span>ing-point number.",
	"basic-intro_key57": "<span style=\"\">Tab</span>le 1-2. Common Data Types",
	"basic-intro_key58": "Data type",
	"basic-intro_key59": "Integers",
	"basic-intro_key60": "Floating-point numbers",
	"basic-intro_key61": "Strings",
	"basic-intro_key62": "Examples",
	"basic-intro_key63": "-2, -1, 0, 1, 2, 3, 4, 5",
	"basic-intro_key64": "-1.25, -1.0, --0.5, 0.0, 0.5, 1.0, 1.25",
	"basic-intro_key65": "'a', 'aa', 'aaa', 'Hello!', '11 cats'",
	"basic-intro_key66": "<span style=\"\">Python</span> programs can also have text values called <span style=\"\">strings</span>, or strs (pronounced “stirs”). Always surround your <span style=\"\">string</span> in single quote (') characters (as in 'Hello' or 'Goodbye cruel world!') so <span style=\"\">Python</span> knows where the <span style=\"\">string</span> begins and ends. You can even have a <span style=\"\">string</span> with no characters in it, '', called a blank <span style=\"\">string</span>. <span style=\"\">Strings</span> are explained in greater detail in Chapter 4.",
	"basic-intro_key67": "If you ever see the <span style=\"\">error</span> message <span style=\"\">SyntaxE</span>rror: EOL while scanning <span style=\"\">string</span> literal, you probably forgot the final single quote character at the end of the <span style=\"\">string</span>, such as in this example:",
	"basic-intro_key68": "<span style=\"\">String</span> Concatenation and Replication",
	"basic-intro_key69": "The meaning of an <span style=\"\">operator</span> may change based on the data types of the values next to it. For example, + is the addition <span style=\"\">operator</span> when it operates on two <span style=\"\">integers</span> or <span style=\"\">float</span>ing-point values. However, when + is used on two <span style=\"\">string</span> values, it joins the <span style=\"\">strings</span> as the <span style=\"\">string</span> concatenation <span style=\"\">operator</span>. Enter the following into the interactive <span style=\"\">shell</span>:",
	"basic-intro_key70": "'AliceBob'<br>The expression evaluates down to a single, new <span style=\"\">string</span> value that combines the text of the two <span style=\"\">strings</span>. However, if you try to use the + <span style=\"\">operator</span> on a <span style=\"\">string</span> and an <span style=\"\">integer</span> value, <span style=\"\">Python</span> will not know how to handle this, and it will display an <span style=\"\">error</span> message.",
	"basic-intro_key71": "Traceback (most recent call last):<br>  <span style=\"\">File</span> \"<py<span style=\"\">shell</span>#26>\", line 1, in <module><br>    'Alice' + 42<br>Type<span style=\"\">Error</span>: Can't convert 'int' object to str implicitly<br>The <span style=\"\">error</span> message Can't convert 'int' object to str implicitly means that <span style=\"\">Python</span> thought you were trying to concatenate an <span style=\"\">integer</span> to the <span style=\"\">string</span> 'Alice'. Your <span style=\"\">code</span> will have to explicitly convert the <span style=\"\">integer</span> to a <span style=\"\">string</span>, because <span style=\"\">Python</span> cannot do this automatically. (Converting data types will be explained in Dissecting Your Program when talking about the str(), int(), and <span style=\"\">float</span>() functions.)",
	"basic-intro_key72": "The * <span style=\"\">operator</span> is used for multiplication when it operates on two <span style=\"\">integer</span> or <span style=\"\">float</span>ing-point values. But when the * <span style=\"\">operator</span> is used on one <span style=\"\">string</span> value and one <span style=\"\">integer</span> value, it becomes the <span style=\"\">string</span> replication <span style=\"\">operator</span>. Enter a <span style=\"\">string</span> multiplied by a number into the interactive <span style=\"\">shell</span> to see this in action.",
	"basic-intro_key73": "'AliceAliceAliceAliceAlice'<br>The expression evaluates down to a single <span style=\"\">string</span> value that repeats the original a number of times equal to the <span style=\"\">integer</span> value. <span style=\"\">String</span> replication is a useful trick, but it’s not used as often as <span style=\"\">string</span> concatenation.",
	"basic-intro_key74": "The * <span style=\"\">operator</span> can be used with only two numeric values (for multiplication) or one <span style=\"\">string</span> value and one <span style=\"\">integer</span> value (for <span style=\"\">string</span> replication). Otherwise, <span style=\"\">Python</span> will just display an <span style=\"\">error</span> message.",
	"basic-intro_key75": "Traceback (most recent call last):<br>  <span style=\"\">File</span> \"<py<span style=\"\">shell</span>#32>\", line 1, in <module><br>    'Alice' * 'Bob'<br>Type<span style=\"\">Error</span>: can't multiply sequence by non-int of type 'str'",
	"basic-intro_key76": "Traceback (most recent call last):<br>  <span style=\"\">File</span> \"<py<span style=\"\">shell</span>#33>\", line 1, in <module><br>    'Alice' * 5.0<br>Type<span style=\"\">Error</span>: can't multiply sequence by non-int of type '<span style=\"\">float</span>'<br>It makes sense that <span style=\"\">Python</span> wouldn’t understand these expressions: You can’t multiply two words, and it’s hard to replicate an arbitrary <span style=\"\">string</span> a fractional number of times.",
	"basic-intro_key77": "<blockquote>\n  'Hello world!<br>\n</blockquote>",
	"basic-intro_key78": "<span style=\"\">SyntaxE</span>rror: EOL while scanning <span style=\"\">string</span> literal",
	"basic-intro_key79": "<span style=\"\">Variable</span> Names",
	"basic-intro_key80": "Valid `variable names",
	"basic-intro_key81": "balance",
	"basic-intro_key82": "currentBalance",
	"basic-intro_key83": "current_balance",
	"basic-intro_key84": "spam",
	"basic-intro_key85": "SPAM",
	"basic-intro_key86": "account4",
	"basic-intro_key87": "Invalid `variable names",
	"basic-intro_key88": "current-balance (hyphens are not allowed)",
	"basic-intro_key89": "current balance (spaces are not allowed)",
	"basic-intro_key90": "4account (can’t begin with a number)",
	"basic-intro_key91": "42 (can’t begin with a number)",
	"basic-intro_key92": "total_$um (special characters like $ are not allowed)",
	"basic-intro_key93": "'hello' (special characters like ' are not allowed)",
	"basic-intro_key94": "<span style=\"\">Variable</span> names are case-sensitive, meaning that spam, SPAM, Spam, and sPaM are four different <span style=\"\">variables</span>. It is a <span style=\"\">Python</span> convention to start your <span style=\"\">variables</span> with a lowercase letter.",
	"basic-intro_key95": "This book uses camelcase for <span style=\"\">variable</span> names instead of underscores; that is, <span style=\"\">variables</span> lookLikeThis instead of looking<i>like</i>this. Some experienced programmers may point out that the official <span style=\"\">Python</span> <span style=\"\">code</span> style, PEP 8, says that underscores should be used. I unapologetically prefer camelcase and point to “A Foolish Consistency Is the Hobgoblin of Little Minds” in PEP 8 itself:",
	"basic-intro_key96": "“Consistency with the style guide is important. But most importantly: know when to be inconsistent—sometimes the style guide just doesn’t apply. When in doubt, use your best judgment.”",
	"basic-intro_key97": "A good <span style=\"\">variable</span> name describes the data it contains. Imagine that you moved to a new house and labeled all of your moving boxes as Stuff. You’d never find anything! The <span style=\"\">variable</span> names spam, eggs, and bacon are used as generic names for the examples in this book and in much of <span style=\"\">Python</span>’s documentation (inspired by the Monty <span style=\"\">Python</span> “Spam” sketch), but in your programs, a descriptive name will help make your <span style=\"\">code</span> more readable.",
	"basic-intro_key98": "While the interactive <span style=\"\">shell</span> is good for running <span style=\"\">Python</span> instructions one at a time, to write entire <span style=\"\">Python</span> programs, you’ll type the instructions into the <span style=\"\">file</span> <span style=\"\">editor</span>. The <span style=\"\">file</span> <span style=\"\">editor</span> is similar to text <span style=\"\">editors</span> such as Notepad or TextMate, but it has some specific features for typing in source <span style=\"\">code</span>. To open the <span style=\"\">file</span> <span style=\"\">editor</span> in IDLE, select <span style=\"\">File</span>▸New <span style=\"\">File</span>.",
	"basic-intro_key99": "The window that appears should contain a cursor awaiting your <span style=\"\">input</span>, but it’s different from the interactive <span style=\"\">shell</span>, which runs <span style=\"\">Python</span> instructions as soon as you press ENTER. The <span style=\"\">file</span> <span style=\"\">editor</span> lets you type in many instructions, <span style=\"\">save</span> the <span style=\"\">file</span>, and run the program. Here’s how you can tell the difference between the two:",
	"basic-intro_key100": "The interactive shell window will always be the one with the &gt;&gt;&gt; prompt.",
	"basic-intro_key101": "The file editor window will not have the &gt;&gt;&gt; prompt.",
	"basic-intro_key102": "Now it’s time to create your first program! When the <span style=\"\">file</span> <span style=\"\">editor</span> window opens, type the following into it:",
	"basic-intro_key103": "❶ # This program says hello and asks for my name.",
	"basic-intro_key104": "❷ print('Hello world!')<br>   print('What is your name?')    # ask for their name<br>③ myName = <span style=\"\">input</span>()<br>④ print('It is good to meet you, ' + myName)<br>⑤ print('The length of your name is:')<br>   print(len(myName))<br>⑥ print('What is your age?')    # ask for their age<br>   myAge = <span style=\"\">input</span>()<br>   print('You will be ' + str(int(myAge) + 1) + ' in a year.')<br>Once you’ve entered your source <span style=\"\">code</span>, <span style=\"\">save</span> it so that you won’t have to retype it each time you start IDLE. From the menu at the top of the <span style=\"\">file</span> <span style=\"\">editor</span> window, select <span style=\"\">File</span>▸<span style=\"\">Save</span> As. In the <span style=\"\">Save</span> As window, enter hello.py in the <span style=\"\">File</span> Name field and then click <span style=\"\">Save</span>.",
	"basic-intro_key105": "You should <span style=\"\">save</span> your programs every once in a while as you type them. That way, if the computer crashes or you accidentally exit from IDLE, you won’t lose the <span style=\"\">code</span>. As a shortcut, you can press CTRL-S on Windows and Linux or ⌘-S on OS X to <span style=\"\">save</span> your <span style=\"\">file</span>.",
	"basic-intro_key106": "Once you’ve <span style=\"\">save</span>d, let’s run our program. Select Run▸Run Module or just press the F5 <span style=\"\">key</span>. Your program should run in the interactive <span style=\"\">shell</span> window that appeared when you first started IDLE. Remember, you have to press F5 from the <span style=\"\">file</span> <span style=\"\">editor</span> window, not the interactive <span style=\"\">shell</span> window. Enter your name when your program asks for it. The program’s <span style=\"\">output</span> in the interactive <span style=\"\">shell</span> should look something like this:",
	"basic-intro_key107": "<span style=\"\">Python</span> 3.3.2 (v3.3.2:d047928ae3f6, May 16 2013, 00:06:53) [MSC v.1600 64 bit<br>(AMD64)] on win32<br>Type \"copyright\", \"credits\" or \"license()\" for more information.",
	"basic-intro_key108": "<span style=\"\">Python</span> 3.3.2 (v3.3.2:d047928ae3f6, May 16 2013, 00:06:53) [MSC v.1600 64 bit<br>(AMD64)] on win32<br>Type \"copyright\", \"credits\" or \"license()\" for more information.",
	"basic-intro_key109": "Hello world!<br>What is your name?<br>Al<br>It is good to meet you, Al<br>The length of your name is:<br>2<br>What is your age?<br>4<br>You will be 5 in a year.",
	"basic-intro_key110": "When there are no more lines of <span style=\"\">code</span> to <span style=\"\">execute</span>, the <span style=\"\">Python</span> program terminates; that is, it stops running. (You can also say that the <span style=\"\">Python</span> program exits.)",
	"basic-intro_key111": "You can close the <span style=\"\">file</span> <span style=\"\">editor</span> by clicking the X at the top of the window. To reload a <span style=\"\">save</span>d program, select <span style=\"\">File</span>▸Open from the menu. Do that now, and in the window that appears, choose hello.py, and click the Open button. Your previously <span style=\"\">save</span>d hello.py program should open in the <span style=\"\">file</span> <span style=\"\">editor</span> window.",
	"basic-intro_key112": "The print() Function",
	"basic-intro_key113": "The print() function displays the <span style=\"\">string</span> value inside the parentheses on the screen.",
	"basic-intro_key114": "❷ print('Hello world!')<br>   print('What is your name?') # ask for their name<br>The line print('Hello world!') means “Print out the text in the <span style=\"\">string</span> 'Hello world!'.” When <span style=\"\">Python</span> <span style=\"\">executes</span> this line, you say that <span style=\"\">Python</span> is calling the print() function and the <span style=\"\">string</span> value is being passed to the function. A value that is passed to a function call is an argument. Notice that the quotes are not printed to the screen. They just mark where the <span style=\"\">string</span> begins and ends; they are not part of the <span style=\"\">string</span> value.",
	"basic-intro_key115": "Note<br>You can also use this function to put a blank line on the screen; just call print() with nothing in between the parentheses.",
	"basic-intro_key116": "When writing a function name, the opening and closing parentheses at the end identify it as the name of a function. This is why in this book you’ll see print() rather than print. Chapter 2 describes functions in more detail.",
	"basic-intro_key117": "The <span style=\"\">input</span>() Function<br>The <span style=\"\">input</span>() function waits for the user to type some text on the <span style=\"\">key</span>board and press ENTER.",
	"basic-intro_key118": "③ myName = <span style=\"\">input</span>()<br>This function call evaluates to a <span style=\"\">string</span> equal to the user’s text, and the previous line of <span style=\"\">code</span> assigns the myName <span style=\"\">variable</span> to this <span style=\"\">string</span> value.",
	"basic-intro_key119": "You can think of the <span style=\"\">input</span>() function call as an expression that evaluates to whatever <span style=\"\">string</span> the user typed in. If the user entered 'Al', then the expression would evaluate to myName = 'Al'.",
	"basic-intro_key120": "Printing the User’s Name<br>The following call to print() actually contains the expression 'It is good to meet you, ' + myName between the parentheses.",
	"basic-intro_key121": "④ print('It is good to meet you, ' + myName)<br>Remember that expressions can always evaluate to a single value. If 'Al' is the value stored in myName on the previous line, then this expression evaluates to 'It is good to meet you, Al'. This single <span style=\"\">string</span> value is then passed to print(), which prints it on the screen.",
	"basic-intro_key122": "The len() Function<br>You can pass the len() function a <span style=\"\">string</span> value (or a <span style=\"\">variable</span> containing a <span style=\"\">string</span>), and the function evaluates to the <span style=\"\">integer</span> value of the number of characters in that <span style=\"\">string</span>.",
	"basic-intro_key123": "⑤ print('The length of your name is:')<br>   print(len(myName))<br>Enter the following into the interactive <span style=\"\">shell</span> to try this:",
	"basic-intro_key124": "5",
	"basic-intro_key125": "46",
	"basic-intro_key126": "0<br>Just like those examples, len(myName) evaluates to an <span style=\"\">integer</span>. It is then passed to print() to be displayed on the screen. Notice that print() allows you to pass it either <span style=\"\">integer</span> values or <span style=\"\">string</span> values. But notice the <span style=\"\">error</span> that shows up when you type the following into the interactive <span style=\"\">shell</span>:",
	"basic-intro_key127": "<blockquote>\n  print('I am ' + 29 + ' years old.')<br>Traceback (most recent call last):<br>  <span style=\"\">File</span> \"<py<span style=\"\">shell</span>#6>\", line 1, in <module><br>    print('I am ' + 29 + ' years old.')<br>Type<span style=\"\">Error</span>: Can't convert 'int' object to str implicitly<br>The print() function isn’t causing that <span style=\"\">error</span>, but rather it’s the expression you tried to pass to print(). You get the same <span style=\"\">error</span> message if you type the expression into the interactive <span style=\"\">shell</span> on its own.<br>\n</blockquote>",
	"basic-intro_key128": "Traceback (most recent call last):<br>  <span style=\"\">File</span> \"<py<span style=\"\">shell</span>#7>\", line 1, in <module><br>    'I am ' + 29 + ' years old.'<br>Type<span style=\"\">Error</span>: Can't convert 'int' object to str implicitly<br><span style=\"\">Python</span> gives an <span style=\"\">error</span> because you can use the + <span style=\"\">operator</span> only to add two <span style=\"\">integers</span> together or concatenate two <span style=\"\">strings</span>. You can’t add an <span style=\"\">integer</span> to a <span style=\"\">string</span> because this is ungrammatical in <span style=\"\">Python</span>. You can fix this by using a <span style=\"\">string</span> version of the <span style=\"\">integer</span> instead, as explained in the next section.",
	"basic-intro_key129": "The str(), int(), and <span style=\"\">float</span>() Functions<br>If you want to concatenate an <span style=\"\">integer</span> such as 29 with a <span style=\"\">string</span> to pass to print(), you’ll need to get the value '29', which is the <span style=\"\">string</span> form of 29. The str() function can be passed an <span style=\"\">integer</span> value and will evaluate to a <span style=\"\">string</span> value version of it, as follows:",
	"basic-intro_key130": "'29'",
	"basic-intro_key131": "I am 29 years old.<br>Because str(29) evaluates to '29', the expression 'I am ' + str(29) + ' years old.' evaluates to 'I am ' + '29' + ' years old.', which in turn evaluates to 'I am 29 years old.'. This is the value that is passed to the print() function.",
	"basic-intro_key132": "The str(), int(), and <span style=\"\">float</span>() functions will evaluate to the <span style=\"\">string</span>, <span style=\"\">integer</span>, and <span style=\"\">float</span>ing-point forms of the value you pass, respectively. Try converting some values in the interactive <span style=\"\">shell</span> with these functions, and watch what happens.",
	"basic-intro_key133": "'0'",
	"basic-intro_key134": "'-3.14'",
	"basic-intro_key135": "42",
	"basic-intro_key136": "-99",
	"basic-intro_key137": "1",
	"basic-intro_key138": "1",
	"basic-intro_key139": "3.14",
	"basic-intro_key140": "10.0<br>The previous examples call the str(), int(), and <span style=\"\">float</span>() functions and pass them values of the other data types to obtain a <span style=\"\">string</span>, <span style=\"\">integer</span>, or <span style=\"\">float</span>ing-point form of those values.",
	"basic-intro_key141": "The str() function is handy when you have an <span style=\"\">integer</span> or <span style=\"\">float</span> that you want to concatenate to a <span style=\"\">string</span>. The int() function is also helpful if you have a number as a <span style=\"\">string</span> value that you want to use in some mathematics. For example, the <span style=\"\">input</span>() function always returns a <span style=\"\">string</span>, even if the user enters a number. Enter spam = <span style=\"\">input</span>() into the interactive <span style=\"\">shell</span> and enter 101 when it waits for your text.",
	"basic-intro_key142": "101",
	"basic-intro_key143": "'101'<br>The value stored inside spam isn’t the <span style=\"\">integer</span> 101 but the <span style=\"\">string</span> '101'. If you want to do math using the value in spam, use the int() function to get the <span style=\"\">integer</span> form of spam and then store this as the new value in spam.",
	"basic-intro_key144": "101<br>Now you should be able to treat the spam <span style=\"\">variable</span> as an <span style=\"\">integer</span> instead of a <span style=\"\">string</span>.",
	"basic-intro_key145": "202.0<br>Note that if you pass a value to int() that it cannot evaluate as an <span style=\"\">integer</span>, <span style=\"\">Python</span> will display an <span style=\"\">error</span> message.",
	"basic-intro_key146": "Traceback (most recent call last):<br>  <span style=\"\">File</span> \"<py<span style=\"\">shell</span>#18>\", line 1, in <module><br>    int('99.99')<br>Value<span style=\"\">Error</span>: invalid literal for int() with base 10: '99.99'",
	"basic-intro_key147": "Traceback (most recent call last):<br>  <span style=\"\">File</span> \"<py<span style=\"\">shell</span>#19>\", line 1, in <module><br>    int('twelve')<br>Value<span style=\"\">Error</span>: invalid literal for int() with base 10: 'twelve'<br>The int() function is also useful if you need to round a <span style=\"\">float</span>ing-point number down. If you want to round a <span style=\"\">float</span>ing-point number up, just add 1 to it afterward.",
	"basic-intro_key148": "7",
	"basic-intro_key149": "8<br>In your program, you used the int() and str() functions in the last three lines to get a value of the appropriate data type for the <span style=\"\">code</span>.",
	"basic-intro_key150": "⑥ print('What is your age?') # ask for their age<br>   myAge = <span style=\"\">input</span>()<br>   print('You will be ' + str(int(myAge) + 1) + ' in a year.')<br>The myAge <span style=\"\">variable</span> contains the value returned from <span style=\"\">input</span>(). Because the <span style=\"\">input</span>() function always returns a <span style=\"\">string</span> (even if the user typed in a number), you can use the int(myAge) <span style=\"\">code</span> to return an <span style=\"\">integer</span> value of the <span style=\"\">string</span> in myAge. This <span style=\"\">integer</span> value is then added to 1 in the expression int(myAge) + 1.",
	"basic-intro_key151": "The result of this addition is passed to the str() function: str(int(myAge) + 1). The <span style=\"\">string</span> value returned is then concatenated with the <span style=\"\">strings</span> 'You will be ' and ' in a year.' to evaluate to one large <span style=\"\">string</span> value. This large <span style=\"\">string</span> is finally passed to print() to be displayed on the screen.",
	"basic-intro_key152": "Let’s say the user enters the <span style=\"\">string</span> '4' for myAge. The <span style=\"\">string</span> '4' is converted to an <span style=\"\">integer</span>, so you can add one to it. The result is 5. The str() function converts the result back to a <span style=\"\">string</span>, so you can concatenate it with the second <span style=\"\">string</span>, 'in a year.', to create the final message. These evaluation steps would look something like Figure 1-4.",
	"basic-intro_key153": "Text and Number Equivalence",
	"basic-intro_key154": "Although the <span style=\"\">string</span> value of a number is considered a completely different value from the <span style=\"\">integer</span> or <span style=\"\">float</span>ing-point version, an <span style=\"\">integer</span> can be equal to a <span style=\"\">float</span>ing point.",
	"basic-intro_key155": "<span style=\"\">False</span>",
	"basic-intro_key156": "<span style=\"\">True</span>",
	"basic-intro_key157": "<span style=\"\">True</span><br><span style=\"\">Python</span> makes this distinction because <span style=\"\">strings</span> are text, while <span style=\"\">integers</span> and <span style=\"\">floats</span> are both numbers.",
	"basic-intro_key158": "Practice Questions",
	"basic-intro_key159": "Q:",
	"basic-intro_key160": "Which of the following are operators, and which are values?",
	"basic-intro_key161": "*<br>'hello'<br>-88.8<br>-<br>/<br>+<br>5<br>Q:",
	"basic-intro_key162": "Which of the following is a variable, and which is a string?",
	"basic-intro_key163": "spam<br>'spam'<br>Q:",
	"basic-intro_key164": "Name three data types.",
	"basic-intro_key165": "Q:",
	"basic-intro_key166": "What is an expression made up of? What do all expressions do?",
	"basic-intro_key167": "Q:",
	"basic-intro_key168": "This chapter introduced assignment statements, like spam = 10. What is the difference between an expression and a statement?",
	"basic-intro_key169": "Q:",
	"basic-intro_key170": "What does the variable bacon contain after the following code runs?",
	"basic-intro_key171": "bacon = 20<br>bacon + 1<br>Q:",
	"basic-intro_key172": "What should the following two expressions evaluate to?",
	"basic-intro_key173": "'spam' + 'spamspam'<br>'spam' * 3<br>Q:",
	"basic-intro_key174": "Why is eggs a valid variable name while 100 is invalid?",
	"basic-intro_key175": "Q:",
	"basic-intro_key176": "What three functions can be used to get the integer, floating-point number, or string version of a value?",
	"basic-intro_key177": "Q:",
	"basic-intro_key178": "Why does this expression cause an error? How can you fix it?",
	"basic-intro_key179": "'I have eaten ' + 99 + ' burritos.'<br>Extra credit: Search online for the <span style=\"\">Python</span> documentation for the len() function. It will be on a web page titled “Built-in Functions.” Skim the list of other functions <span style=\"\">Python</span> has, look up what the round() function does, and experiment with it in the interactive <span style=\"\">shell</span>."
}