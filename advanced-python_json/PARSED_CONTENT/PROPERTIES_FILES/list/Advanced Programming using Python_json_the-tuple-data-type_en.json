{
	"the-tuple-data-type_key1": "The Tuple Data Type",
	"the-tuple-data-type_key2": "The tuple data type is almost identical to the list data type, except in two ways. First, tuples are typed with parentheses, ( and ), instead of square brackets, [ and ]. For example, enter the following into the interactive <span style=\"\">shell</span>:",
	"the-tuple-data-type_key3": "But the main way that tuples are different from lists is that tuples, like <span style=\"\">strings</span>, are immu<span style=\"\">tab</span>le. Tuples cannot have their values modified, appended, or removed. Enter the following into the interactive <span style=\"\">shell</span>, and look at the Type<span style=\"\">Error</span> <span style=\"\">error</span> message:",
	"the-tuple-data-type_key4": "If you have only one value in your tuple, you can indicate this by placing a trailing comma after the value inside the parentheses. Otherwise, <span style=\"\">Python</span> will think you’ve just typed a value inside regular parentheses. The comma is what lets <span style=\"\">Python</span> know this is a tuple value. (Unlike some other programming languages, in <span style=\"\">Python</span> it’s fine to have a trailing comma after the last item in a list or tuple.) Enter the following type() function calls into the interactive <span style=\"\">shell</span> to see the distinction:",
	"the-tuple-data-type_key5": "<class 'tuple'>",
	"the-tuple-data-type_key6": "<class 'str'><br>You can use tuples to convey to anyone reading your <span style=\"\">code</span> that you don’t intend for that sequence of values to change. If you need an ordered sequence of values that never changes, use a tuple. A second benefit of using tuples instead of lists is that, because they are immu<span style=\"\">tab</span>le and their contents don’t change, <span style=\"\">Python</span> can implement some optimizations that make <span style=\"\">code</span> using tuples slightly faster than <span style=\"\">code</span> using lists."
}