{
	"controlling-the-keyboard_key1": "Controlling the <span style=\"\">Key</span>board",
	"controlling-the-keyboard_key2": "PyAutoGUI also has functions for sending virtual <span style=\"\">key</span>presses to your computer, which enables you to fill out forms or enter text into <span style=\"\">applications</span>.",
	"controlling-the-keyboard_key3": "Sending a <span style=\"\">String</span> from the <span style=\"\">Key</span>board",
	"controlling-the-keyboard_key4": "The pyautogui.typewrite() function sends virtual <span style=\"\">key</span>presses to the computer. What these <span style=\"\">key</span>presses do depends on what window and text field have focus. You may want to first send a mouse click to the text field you want in order to ensure that it has focus.",
	"controlling-the-keyboard_key5": "As a simple example, let’s use <span style=\"\">Python</span> to automatically type the words Hello world! into a <span style=\"\">file</span> <span style=\"\">editor</span> window. First, open a new <span style=\"\">file</span> <span style=\"\">editor</span> window and position it in the upper-left corner of your screen so that PyAutoGUI will click in the right place to bring it into focus. Next, enter the following into the interactive <span style=\"\">shell</span>:",
	"controlling-the-keyboard_key6": "Notice how placing two commands on the same line, separated by a semicolon, keeps the interactive <span style=\"\">shell</span> from prompting you for <span style=\"\">input</span> between running the two instructions. This prevents you from accidentally bringing a new window into focus between the click() and typewrite() calls, which would mess up the example.",
	"controlling-the-keyboard_key7": "<span style=\"\">Python</span> will first send a virtual mouse click to the coordinates (100, 100), which should click the <span style=\"\">file</span> <span style=\"\">editor</span> window and put it in focus. The typewrite() call will send the text Hello world! to the window, making it look like Figure 18-3. You now have <span style=\"\">code</span> that can type for you!",
	"controlling-the-keyboard_key8": "Figure 18-3. Using PyAutogGUI to click the <span style=\"\">file</span> <span style=\"\">editor</span> window and type Hello world! into it",
	"controlling-the-keyboard_key9": "By default, the typewrite() function will type the full <span style=\"\">string</span> instantly. However, you can pass an optional second argument to add a short pause between each character. This second argument is an <span style=\"\">integer</span> or <span style=\"\">float</span> value of the number of seconds to pause. For example, pyautogui.typewrite('Hello world!', 0.25) will wait a quarter-second after typing H, another quarter-second after e, and so on. This gradual typewriter effect may be useful for slower <span style=\"\">applications</span> that can’t process <span style=\"\">keys</span>trokes fast enough to keep up with PyAutoGUI.",
	"controlling-the-keyboard_key10": "For characters such as A or !, PyAutoGUI will automatically simulate holding down the SHIFT <span style=\"\">key</span> as well."
}