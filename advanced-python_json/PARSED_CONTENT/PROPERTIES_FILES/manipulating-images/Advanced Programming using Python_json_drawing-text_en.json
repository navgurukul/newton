{
	"drawing-text_key1": "Drawing Text",
	"drawing-text_key2": "The ImageDraw object also has a text() method for drawing text onto an image. The text() method takes four arguments: xy, text, fill, and font.",
	"drawing-text_key3": "The xy argument is a two-<span style=\"\">integer</span> tuple specifying the upper-left corner of the text box.",
	"drawing-text_key4": "The text argument is the <span style=\"\">string</span> of text you want to write.",
	"drawing-text_key5": "The optional fill argument is the color of the text.",
	"drawing-text_key6": "The optional font argument is an ImageFont object, used to set the type-face and size of the text. This is described in more detail in the next section.",
	"drawing-text_key7": "Since it’s often hard to know in advance what size a block of text will be in a given font, the ImageDraw module also offers a textsize() method. Its first argument is the <span style=\"\">string</span> of text you want to measure, and its second argument is an optional ImageFont object. The textsize() method will then return a two-<span style=\"\">integer</span> tuple of the width and height that the text in the given font would be if it were written onto the image. You can use this width and height to help you calculate exactly where you want to put the text on your image.",
	"drawing-text_key8": "The first three arguments for text() are straightforward. Before we use text() to draw text onto an image, let’s look at the optional fourth argument, the ImageFont object.",
	"drawing-text_key9": "Both text() and textsize() take an optional ImageFont object as their final arguments. To create one of these objects, first run the following:",
	"drawing-text_key10": "Now that you’ve imported Pillow’s ImageFont module, you can call the ImageFont.<span style=\"\">true</span>type() function, which takes two arguments. The first argument is a <span style=\"\">string</span> for the font’s <span style=\"\">True</span>Type <span style=\"\">file</span>—this is the actual font <span style=\"\">file</span> that lives on your hard drive. A <span style=\"\">True</span>Type <span style=\"\">file</span> has the .ttf <span style=\"\">file</span> extension and can usually be found in the following folders:",
	"drawing-text_key11": "On Windows: C:\\Windows\\Fonts",
	"drawing-text_key12": "On OS X: /Library/Fonts and /System/Library/Fonts",
	"drawing-text_key13": "On Linux: /usr/share/fonts/<span style=\"\">true</span>type",
	"drawing-text_key14": "You don’t actually need to enter these paths as part of the <span style=\"\">True</span>Type <span style=\"\">file</span> <span style=\"\">string</span> because <span style=\"\">Python</span> knows to automatically search for fonts in these directories. But <span style=\"\">Python</span> will display an <span style=\"\">error</span> if it is unable to find the font you specified.",
	"drawing-text_key15": "The second argument to ImageFont.<span style=\"\">true</span>type() is an <span style=\"\">integer</span> for the font size in points (rather than, say, pixels). Keep in mind that Pillow creates PNG images that are 72 pixels per inch by default, and a point is 1/72 of an inch.",
	"drawing-text_key16": "Enter the following into the interactive <span style=\"\">shell</span>, replacing FONT_FOLDER with the actual folder name your operating system uses:",
	"drawing-text_key17": "After importing Image, ImageDraw, ImageFont, and os, we make an Image object for a new 200×200 white image ❶ and make an ImageDraw object from the Image object ❷. We use text() to draw Hello at (20, 150) in purple ❸. We didn’t pass the optional fourth argument in this text() call, so the typeface and size of this text aren’t customized.",
	"drawing-text_key18": "To set a typeface and size, we first store the folder name (like /Library/Fonts) in fontsFolder. Then we call ImageFont.<span style=\"\">true</span>type(), passing it the .ttf <span style=\"\">file</span> for the font we want, followed by an <span style=\"\">integer</span> font size ❹. Store the Font object you get from ImageFont.<span style=\"\">true</span>type() in a <span style=\"\">variable</span> like arialFont, and then pass the <span style=\"\">variable</span> to text() in the final <span style=\"\">key</span>word argument. The text() call at ❺ draws Howdy at (100, 150) in gray in 32-point Arial.",
	"drawing-text_key19": "The resulting text.png <span style=\"\">file</span> will look like Figure 17-15.",
	"drawing-text_key20": "Figure 17-15. The resulting text.png image",
	"drawing-text_key21": "Summary",
	"drawing-text_key22": "Images consist of a collection of pixels, and each pixel has an RGBA value for its color and its addressable by x- and y-coordinates. Two common image formats are JPEG and PNG. The pillow module can handle both of these image formats and others.",
	"drawing-text_key23": "When an image is loaded into an Image object, its width and height dimensions are stored as a two-<span style=\"\">integer</span> tuple in the size attribute. Objects of the Image data type also have methods for common image manipulations: crop(), copy(), paste(), resize(), rotate(), and transpose(). To <span style=\"\">save</span> the Image object to an image <span style=\"\">file</span>, call the <span style=\"\">save</span>() method.",
	"drawing-text_key24": "If you want your program to draw shapes onto an image, use ImageDraw methods to draw points, lines, rectangles, ellipses, and polygons. The module also provides methods for drawing text in a typeface and font size of your choosing.",
	"drawing-text_key25": "Although advanced (and expensive) <span style=\"\">applications</span> such as Photoshop provide automatic batch processing features, you can use <span style=\"\">Python</span> scripts to do many of the same modifications for free. In the previous chapters, you wrote <span style=\"\">Python</span> programs to deal with plaintext <span style=\"\">files</span>, spreadsheets, PDFs, and other formats. With the pillow module, you’ve extended your programming powers to processing images as well!"
}