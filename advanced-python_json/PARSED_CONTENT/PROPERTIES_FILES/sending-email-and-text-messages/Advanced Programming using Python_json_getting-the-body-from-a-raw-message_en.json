{
	"getting-the-body-from-a-raw-message_key1": "Getting the Body from a Raw Message",
	"getting-the-body-from-a-raw-message_key2": "Emails can be sent as plaintext, HTML, or both. Plaintext emails contain only text, while HTML emails can have colors, fonts, images, and other features that make the email message look like a small web page. If an email is only plaintext, its PyzMessage object will have its html<i>part attributes set to None. Likewise, if an email is only HTML, its PyzMessage object will have its text</i>part attribute set to None.",
	"getting-the-body-from-a-raw-message_key3": "Otherwise, the text<i>part or html</i>part value will have a get<i>payload() method that returns the email’s body as a value of the bytes data type. (The bytes data type is beyond the scope of this book.) But this still isn’t a <span style=\"\">string</span> value that we can use. Ugh! The last step is to call the de<span style=\"\">code</span>() method on the bytes value returned by get</i>payload(). The de<span style=\"\">code</span>() method takes one argument: the message’s character encoding, stored in the text<i>part.charset or html</i>part.charset attribute. This, finally, will return the <span style=\"\">string</span> of the email’s body.",
	"getting-the-body-from-a-raw-message_key4": "Continue the interactive <span style=\"\">shell</span> example by entering the following:",
	"getting-the-body-from-a-raw-message_key5": "<span style=\"\">True</span>",
	"getting-the-body-from-a-raw-message_key6": "❷ 'So long, and thanks for all the fish!\\r\\n\\r\\n-Al\\r\\n'",
	"getting-the-body-from-a-raw-message_key7": "<span style=\"\">True</span>",
	"getting-the-body-from-a-raw-message_key8": "'<div dir=\"ltr\"><div>So long, and thanks for all the fish!<br><br></div>-Al<br>   <br></div>\\r\\n'<br>The email we’re working with has both plaintext and HTML content, so the PyzMessage object stored in message has text<i>part and html</i>part attributes not equal to None ❶ ❸. Calling get<i>payload() on the message’s text</i>part and then calling de<span style=\"\">code</span>() on the bytes value returns a <span style=\"\">string</span> of the text version of the email ❷. Using get<i>payload() and de<span style=\"\">code</span>() with the message’s html</i>part returns a <span style=\"\">string</span> of the HTML version of the email ❹."
}