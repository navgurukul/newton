{
	"saving-downloaded-files-to-the-hard-drive_key1": "Saving Downloaded <span style=\"\">Files</span> to the Hard Drive",
	"saving-downloaded-files-to-the-hard-drive_key2": "From here, you can <span style=\"\">save</span> the web page to a <span style=\"\">file</span> on your hard drive with the standard open() function and write() method. There are some slight differences, though. First, you must open the <span style=\"\">file</span> in write binary mode by passing the <span style=\"\">string</span> 'wb' as the second argument to open(). Even if the page is in plaintext (such as the Romeo and Juliet text you downloaded earlier), you need to write binary data instead of text data in order to maintain the Uni<span style=\"\">code</span> encoding of the text.",
	"saving-downloaded-files-to-the-hard-drive_key3": "Uni<span style=\"\">code</span> Encodings",
	"saving-downloaded-files-to-the-hard-drive_key4": "Uni<span style=\"\">code</span> encodings are beyond the scope of this book, but you can learn more about them from these web pages:",
	"saving-downloaded-files-to-the-hard-drive_key5": "Joel on Software: The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Uni<span style=\"\">code</span> and Character Sets (No Excuses!): <span><a href=\" http://www.joelonsoftware.com/articles/Uni<span style=\"\">code</span>.html\"&gt; http://www.joelonsoftware.com/articles/Uni<span style=\"\">code</span>.html</a></span>",
	"saving-downloaded-files-to-the-hard-drive_key6": "Pragmatic Uni<span style=\"\">code</span>: <span><a href=\"http://nedbatchelder.com/text/unipain.html\">http://nedbatchelder.com/text/unipain.html</a></span>",
	"saving-downloaded-files-to-the-hard-drive_key7": "To write the web page to a <span style=\"\">file</span>, you can use a for <span style=\"\">loop</span> with the Response object’s iter_content() method.",
	"saving-downloaded-files-to-the-hard-drive_key8": "100000<br>78981",
	"saving-downloaded-files-to-the-hard-drive_key9": "The iter<i>content() method returns “chunks” of the content on each iteration through the <span style=\"\">loop</span>. Each chunk is of the bytes data type, and you get to specify how many bytes each chunk will contain. One hundred thousand bytes is generally a good size, so pass 100000 as the argument to iter</i>content().",
	"saving-downloaded-files-to-the-hard-drive_key10": "The <span style=\"\">file</span> RomeoAndJuliet.txt will now exist in the current working directory. Note that while the <span style=\"\">file</span>name on the website was rj.txt, the <span style=\"\">file</span> on your hard drive has a different <span style=\"\">file</span>name. The requests module simply handles downloading the contents of web pages. Once the page is downloaded, it is simply data in your program. Even if you were to lose your Internet connection after downloading the web page, all the page data would still be on your computer.",
	"saving-downloaded-files-to-the-hard-drive_key11": "The write() method returns the number of bytes written to the <span style=\"\">file</span>. In the previous example, there were 100,000 bytes in the first chunk, and the remaining part of the <span style=\"\">file</span> needed only 78,981 bytes.",
	"saving-downloaded-files-to-the-hard-drive_key12": "To review, here’s the complete process for downloading and saving a <span style=\"\">file</span>:",
	"saving-downloaded-files-to-the-hard-drive_key13": "Call requests.get() to download the <span style=\"\">file</span>.",
	"saving-downloaded-files-to-the-hard-drive_key14": "Call open() with 'wb' to create a new <span style=\"\">file</span> in write binary mode.",
	"saving-downloaded-files-to-the-hard-drive_key15": "<span style=\"\">Loop</span> over the Response object’s iter_content() method.",
	"saving-downloaded-files-to-the-hard-drive_key16": "Call write() on each iteration to write the content to the <span style=\"\">file</span>.",
	"saving-downloaded-files-to-the-hard-drive_key17": "Call close() to close the <span style=\"\">file</span>.",
	"saving-downloaded-files-to-the-hard-drive_key18": "That’s all there is to the requests module! The for <span style=\"\">loop</span> and iter_content() stuff may seem complicated compared to the open()/write()/close() workflow you’ve been using to write text <span style=\"\">files</span>, but it’s to ensure that the requests module doesn’t eat up too much memory even if you download massive <span style=\"\">files</span>. You can learn about the requests module’s other features from <span><a href=\"http://requests.readthedocs.org/.\">http://requests.readthedocs.org/.</a></span>"
}