{
	"finding-patterns-of-text-with-regular-expressions_key1": "Finding Patterns of Text with Regular Expressions",
	"finding-patterns-of-text-with-regular-expressions_key2": "The previous phone number–finding program works, but it uses a lot of <span style=\"\">code</span> to do something limited: The isPhoneNumber() function is 17 lines but can find only one pattern of phone numbers. What about a phone number formatted like 415.555.4242 or (415) 555-4242? What if the phone number had an extension, like 415-555-4242 x99? The isPhoneNumber() function would fail to validate them. You could add yet more <span style=\"\">code</span> for these additional patterns, but there is an easier way.",
	"finding-patterns-of-text-with-regular-expressions_key3": "Regular expressions, called regexes for short, are descriptions for a pattern of text. For example, a \\d in a regex stands for a digit character—that is, any single numeral 0 to 9. The regex \\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d is used by <span style=\"\">Python</span> to match the same text the previous isPhoneNumber() function did: a <span style=\"\">string</span> of three numbers, a hyphen, three more numbers, another hyphen, and four numbers. Any other <span style=\"\">string</span> would not match the \\d\\d\\d-\\d\\d\\d-\\d\\d \\d\\d regex.",
	"finding-patterns-of-text-with-regular-expressions_key4": "But regular expressions can be much more sophisticated. For example, adding a 3 in curly brackets ({3}) after a pattern is like saying, “Match this pattern three times.” So the slightly shorter regex \\d{3}-\\d{3}-\\d{4} also matches the correct phone number format.",
	"finding-patterns-of-text-with-regular-expressions_key5": "Creating Regex Objects",
	"finding-patterns-of-text-with-regular-expressions_key6": "All the regex functions in <span style=\"\">Python</span> are in the re module. Enter the following into the interactive <span style=\"\">shell</span> to import this module:",
	"finding-patterns-of-text-with-regular-expressions_key7": "Note<br>Most of the examples that follow in this chapter will require the re module, so remember to import it at the beginning of any script you write or any time you restart IDLE. Otherwise, you’ll get a Name<span style=\"\">Error</span>: name 're' is not defined <span style=\"\">error</span> message.",
	"finding-patterns-of-text-with-regular-expressions_key8": "Passing a <span style=\"\">string</span> value representing your regular expression to re.compile() returns a Regex pattern object (or simply, a Regex object).",
	"finding-patterns-of-text-with-regular-expressions_key9": "To create a Regex object that matches the phone number pattern, enter the following into the interactive <span style=\"\">shell</span>. (Remember that \\d means “a digit character” and \\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d is the regular expression for the correct phone number pattern.)",
	"finding-patterns-of-text-with-regular-expressions_key10": "Now the phoneNumRegex <span style=\"\">variable</span> contains a Regex object.",
	"finding-patterns-of-text-with-regular-expressions_key11": "Passing Raw <span style=\"\">Strings</span> to re.compile( )",
	"finding-patterns-of-text-with-regular-expressions_key12": "Remember that escape characters in <span style=\"\">Python</span> use the backslash (). The <span style=\"\">string</span> value '\\n' represents a single newline character, not a backslash followed by a lowercase n. You need to enter the escape character \\ to print a single backslash. So '\\n' is the <span style=\"\">string</span> that represents a backslash followed by a lowercase n. However, by putting an r before the first quote of the <span style=\"\">string</span> value, you can mark the <span style=\"\">string</span> as a raw <span style=\"\">string</span>, which does not escape characters.",
	"finding-patterns-of-text-with-regular-expressions_key13": "Since regular expressions frequently use backslashes in them, it is convenient to pass raw <span style=\"\">strings</span> to the re.compile() function instead of typing extra backslashes. Typing r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d' is much easier than typing '\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d'.",
	"finding-patterns-of-text-with-regular-expressions_key14": "Matching Regex Objects",
	"finding-patterns-of-text-with-regular-expressions_key15": "A Regex object’s search() method searches the <span style=\"\">string</span> it is passed for any matches to the regex. The search() method will return None if the regex pattern is not found in the <span style=\"\">string</span>. If the pattern is found, the search() method returns a Match object. Match objects have a group() method that will return the actual matched text from the searched <span style=\"\">string</span>. (I’ll explain groups shortly.) For example, enter the following into the interactive <span style=\"\">shell</span>:",
	"finding-patterns-of-text-with-regular-expressions_key16": "Phone number found: 415-555-4242<br>The mo <span style=\"\">variable</span> name is just a generic name to use for Match objects. This example might seem complicated at first, but it is much shorter than the earlier isPhoneNumber.py program and does the same thing.",
	"finding-patterns-of-text-with-regular-expressions_key17": "Here, we pass our desired pattern to re.compile() and store the resulting Regex object in phoneNumRegex. Then we call search() on phoneNumRegex and pass search() the <span style=\"\">string</span> we want to search for a match. The result of the search gets stored in the <span style=\"\">variable</span> mo. In this example, we know that our pattern will be found in the <span style=\"\">string</span>, so we know that a Match object will be returned. Knowing that mo contains a Match object and not the null value None, we can call group() on mo to return the match. Writing mo.group() inside our print <span style=\"\">statement</span> displays the whole match, 415-555-4242.",
	"finding-patterns-of-text-with-regular-expressions_key18": "Review of Regular Expression Matching",
	"finding-patterns-of-text-with-regular-expressions_key19": "While there are several steps to using regular expressions in <span style=\"\">Python</span>, each step is fairly simple.",
	"finding-patterns-of-text-with-regular-expressions_key20": "Import the regex module with import re.",
	"finding-patterns-of-text-with-regular-expressions_key21": "Create a Regex object with the re.compile() function. (Remember to use a raw <span style=\"\">string</span>.)",
	"finding-patterns-of-text-with-regular-expressions_key22": "Pass the <span style=\"\">string</span> you want to search into the Regex object’s search() method. This returns a Match object.",
	"finding-patterns-of-text-with-regular-expressions_key23": "Call the Match object’s group() method to return a <span style=\"\">string</span> of the actual matched text.",
	"finding-patterns-of-text-with-regular-expressions_key24": "Note",
	"finding-patterns-of-text-with-regular-expressions_key25": "While I encourage you to enter the example <span style=\"\">code</span> into the interactive <span style=\"\">shell</span>, you should also make use of web-based regular expression testers, which can show you exactly how a regex matches a piece of text that you enter. I recommend the tester at <span><a href=\"http://regexpal.com/.\">regexpal.com</a></span>"
}