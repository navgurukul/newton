[
	{
		"component": "header",
		"variant": 1,
		"value": "Combining re.IGNORECASE, re.DOTALL, and re.VERBOSE"
	},
	{
		"component": "text",
		"value": "What if you want to use re.VERBOSE to write comments in your regular expression but also want to use re.IGNORECASE to ignore capitalization? Unfortunately, the re.compile() function takes only a single value as its second argument. You can get around this limitation by combining the re.IGNORECASE, re.DOTALL, and re.VERBOSE <span style=\"\">variables</span> using the pipe character (|), which in this context is known as the bitwise or <span style=\"\">operator</span>."
	},
	{
		"component": "text",
		"value": "So if you want a regular expression that’s case-insensitive and includes newlines to match the dot character, you would form your re.compile() call like this:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> someRegexValue = re.compile('foo', re.IGNORECASE | re.DOTALL)"
	},
	{
		"component": "text",
		"value": "All three options for the second argument will look like this:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> someRegexValue = re.compile('foo', re.IGNORECASE | re.DOTALL | re.VERBOSE)"
	},
	{
		"component": "text",
		"value": "This <span style=\"\">syntax</span> is a little old-fashioned and originates from early versions of <span style=\"\">Python</span>. The details of the bitwise <span style=\"\">operators</span> are beyond the scope of this book, but check out the resources at <span><a href=\"http://nostarch.com/automatestuff/\">http://nostarch.com/automatestuff/</a></span> for more information. You can also pass other options for the second argument; they’re uncommon, but you can read more about them in the resources, too."
	}
]