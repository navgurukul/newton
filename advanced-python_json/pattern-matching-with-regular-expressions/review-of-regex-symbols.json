[
	{
		"component": "header",
		"variant": 1,
		"value": "Review of Regex Symbols"
	},
	{
		"component": "text",
		"value": "This chapter covered a lot of notation, so here’s a quick review of what you learned:"
	},
	{
		"component": "text",
		"value": "The ? matches zero or one of the preceding group."
	},
	{
		"component": "text",
		"value": "The * matches zero or more of the preceding group."
	},
	{
		"component": "text",
		"value": "The + matches one or more of the preceding group."
	},
	{
		"component": "text",
		"value": "The {n} matches exactly n of the preceding group."
	},
	{
		"component": "text",
		"value": "The {n,} matches n or more of the preceding group."
	},
	{
		"component": "text",
		"value": "The {,m} matches 0 to m of the preceding group."
	},
	{
		"component": "text",
		"value": "The {n,m} matches at least n and at most m of the preceding group."
	},
	{
		"component": "text",
		"value": "{n,m}? or *? or +? performs a nongreedy match of the preceding group.<br>^spam means the <span style=\"\">string</span> must begin with spam.<br>spam$ means the <span style=\"\">string</span> must end with spam.<br>The . matches any character, except newline characters.<br>\\d, \\w, and \\s match a digit, word, or space character, respectively.<br>\\D, \\W, and \\S match anything except a digit, word, or space character, respectively.<br>[abc] matches any character between the brackets (such as a, b, or c).<br>[^abc] matches any character that isn’t between the brackets.                                                                                                                                                                                                                                                                                       "
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Case-Insensitive Matching"
	},
	{
		"component": "text",
		"value": "Normally, regular expressions match text with the exact casing you specify. For example, the following regexes match completely different <span style=\"\">strings</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> regex1 = re.compile('Robocop')<br>>>> regex2 = re.compile('ROBOCOP')<br>>>> regex3 = re.compile('robOcop')<br>>>> regex4 = re.compile('RobocOp')"
	},
	{
		"component": "text",
		"value": "But sometimes you care only about matching the letters without worrying whether they’re uppercase or lowercase. To make your regex case-insensitive, you can pass re.IGNORECASE or re.I as a second argument to re.compile(). Enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> robocop = re.compile(r'robocop', re.I)<br>>>> robocop.search('Robocop is part man, part machine, all cop.').group()<br>'Robocop'<br><br>>>> robocop.search('ROBOCOP protects the innocent.').group()<br>'ROBOCOP'<br><br>>>> robocop.search('Al, why does your programming book talk about robocop so much?').group()<br>'robocop'"
	}
]