[
	{
		"component": "header",
		"variant": 1,
		"value": "Creating Word Documents with Nondefault Styles"
	},
	{
		"component": "text",
		"value": "If you want to create Word documents that use styles beyond the default ones, you will need to open Word to a blank Word document and create the styles yourself by clicking the New Style button at the bottom of the Styles pane (Figure 13-6 shows this on Windows)."
	},
	{
		"component": "text",
		"value": "This will open the Create New Style from Formatting dialog, where you can enter the new style. Then, go back into the interactive <span style=\"\">shell</span> and open this blank Word document with docx.Document(), using it as the base for your Word document. The name you gave this style will now be available to use with <span style=\"\">Python</span>-Docx."
	},
	{
		"component": "text",
		"value": "Figure 13-6. The New Style button (left) and the Create New Style from Formatting dialog (right)<br>Run Attributes<br>Runs can be further styled using text attributes. Each attribute can be set to one of three values: <span style=\"\">True</span> (the attribute is always enabled, no matter what other styles are applied to the run), <span style=\"\">False</span> (the attribute is always disabled), or None (defaults to whatever the run’s style is set to)."
	},
	{
		"component": "text",
		"value": "<span style=\"\">Tab</span>le 13-1 lists the text attributes that can be set on Run objects."
	},
	{
		"component": "text",
		"value": "<span style=\"\">Tab</span>le 13-1. Run Object text Attributes"
	},
	{
		"component": "text",
		"value": "Attribute                                       Description"
	},
	{
		"component": "text",
		"value": "bold                                            The text appears in bold."
	},
	{
		"component": "text",
		"value": "italic                                            The text appears in italic."
	},
	{
		"component": "text",
		"value": "underlined                                         The text is underlined."
	},
	{
		"component": "text",
		"value": "strike                                          The text appears with strikethrough."
	},
	{
		"component": "text",
		"value": "double_strike                                     The text appears with double strikethrough."
	},
	{
		"component": "text",
		"value": "all_caps                                         The text appears in capital letters."
	},
	{
		"component": "text",
		"value": "small_caps                                        The text appears in capital letters, with lowercase letters two points smaller."
	},
	{
		"component": "text",
		"value": "shadow                                             The text appears with a shadow."
	},
	{
		"component": "text",
		"value": "outline                                         The text appears outlined rather than solid."
	},
	{
		"component": "text",
		"value": "rtl                                             The text is written right-to-left."
	},
	{
		"component": "text",
		"value": "imprint                                         The text appears pressed into the page."
	},
	{
		"component": "text",
		"value": "emboss                                             The text appears raised off the page in relief."
	},
	{
		"component": "text",
		"value": "For example, to change the styles of demo.docx, enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> doc = docx.Document('demo.docx')<br>>>> doc.paragraphs[0].text"
	},
	{
		"component": "text",
		"value": "'Document Title'"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> doc.paragraphs[0].style"
	},
	{
		"component": "text",
		"value": "'Title'"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> doc.paragraphs[0].style = 'Normal'<br>>>> doc.paragraphs[1].text"
	},
	{
		"component": "text",
		"value": "'A plain paragraph with some bold and some italic'"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> (doc.paragraphs[1].runs[0].text, doc.paragraphs[1].runs[1].text, doc."
	},
	{
		"component": "text",
		"value": "paragraphs[1].runs[2].text, doc.paragraphs[1].runs[3].text)<br>('A plain paragraph with some ', 'bold', ' and some ', 'italic')"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> doc.paragraphs[1].runs[0].style = 'QuoteChar'<br>>>> doc.paragraphs[1].runs[1].underline = True<br>>>> doc.paragraphs[1].runs[3].underline = True<br>>>> doc.save('restyled.docx')"
	},
	{
		"component": "text",
		"value": "Here, we use the text and style attributes to easily see what’s in the paragraphs in our document. We can see that it’s simple to divide a paragraph into runs and access each run individiaully. So we get the first, second, and fourth runs in the second paragraph, style each run, and <span style=\"\">save</span> the results to a new document."
	},
	{
		"component": "text",
		"value": "The words Document Title at the top of restyled.docx will have the Normal style instead of the Title style, the Run object for the text A plain paragraph with some will have the QuoteChar style, and the two Run objects for the words bold and italic will have their underline attributes set to <span style=\"\">True</span>. Figure 13-7 shows how the styles of paragraphs and runs look in restyled.docx."
	},
	{
		"component": "text",
		"value": "Figure 13-7. The restyled.docx <span style=\"\">file</span>"
	},
	{
		"component": "text",
		"value": "You can find more complete documentation on <span style=\"\">Python</span>-Docx’s use of styles at <span><a href=\"https://<span style=\"\">python</span>-docx.readthedocs.org/en/latest/user/styles.html.\"&gt;https://<span style=\"\">python</span>-docx.readthedocs.org/en/latest/user/styles.html.</a></span>"
	}
]