[
	{
		"component": "header",
		"variant": 1,
		"value": "Practice Projects"
	},
	{
		"component": "text",
		"value": "For practice, write programs that do the following."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "PDF Paranoia"
	},
	{
		"component": "text",
		"value": "Using the os.walk() function from Chapter 9, write a script that will go through every PDF in a folder (and its subfolders) and encrypt the PDFs using a password provided on the command line. <span style=\"\">Save</span> each encrypted PDF with an _encrypted.pdf suffix added to the original <span style=\"\">file</span>name. Before deleting the original <span style=\"\">file</span>, have the program attempt to read and decrypt the <span style=\"\">file</span> to ensure that it was encrypted correctly.<br>Then, write a program that finds all encrypted PDFs in a folder (and its subfolders) and creates a decrypted copy of the PDF using a provided password. If the password is incorrect, the program should print a message to the user and continue to the next PDF."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Custom Invitations as Word Documents"
	},
	{
		"component": "text",
		"value": "Say you have a text <span style=\"\">file</span> of guest names. This guests.txt <span style=\"\">file</span> has one name per line, as follows:<br>Prof. Plum<br>Miss Scarlet<br>Col. Mustard<br>Al Sweigart<br>Robocop<br>Write a program that would generate a Word document with custom invitations that look like Figure 13-11.<br>Since <span style=\"\">Python</span>-Docx can use only those styles that already exist in the Word document, you will have to first add these styles to a blank Word <span style=\"\">file</span> and then open that <span style=\"\">file</span> with <span style=\"\">Python</span>-Docx. There should be one invitation per page in the resulting Word document, so call add_break() to add a page break after the last paragraph of each invitation. This way, you will need to open only one Word document to print all of the invitations at once."
	},
	{
		"component": "text",
		"value": "Figure 13-11. The Word document generated by your custom invite script"
	},
	{
		"component": "text",
		"value": "You can download a sample guests.txt <span style=\"\">file</span> from <span><a href=\" http://nostarch.com/automatestuff/.\"> http://nostarch.com/automatestuff/.</a></span>"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Brute-Force PDF Password Breaker"
	},
	{
		"component": "text",
		"value": "Say you have an encrypted PDF that you have forgotten the password to, but you remember it was a single English word. Trying to guess your forgotten password is quite a boring task. Instead you can write a program that will decrypt the PDF by trying every possible English word until it finds one that works. This is called a brute-force password attack. Download the text <span style=\"\">file</span> dictionary.txt from <span><a href=\"http://nostarch.com/automatestuff/\">http://nostarch.com/automatestuff/</a></span>. This dictionary <span style=\"\">file</span> contains over 44,000 English words with one word per line."
	},
	{
		"component": "text",
		"value": "Using the <span style=\"\">file</span>-reading skills you learned in Chapter 8, create a list of word <span style=\"\">strings</span> by reading this <span style=\"\">file</span>. Then <span style=\"\">loop</span> over each word in this list, passing it to the decrypt() method. If this method returns the <span style=\"\">integer</span> 0, the password was wrong and your program should continue to the next password. If decrypt() returns 1, then your program should break out of the <span style=\"\">loop</span> and print the hacked password. You should try both the uppercase and lower-case form of each word. (On my laptop, going through all 88,000 uppercase and lowercase words from the dictionary <span style=\"\">file</span> takes a couple of minutes. This is why you shouldnâ€™t use a simple English word for your passwords.)"
	}
]