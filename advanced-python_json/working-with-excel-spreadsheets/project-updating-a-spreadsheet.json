[
	{
		"component": "header",
		"variant": 1,
		"value": "Project: Updating a Spreadsheet"
	},
	{
		"component": "text",
		"value": "In this project, you’ll write a program to update cells in a spreadsheet of produce sales. Your program will look through the spreadsheet, find specific kinds of produce, and update their prices. Download this spreadsheet from <span><a href=\"http://nostarch.com/automatestuff/\">http://nostarch.com/automatestuff/</a></span>. Figure 12-3 shows what the spreadsheet looks like."
	},
	{
		"component": "text",
		"value": "Figure 12-3. A spreadsheet of produce sales"
	},
	{
		"component": "text",
		"value": "Each row represents an individual sale. The columns are the type of produce sold (A), the cost per pound of that produce (B), the number of pounds sold (C), and the total revenue from the sale (D). The TOTAL column is set to the Excel formula =ROUND(B3*C3, 2), which multiplies the cost per pound by the number of pounds sold and rounds the result to the nearest cent. With this formula, the cells in the TOTAL column will automatically update themselves if there is a change in column B or C.<br>Now imagine that the prices of garlic, celery, and lemons were entered incorrectly, leaving you with the boring task of going through thousands of rows in this spreadsheet to update the cost per pound for any garlic, celery, and lemon rows. You can’t do a simple find-and-replace for the price because there might be other items with the same price that you don’t want to mistakenly “correct.” For thousands of rows, this would take hours to do by hand. But you can write a program that can accomplish this in seconds.<br>Your program does the following:<br><span style=\"\">Loops</span> over all the rows.<br>If the row is for garlic, celery, or lemons, changes the price.<br>This means your <span style=\"\">code</span> will need to do the following:<br>Open the spreadsheet <span style=\"\">file</span>.<br>For each row, check whether the value in column A is Celery, Garlic, or Lemon.<br>If it is, update the price in column B.<br><span style=\"\">Save</span> the spreadsheet to a new <span style=\"\">file</span> (so that you don’t lose the old spreadsheet, just in case)."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Step 1: Set Up a Data Structure with the Update Information"
	},
	{
		"component": "text",
		"value": "The prices that you need to update are as follows:<br>Celery<br>1.19<br>Garlic<br>3.07<br>Lemon<br>1.27<br>You could write <span style=\"\">code</span> like this:<br>if produceName == 'Celery':<br>    cellObj = 1.19<br>if produceName == 'Garlic':<br>    cellObj = 3.07<br>if produceName == 'Lemon':<br>    cellObj = 1.27<br>Having the produce and updated price data hard<span style=\"\">code</span>d like this is a bit inelegant. If you needed to update the spreadsheet again with different prices or different produce, you would have to change a lot of the <span style=\"\">code</span>. Every time you change <span style=\"\">code</span>, you risk introducing bugs.<br>A more flexible solution is to store the corrected price information in a dictionary and write your <span style=\"\">code</span> to use this data structure. In a new <span style=\"\">file</span> <span style=\"\">editor</span> window, enter the following <span style=\"\">code</span>:<br>#! <span style=\"\">python3</span>"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "updateProduce.py - Corrects costs in produce sales spreadsheet."
	},
	{
		"component": "text",
		"value": "import openpyxl<br>wb = openpyxl.load<i>workbook('produceSales.xlsx')<br>sheet = wb.get</i>sheet<i>by</i>name('Sheet')"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "The produce types and their updated prices"
	},
	{
		"component": "text",
		"value": "PRICE_UPDATES = {'Garlic': 3.07,<br>                 'Celery': 1.19,<br>                 'Lemon': 1.27}"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "TODO: <span style=\"\">Loop</span> through the rows and update the prices."
	},
	{
		"component": "text",
		"value": "<span style=\"\">Save</span> this as updateProduce.py. If you need to update the spreadsheet again, you’ll need to update only the PRICE_UPDATES dictionary, not any other <span style=\"\">code</span>."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Step 2: Check All Rows and Update Incorrect Prices"
	},
	{
		"component": "text",
		"value": "The next part of the program will <span style=\"\">loop</span> through all the rows in the spreadsheet. Add the following <span style=\"\">code</span> to the bottom of updateProduce.py:<br>   #! <span style=\"\">python3</span>"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "updateProduce.py - Corrects costs in produce sales spreadsheet."
	},
	{
		"component": "text",
		"value": "--snip--"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "<span style=\"\">Loop</span> through the rows and update the prices."
	},
	{
		"component": "text",
		"value": "❶ for rowNum in range(2, sheet.max<i>row):  # skip the first row<br>❷     produceName = sheet.cell(row=rowNum, column=1).value<br>❸     if produceName in PRICE</i>UPDATES:<br>           sheet.cell(row=rowNum, column=2).value = PRICE<i>UPDATES[produceName]<br>❹ wb.<span style=\"\">save</span>('updatedProduceSales.xlsx')<br>We <span style=\"\">loop</span> through the rows starting at row 2, since row 1 is just the header ❶. The cell in column 1 (that is, column A) will be stored in the <span style=\"\">variable</span> produceName ❷. If produceName exists as a <span style=\"\">key</span> in the PRICE</i>UPDATES dictionary ❸, then you know this is a row that must have its price corrected. The correct price will be in PRICE<i>UPDATES[produceName].<br>Notice how clean using PRICE</i>UPDATES makes the <span style=\"\">code</span>. Only one if <span style=\"\">statement</span>, rather than <span style=\"\">code</span> like if produceName == 'Garlic':, is necessary for every type of produce to update. And since the <span style=\"\">code</span> uses the PRICE<i>UPDATES dictionary instead of hardcoding the produce names and updated costs into the for <span style=\"\">loop</span>, you modify only the PRICE</i>UPDATES dictionary and not the <span style=\"\">code</span> if the produce sales spreadsheet needs additional changes.<br>After going through the entire spreadsheet and making changes, the <span style=\"\">code</span> <span style=\"\">saves</span> the Workbook object to updatedProduceSales.xlsx ❹. It doesn’t overwrite the old spreadsheet just in case there’s a bug in your program and the updated spreadsheet is wrong. After checking that the updated spreadsheet looks right, you can delete the old spreadsheet.<br>You can download the complete source <span style=\"\">code</span> for this program from <span><a href=\"http://nostarch.com/automatestuff/.\">http://nostarch.com/automatestuff/.</a></span><br>Ideas for Similar Programs<br>Since many office workers use Excel spreadsheets all the time, a program that can automatically edit and write Excel <span style=\"\">files</span> could be really useful. Such a program could do the following:<br>Read data from one spreadsheet and write it to parts of other spreadsheets.<br>Read data from websites, text <span style=\"\">files</span>, or the clipboard and write it to a spreadsheet.<br>Automatically “clean up” data in spreadsheets. For example, it could use regular expressions to read multiple formats of phone numbers and edit them to a single, standard format."
	}
]