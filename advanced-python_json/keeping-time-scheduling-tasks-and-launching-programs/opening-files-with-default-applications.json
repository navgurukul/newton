[
	{
		"component": "header",
		"variant": 1,
		"value": "Opening <span style=\"\">Files</span> with Default <span style=\"\">Applications</span>"
	},
	{
		"component": "text",
		"value": "Double-clicking a .txt <span style=\"\">file</span> on your computer will automatically launch the <span style=\"\">application</span> associated with the .txt <span style=\"\">file</span> extension. Your computer will have several of these <span style=\"\">file</span> extension associations set up already. <span style=\"\">Python</span> can also open <span style=\"\">files</span> this way with Popen()."
	},
	{
		"component": "text",
		"value": "Each operating system has a program that performs the equivalent of double-clicking a document <span style=\"\">file</span> to open it. On Windows, this is the start program. On OS X, this is the open program. On Ubuntu Linux, this is the see program. Enter the following into the interactive <span style=\"\">shell</span>, passing 'start', 'open', or 'see' to Popen() depending on your system:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> fileObj = open('hello.txt', 'w')<br>>>> fileObj.write('Hello world!')"
	},
	{
		"component": "text",
		"value": "12"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> fileObj.close()<br>>>> import subprocess<br>>>> subprocess.Popen(['start', 'hello.txt'], shell=True)"
	},
	{
		"component": "text",
		"value": "Here we write Hello world! to a new hello.txt <span style=\"\">file</span>. Then we call Popen(), passing it a list containing the program name (in this example, 'start' for Windows) and the <span style=\"\">file</span>name. We also pass the <span style=\"\">shell</span>=<span style=\"\">True</span> <span style=\"\">key</span>word argument, which is needed only on Windows. The operating system knows all of the <span style=\"\">file</span> associations and can figure out that it should launch, say, Notepad.exe to handle the hello.txt <span style=\"\">file</span>."
	},
	{
		"component": "text",
		"value": "On OS X, the open program is used for opening both document <span style=\"\">files</span> and programs. Enter the following into the interactive <span style=\"\">shell</span> if you have a Mac:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> subprocess.Popen(['open', '/Applications/Calculator.app/'])<br><subprocess.Popen object at 0x10202ff98>"
	},
	{
		"component": "text",
		"value": "The Calculator app should open."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "The UNIX Philosophy"
	},
	{
		"component": "text",
		"value": "Programs well designed to be launched by other programs become more powerful than their <span style=\"\">code</span> alone. The Unix philosophy is a set of software design principles es<span style=\"\">tab</span>lished by the programmers of the Unix operating system (on which the modern Linux and OS X are built). It says that it’s better to write small, limited-purpose programs that can interoperate, rather than large, feature-rich <span style=\"\">applications</span>. The smaller programs are easier to understand, and by being interoperable, they can be the building blocks of much more powerful <span style=\"\">applications</span>."
	},
	{
		"component": "text",
		"value": "Smartphone apps follow this approach as well. If your restaurant app needs to display directions to a café, the developers didn’t reinvent the wheel by writing their own map <span style=\"\">code</span>. The restaurant app simply launches a map app while passing it the café’s address, just as your <span style=\"\">Python</span> <span style=\"\">code</span> would call a function and pass it arguments."
	},
	{
		"component": "text",
		"value": "The <span style=\"\">Python</span> programs you’ve been writing in this book mostly fit the Unix philosophy, especially in one important way: They use command line arguments rather than <span style=\"\">input</span>() function calls. If all the information your program needs can be supplied up front, it is preferable to have this information passed as command line arguments rather than waiting for the user to type it in. This way, the command line arguments can be entered by a human user or supplied by another program. This interoperable approach will make your programs reusable as part of another program."
	},
	{
		"component": "text",
		"value": "The sole exception is that you don’t want passwords passed as command line arguments, since the command line may record them as part of its command history feature. Instead, your program should call the <span style=\"\">input</span>() function when it needs you to enter a password."
	},
	{
		"component": "text",
		"value": "You can read more about Unix philosophy at <span><a href=\" https://en.wikipedia.org/wiki/Unix_philosophy/.\"> https://en.wikipedia.org/wiki/Unix_philosophy/.</a></span>"
	}
]