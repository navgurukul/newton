[
	{
		"component": "header",
		"variant": 1,
		"value": "Multithreading"
	},
	{
		"component": "text",
		"value": "To introduce the concept of multithreading, let’s look at an example situation. Say you want to schedule some <span style=\"\">code</span> to run after a delay or at a specific time. You could add <span style=\"\">code</span> like the following at the start of your program:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "import time, datetime<br><br>startTime = datetime.datetime(2029, 10, 31, 0, 0, 0)<br>while datetime.datetime.now() < startTime:<br>    time.sleep(1)<br><br>print('Program now starting on Halloween 2029')"
	},
	{
		"component": "text",
		"value": "--snip--<br>This <span style=\"\">code</span> designates a start time of October 31, 2029, and keeps calling time.sleep(1) until the start time arrives. Your program cannot do anything while waiting for the <span style=\"\">loop</span> of time.sleep() calls to finish; it just sits around until Halloween 2029. This is because <span style=\"\">Python</span> programs by default have a single thread of execution."
	},
	{
		"component": "text",
		"value": "To understand what a thread of execution is, remember the Chapter 2 discussion of flow control, when you imagined the execution of a program as placing your finger on a line of <span style=\"\">code</span> in your program and moving to the next line or wherever it was sent by a flow control <span style=\"\">statement</span>. A single-threaded program has only one finger. But a multithreaded program has multiple fingers. Each finger still moves to the next line of <span style=\"\">code</span> as defined by the flow control <span style=\"\">statements</span>, but the fingers can be at different places in the program, executing different lines of <span style=\"\">code</span> at the same time. (All of the programs in this book so far have been single threaded.)"
	},
	{
		"component": "text",
		"value": "Rather than having all of your <span style=\"\">code</span> wait until the time.sleep() function finishes, you can <span style=\"\">execute</span> the delayed or scheduled <span style=\"\">code</span> in a separate thread using <span style=\"\">Python</span>’s threading module. The separate thread will pause for the time.sleep calls. Meanwhile, your program can do other work in the original thread."
	},
	{
		"component": "text",
		"value": "To make a separate thread, you first need to make a Thread object by calling the threading.Thread() function. Enter the following <span style=\"\">code</span> in a new <span style=\"\">file</span> and <span style=\"\">save</span> it as threadDemo.py:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "import threading, time<br>   print('Start of program.')<br><br>❶ def takeANap():<br>       time.sleep(5)<br>       print('Wake up!')<br><br>❷ threadObj = threading.Thread(target=takeANap)<br>❸ threadObj.start()<br><br>   print('End of program.')"
	},
	{
		"component": "text",
		"value": "At ❶, we define a function that we want to use in a new thread. To create a Thread object, we call threading.Thread() and pass it the <span style=\"\">key</span>word argument target=takeANap ❷. This means the function we want to call in the new thread is takeANap(). Notice that the <span style=\"\">key</span>word argument is target=takeANap, not target=takeANap(). This is because you want to pass the takeANap() function itself as the argument, not call takeANap() and pass its return value."
	},
	{
		"component": "text",
		"value": "After we store the Thread object created by threading.Thread() in threadObj, we call threadObj.start() ❸ to create the new thread and start executing the target function in the new thread. When this program is run, the <span style=\"\">output</span> will look like this:"
	},
	{
		"component": "text",
		"value": "Start of program.<br>End of program.<br>Wake up!<br>This can be a bit confusing. If print('End of program.') is the last line of the program, you might think that it should be the last thing printed. The reason Wake up! comes after it is that when threadObj.start() is called, the target function for threadObj is run in a new thread of execution. Think of it as a second finger appearing at the start of the takeANap() function. The main thread continues to print('End of program.'). Meanwhile, the new thread that has been executing the time.sleep(5) call, pauses for 5 seconds. After it wakes from its 5-second nap, it prints 'Wake up!' and then returns from the takeANap() function. Chronologically, 'Wake up!' is the last thing printed by the program."
	},
	{
		"component": "text",
		"value": "Normally a program terminates when the last line of <span style=\"\">code</span> in the <span style=\"\">file</span> has run (or the sys.exit() function is called). But threadDemo.py has two threads. The first is the original thread that began at the start of the program and ends after print('End of program.'). The second thread is created when threadObj.start() is called, begins at the start of the takeANap() function, and ends after takeANap() returns."
	},
	{
		"component": "text",
		"value": "A <span style=\"\">Python</span> program will not terminate until all its threads have terminated. When you ran threadDemo.py, even though the original thread had terminated, the second thread was still executing the time.sleep(5) call."
	}
]