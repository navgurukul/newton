[
	{
		"component": "header",
		"variant": 1,
		"value": "Launching Other Programs from <span style=\"\">Python</span>"
	},
	{
		"component": "text",
		"value": "Your <span style=\"\">Python</span> program can start other programs on your computer with the Popen() function in the built-in subprocess module. (The P in the name of the Popen() function stands for process.) If you have multiple instances of an <span style=\"\">application</span> open, each of those instances is a separate process of the same program. For example, if you open multiple windows of your web browser at the same time, each of those windows is a different process of the web browser program. See Figure 15-1 for an example of multiple calculator processes open at once."
	},
	{
		"component": "text",
		"value": "Every process can have multiple threads. Unlike threads, a process cannot directly read and write another process’s <span style=\"\">variables</span>. If you think of a multithreaded program as having multiple fingers following source <span style=\"\">code</span>, then having multiple processes of the same program open is like having a friend with a separate copy of the program’s source <span style=\"\">code</span>. You are both independently executing the same program."
	},
	{
		"component": "text",
		"value": "If you want to start an external program from your <span style=\"\">Python</span> script, pass the program’s <span style=\"\">file</span>name to subprocess.Popen(). (On Windows, right-click the <span style=\"\">application</span>’s Start menu item and select Properties to view the <span style=\"\">application</span>’s <span style=\"\">file</span>name. On OS X, CTRL-click the <span style=\"\">application</span> and select Show Package Contents to find the path to the execu<span style=\"\">tab</span>le <span style=\"\">file</span>.) The Popen() function will then immediately return. Keep in mind that the launched program is not run in the same thread as your <span style=\"\">Python</span> program."
	},
	{
		"component": "text",
		"value": "Figure 15-1. Six running processes of the same calculator program"
	},
	{
		"component": "text",
		"value": "On a Windows computer, enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> import subprocess<br>>>> subprocess.Popen('C:\\\\Windows\\\\System32\\\\calc.exe')"
	},
	{
		"component": "text",
		"value": "<subprocess.Popen object at 0x0000000003055A58><br>On Ubuntu Linux, you would enter the following:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> import subprocess<br>>>> subprocess.Popen('/usr/bin/gnome-calculator')"
	},
	{
		"component": "text",
		"value": "<subprocess.Popen object at 0x7f2bcf93b20><br>On OS X, the process is slightly different. See Opening <span style=\"\">Files</span> with Default <span style=\"\">Applications</span>."
	},
	{
		"component": "text",
		"value": "The return value is a Popen object, which has two useful methods: poll() and wait()."
	},
	{
		"component": "text",
		"value": "You can think of the poll() method as asking your friend if she’s finished running the <span style=\"\">code</span> you gave her. The poll() method will return None if the process is still running at the time poll() is called. If the program has terminated, it will return the process’s <span style=\"\">integer</span> exit <span style=\"\">code</span>. An exit <span style=\"\">code</span> is used to indicate whether the process terminated without <span style=\"\">errors</span> (an exit <span style=\"\">code</span> of 0) or whether an <span style=\"\">error</span> caused the process to terminate (a nonzero exit <span style=\"\">code</span>—generally 1, but it may vary depending on the program)."
	},
	{
		"component": "text",
		"value": "The wait() method is like waiting for your friend to finish working on her <span style=\"\">code</span> before you keep working on yours. The wait() method will block until the launched process has terminated. This is helpful if you want your program to pause until the user finishes with the other program. The return value of wait() is the process’s <span style=\"\">integer</span> exit <span style=\"\">code</span>."
	},
	{
		"component": "text",
		"value": "On Windows, enter the following into the interactive <span style=\"\">shell</span>. Note that the wait() call will block until you quit the launched calculator program."
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "❶ >>> calcProc = subprocess.Popen('c:\\\\Windows\\\\System32\\\\calc.exe')<br>❷ >>> calcProc.poll() == None"
	},
	{
		"component": "text",
		"value": "<span style=\"\">True</span>"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "❸ >>> calcProc.wait()"
	},
	{
		"component": "text",
		"value": "0"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> calcProc.poll()"
	},
	{
		"component": "text",
		"value": "0<br>Here we open a calculator process ❶. While it’s still running, we check if poll() returns None ❷. It should, as the process is still running. Then we close the calculator program and call wait() on the terminated process ❸. wait() and poll() now return 0, indicating that the process terminated without <span style=\"\">errors</span>."
	}
]