[
	{
		"component": "header",
		"variant": 1,
		"value": "Project: Simple Countdown Program"
	},
	{
		"component": "text",
		"value": "Just like it’s hard to find a simple stopwatch <span style=\"\">application</span>, it can be hard to find a simple countdown <span style=\"\">application</span>. Let’s write a countdown program that plays an alarm at the end of the countdown."
	},
	{
		"component": "text",
		"value": "At a high level, here’s what your program will do:"
	},
	{
		"component": "text",
		"value": "Count down from 60."
	},
	{
		"component": "text",
		"value": "Play a sound <span style=\"\">file</span> (alarm.wav) when the countdown reaches zero."
	},
	{
		"component": "text",
		"value": "This means your <span style=\"\">code</span> will need to do the following:"
	},
	{
		"component": "text",
		"value": "Pause for one second in between displaying each number in the countdown by calling time.sleep()."
	},
	{
		"component": "text",
		"value": "Call subprocess.Popen() to open the sound <span style=\"\">file</span> with the default <span style=\"\">application</span>."
	},
	{
		"component": "text",
		"value": "Open a new <span style=\"\">file</span> <span style=\"\">editor</span> window and <span style=\"\">save</span> it as countdown.py."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Step 1: Count Down"
	},
	{
		"component": "text",
		"value": "This program will require the time module for the time.sleep() function and the subprocess module for the subprocess.Popen() function. Enter the following <span style=\"\">code</span> and <span style=\"\">save</span> the <span style=\"\">file</span> as countdown.py:"
	},
	{
		"component": "text",
		"value": "#! <span style=\"\">python3</span>"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "countdown.py - A simple countdown script."
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "import time, subprocess<br><br>❶ timeLeft = 60<br>   while timeLeft > 0:<br>❷     print(timeLeft, end='')<br>❸     time.sleep(1)<br>❹     timeLeft = timeLeft - 1"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "TODO: At the end of the countdown, play a sound <span style=\"\">file</span>."
	},
	{
		"component": "text",
		"value": "After importing time and subprocess, make a <span style=\"\">variable</span> called timeLeft to hold the number of seconds left in the countdown ❶. It can start at 60—or you can change the value here to whatever you need or even have it get set from a command line argument."
	},
	{
		"component": "text",
		"value": "In a while <span style=\"\">loop</span>, you display the remaining count ❷, pause for one second ❸, and then decrement the timeLeft <span style=\"\">variable</span> ❹ before the <span style=\"\">loop</span> starts over again. The <span style=\"\">loop</span> will keep <span style=\"\">loop</span>ing as long as timeLeft is greater than 0. After that, the countdown will be over."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Step 2: Play the Sound <span style=\"\">File</span>"
	},
	{
		"component": "text",
		"value": "While there are third-party modules to play sound <span style=\"\">files</span> of various formats, the quick and easy way is to just launch whatever <span style=\"\">application</span> the user already uses to play sound <span style=\"\">files</span>. The operating system will figure out from the .wav <span style=\"\">file</span> extension which <span style=\"\">application</span> it should launch to play the <span style=\"\">file</span>. This .wav <span style=\"\">file</span> could easily be some other sound <span style=\"\">file</span> format, such as .mp3 or .ogg."
	},
	{
		"component": "text",
		"value": "You can use any sound <span style=\"\">file</span> that is on your computer to play at the end of the countdown, or you can download alarm.wav from <span><a href=\"http://nostarch.com/automatestuff/.\">http://nostarch.com/automatestuff/.</a></span>"
	},
	{
		"component": "text",
		"value": "Add the following to your <span style=\"\">code</span>:"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "!<span style=\"\">python3</span>"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "countdown.py - A simple countdown script."
	},
	{
		"component": "text",
		"value": "import time, subprocess"
	},
	{
		"component": "text",
		"value": "--snip--"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "# At the end of the countdown, play a sound file.<br>subprocess.Popen(['start', 'alarm.wav'], shell=True)"
	},
	{
		"component": "text",
		"value": "After the while <span style=\"\">loop</span> finishes, alarm.wav (or the sound <span style=\"\">file</span> you choose) will play to notify the user that the countdown is over. On Windows, be sure to include 'start' in the list you pass to Popen() and pass the <span style=\"\">key</span>word argument <span style=\"\">shell</span>=<span style=\"\">True</span>. On OS X, pass 'open' instead of 'start' and remove <span style=\"\">shell</span>=<span style=\"\">True</span>."
	},
	{
		"component": "text",
		"value": "Instead of playing a sound <span style=\"\">file</span>, you could <span style=\"\">save</span> a text <span style=\"\">file</span> somewhere with a message like Break time is over! and use Popen() to open it at the end of the countdown. This will effectively create a pop-up window with a message. Or you could use the webbrowser.open() function to open a specific website at the end of the countdown. Unlike some free countdown <span style=\"\">application</span> you’d find online, your own countdown program’s alarm can be anything you want!"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Ideas for Similar Programs"
	},
	{
		"component": "text",
		"value": "A countdown is a simple delay before continuing the program’s execution. This can also be used for other <span style=\"\">applications</span> and features, such as the following:"
	},
	{
		"component": "text",
		"value": "Use time.sleep() to give the user a chance to press CTRL-C to cancel an action, such as deleting <span style=\"\">files</span>. Your program can print a “Press CTRL-C to cancel” message and then handle any <span style=\"\">Key</span>boardInterrupt exceptions with try and except <span style=\"\">statements</span>."
	},
	{
		"component": "text",
		"value": "For a long-term countdown, you can use timedelta objects to measure the number of days, hours, minutes, and seconds until some point (a birthday? an anniversary?) in the future."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Summary"
	},
	{
		"component": "text",
		"value": "The Unix epoch (January 1, 1970, at midnight, UTC) is a standard reference time for many programming languages, including <span style=\"\">Python</span>. While the time.time() function module returns an epoch timestamp (that is, a <span style=\"\">float</span> value of the number of seconds since the Unix epoch), the datetime module is better for performing date arithmetic and formatting or parsing <span style=\"\">strings</span> with date information."
	},
	{
		"component": "text",
		"value": "The time.sleep() function will block (that is, not return) for a certain number of seconds. It can be used to add pauses to your program. But if you want to schedule your programs to start at a certain time, the instructions at <span><a href=\"http://nostarch.com/automatestuff/\">http://nostarch.com/automatestuff/</a></span> can tell you how to use the scheduler already provided by your operating system."
	},
	{
		"component": "text",
		"value": "The threading module is used to create multiple threads, which is useful when you need to download multiple <span style=\"\">files</span> or do other tasks simultaneously. But make sure the thread reads and writes only local <span style=\"\">variables</span>, or you might run into concurrency issues."
	},
	{
		"component": "text",
		"value": "Finally, your <span style=\"\">Python</span> programs can launch other <span style=\"\">applications</span> with the subprocess.Popen() function. Command line arguments can be passed to the Popen() call to open specific documents with the <span style=\"\">application</span>. Alternatively, you can use the start, open, or see program with Popen() to use your computer’s <span style=\"\">file</span> associations to automatically figure out which <span style=\"\">application</span> to use to open a document. By using the other <span style=\"\">applications</span> on your computer, your <span style=\"\">Python</span> programs can leverage their capabilities for your automation needs."
	}
]