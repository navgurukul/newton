[
	{
		"component": "header",
		"variant": 1,
		"value": "Project: Multithreaded XKCD Downloader"
	},
	{
		"component": "text",
		"value": "In Chapter 11, you wrote a program that downloaded all of the XKCD comic strips from the XKCD website. This was a single-threaded program: It downloaded one comic at a time. Much of the program’s running time was spent es<span style=\"\">tab</span>lishing the network connection to begin the download and writing the downloaded images to the hard drive. If you have a broadband Internet connection, your single-threaded program wasn’t fully utilizing the available bandwidth."
	},
	{
		"component": "text",
		"value": "A multithreaded program that has some threads downloading comics while others are es<span style=\"\">tab</span>lishing connections and writing the comic image <span style=\"\">files</span> to disk uses your Internet connection more efficiently and downloads the collection of comics more quickly. Open a new <span style=\"\">file</span> <span style=\"\">editor</span> window and <span style=\"\">save</span> it as multidownloadXkcd.py. You will modify this program to add multithreading. The completely modified source <span style=\"\">code</span> is available to download from <span><a href=\"http://nostarch.com/automatestuff/.\">http://nostarch.com/automatestuff/.</a></span>"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Step 1: Modify the Program to Use a Function"
	},
	{
		"component": "text",
		"value": "This program will mostly be the same downloading <span style=\"\">code</span> from Chapter 11, so I’ll skip the explanation for the Requests and BeautifulSoup <span style=\"\">code</span>. The main changes you need to make are importing the threading module and making a downloadXkcd() function, which takes starting and ending comic numbers as parameters."
	},
	{
		"component": "text",
		"value": "For example, calling downloadXkcd(140, 280) would <span style=\"\">loop</span> over the downloading <span style=\"\">code</span> to download the comics at <span><a href=\"http://xkcd.com/140\">http://xkcd.com/140</a></span>, <span><a href=\"http://xkcd.com/141\">http://xkcd.com/141</a></span>, <span><a href=\"http://xkcd.com/142\">http://xkcd.com/142</a></span>, and so on, up to <span><a href=\"http://xkcd.com/279\">http://xkcd.com/279</a></span>. Each thread that you create will call downloadXkcd() and pass a different range of comics to download."
	},
	{
		"component": "text",
		"value": "Add the following <span style=\"\">code</span> to your multidownloadXkcd.py program:"
	},
	{
		"component": "text",
		"value": "#! <span style=\"\">python3</span>"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "multidownloadXkcd.py - Downloads XKCD comics using multiple threads."
	},
	{
		"component": "text",
		"value": "import requests, os, bs4, threading<br>❶ os.makedirs('xkcd', exist_ok=<span style=\"\">True</span>) # store comics in ./xkcd"
	},
	{
		"component": "text",
		"value": "❷ def downloadXkcd(startComic, endComic):<br>❸     for urlNumber in range(startComic, endComic + 1):<br>           # Download the page.<br>           print('Downloading page "
	},
	{
		"component": "text",
		"value": "http://xkcd.com/%s…'"
	},
	{
		"component": "text",
		"value": "% (urlNumber))<br>❹         res = requests.get('"
	},
	{
		"component": "text",
		"value": "http://xkcd.com/%s'"
	},
	{
		"component": "text",
		"value": "% (urlNumber))<br>           res.raise<i>for</i>status()"
	},
	{
		"component": "text",
		"value": "❺         soup = bs4.BeautifulSoup(res.text)"
	},
	{
		"component": "text",
		"value": "# Find the URL of the comic image."
	},
	{
		"component": "text",
		"value": "❻         comicElem = soup.select('#comic img')<br>           if comicElem == []:<br>               print('Could not find comic image.')<br>           else:<br>❼             comicUrl = comicElem[0].get('src')<br>               # Download the image.<br>               print('Downloading image %s…' % (comicUrl))<br>❽             res = requests.get(comicUrl)<br>               res.raise<i>for</i>status()"
	},
	{
		"component": "text",
		"value": "# Save the image to ./xkcd.<br>           imageFile = open(os.path.join('xkcd', os.path.basename(comicUrl)), 'wb')<br>           for chunk in res.iter_content(100000):<br>               imageFile.write(chunk)<br>           imageFile.close()"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "TODO: Create and start the Thread objects."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "TODO: Wait for all threads to end."
	},
	{
		"component": "text",
		"value": "After importing the modules we need, we make a directory to store comics in ❶ and start defining downloadxkcd() ❷. We <span style=\"\">loop</span> through all the numbers in the specified range ❸ and download each page ❹. We use Beautiful Soup to look through the HTML of each page ❺ and find the comic image ❻. If no comic image is found on a page, we print a message. Otherwise, we get the URL of the image ❼ and download the image ❽. Finally, we <span style=\"\">save</span> the image to the directory we created."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Step 2: Create and Start Threads"
	},
	{
		"component": "text",
		"value": "Now that we’ve defined downloadXkcd(), we’ll create the multiple threads that each call downloadXkcd() to download different ranges of comics from the XKCD website. Add the following <span style=\"\">code</span> to multidownloadXkcd.py after the downloadXkcd() function definition:"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "!<span style=\"\">python3</span>"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "multidownloadXkcd.py - Downloads XKCD comics using multiple threads."
	},
	{
		"component": "text",
		"value": "--snip--"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "# Create and start the Thread objects.<br>downloadThreads = []             # a list of all the Thread objects<br>for i in range(0, 1400, 100):    # loops 14 times, creates 14 threads<br>    downloadThread = threading.Thread(target=downloadXkcd, args=(i, i + 99))<br>    downloadThreads.append(downloadThread)<br>    downloadThread.start()"
	},
	{
		"component": "text",
		"value": "First we make an empy list downloadThreads; the list will help us keep track of the many Thread objects we’ll create. Then we start our for <span style=\"\">loop</span>. Each time through the <span style=\"\">loop</span>, we create a Thread object with threading.Thread(), append the Thread object to the list, and call start() to start running downloadXkcd() in the new thread. Since the for <span style=\"\">loop</span> sets the i <span style=\"\">variable</span> from 0 to 1400 at steps of 100, i will be set to 0 on the first iteration, 100 on the second iteration, 200 on the third, and so on. Since we pass args=(i, i + 99) to threading.Thread(), the two arguments passed to downloadXkcd() will be 0 and 99 on the first iteration, 100 and 199 on the second iteration, 200 and 299 on the third, and so on."
	},
	{
		"component": "text",
		"value": "As the Thread object’s start() method is called and the new thread begins to run the <span style=\"\">code</span> inside downloadXkcd(), the main thread will continue to the next iteration of the for <span style=\"\">loop</span> and create the next thread."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Step 3: Wait for All Threads to End"
	},
	{
		"component": "text",
		"value": "The main thread moves on as normal while the other threads we create download comics. But say there’s some <span style=\"\">code</span> you don’t want to run in the main thread until all the threads have completed. Calling a Thread object’s join() method will block until that thread has finished. By using a for <span style=\"\">loop</span> to iterate over all the Thread objects in the downloadThreads list, the main thread can call the join() method on each of the other threads. Add the following to the bottom of your program:"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "!<span style=\"\">python3</span>"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "multidownloadXkcd.py - Downloads XKCD comics using multiple threads."
	},
	{
		"component": "text",
		"value": "--snip--"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "# Wait for all threads to end.<br>for downloadThread in downloadThreads:<br>    downloadThread.join()<br>print('Done.')"
	},
	{
		"component": "text",
		"value": "The 'Done.' <span style=\"\">string</span> will not be printed until all of the join() calls have returned. If a Thread object has already completed when its join() method is called, then the method will simply return immediately. If you wanted to extend this program with <span style=\"\">code</span> that runs only after all of the comics downloaded, you could replace the print('Done.') line with your new <span style=\"\">code</span>."
	}
]