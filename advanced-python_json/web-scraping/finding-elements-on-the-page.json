[
	{
		"component": "header",
		"variant": 1,
		"value": "Finding Elements on the Page"
	},
	{
		"component": "text",
		"value": "WebDriver objects have quite a few methods for finding elements on a page. They are divided into the find<i>element</i>* and find<i>elements</i>* methods. The find<i>element</i>* methods return a single WebElement object, representing the first element on the page that matches your query. The find<i>elements</i>* methods return a list of WebElement_* objects for every matching element on the page."
	},
	{
		"component": "text",
		"value": "<span style=\"\">Tab</span>le 11-3 shows several examples of find<i>element</i>* and find<i>elements</i>* methods being called on a WebDriver object that’s stored in the <span style=\"\">variable</span> browser."
	},
	{
		"component": "text",
		"value": "<span style=\"\">Tab</span>le 11-3. Selenium’s WebDriver Methods for Finding Elements"
	},
	{
		"component": "text",
		"value": "Method name"
	},
	{
		"component": "text",
		"value": "WebElement object/list returned"
	},
	{
		"component": "text",
		"value": "browser.find<i>element</i>by<i>class</i>name(name)<br>browser.find<i>elements</i>by<i>class</i>name(name)<br>Elements that use the CSS class name"
	},
	{
		"component": "text",
		"value": "browser.find<i>element</i>by<i>css</i>selector(selector)<br>browser.find<i>elements</i>by<i>css</i>selector(selector)<br>Elements that match the CSS selector"
	},
	{
		"component": "text",
		"value": "browser.find<i>element</i>by<i>id(id)<br>browser.find</i>elements<i>by</i>id(id)<br>Elements with a matching id attribute value"
	},
	{
		"component": "text",
		"value": "browser.find<i>element</i>by<i>link</i>text(text)<br>browser.find<i>elements</i>by<i>link</i>text(text)<br><a> elements that completely match the text provided"
	},
	{
		"component": "text",
		"value": "browser.find<i>element</i>by<i>partial</i>link<i>text(text)<br>browser.find</i>elements<i>by</i>partial<i>link</i>text(text)<br><a> elements that contain the text provided"
	},
	{
		"component": "text",
		"value": "browser.find<i>element</i>by<i>name(name)<br>browser.find</i>elements<i>by</i>name(name)<br>Elements with a matching name attribute value"
	},
	{
		"component": "text",
		"value": "browser.find<i>element</i>by<i>tag</i>name(name)<br>browser.find<i>elements</i>by<i>tag</i>name(name)<br>Elements with a matching tag name (case insensitive; an <a> element is matched by 'a' and 'A')"
	},
	{
		"component": "text",
		"value": "Except for the *<i>by</i>tag<i>name() methods, the arguments to all the methods are case sensitive. If no elements exist on the page that match what the method is looking for, the selenium module raises a NoSuchElement exception. If you do not want this exception to crash your program, add try and except <span style=\"\">statements</span> to your <span style=\"\">code</span>.<br>Once you have the WebElement object, you can find out more about it by reading the attributes or calling the methods in <span style=\"\">Tab</span>le 11-4.<br><span style=\"\">Tab</span>le 11-4. WebElement Attributes and Methods<br>Attribute or method                                 Description<br>tag</i>name                                             The tag name, such as 'a' for an <a> element<br>get<i>attribute(name)                                 The value for the element’s name attribute<br>text                                                 The text within the element, such as 'hello' in <span>hello</span><br>clear()                                                For text field or text area elements, clears the text typed into it<br>is</i>displayed()                                         Returns <span style=\"\">True</span> if the element is visible; otherwise returns <span style=\"\">False</span><br>is<i>enabled()                                         For <span style=\"\">input</span> elements, returns <span style=\"\">True</span> if the element is enabled; otherwise returns <span style=\"\">False</span><br>is</i>selected()                                        For checkbox or radio button elements, returns <span style=\"\">True</span> if the element is selected; otherwise returns <span style=\"\">False</span><br>location                                            A dictionary with <span style=\"\">keys</span> 'x' and 'y' for the position of the element in the page<br>For example, open a new <span style=\"\">file</span> <span style=\"\">editor</span> and enter the following program:<br>from selenium import webdriver<br>browser = webdriver.Firefox()<br>browser.get('<span><a href=\"http://inventwith<span style=\"\">python</span>.com'\">http://inventwith<span style=\"\">python</span>.com'</a></span>)<br>try:<br>    elem = browser.find<i>element</i>by<i>class</i>name('bookcover')<br>    print('Found <%s> element with that class name!' % (elem.tag<i>name))<br>except:<br>    print('Was not able to find an element with that name.')<br>Here we open Firefox and direct it to a URL. On this page, we try to find elements with the class name 'bookcover', and if such an element is found, we print its tag name using the tag</i>name attribute. If no such element was found, we print a different message.<br>This program will <span style=\"\">output</span> the following:<br>Found <img> element with that class name!<br>We found an element with the class name 'bookcover' and the tag name 'img'."
	}
]