[
	{
		"component": "header",
		"variant": 1,
		"value": "Writing to <span style=\"\">Files</span>"
	},
	{
		"component": "text",
		"value": "<span style=\"\">Python</span> allows you to write content to a <span style=\"\">file</span> in a way similar to how the print() function “writes” <span style=\"\">strings</span> to the screen. You can’t write to a <span style=\"\">file</span> you’ve opened in read mode, though. Instead, you need to open it in “write plaintext” mode or “append plaintext” mode, or write mode and append mode for short."
	},
	{
		"component": "text",
		"value": "Write mode will overwrite the existing <span style=\"\">file</span> and start from scratch, just like when you overwrite a <span style=\"\">variable</span>’s value with a new value. Pass 'w' as the second argument to open() to open the <span style=\"\">file</span> in write mode. Append mode, on the other hand, will append text to the end of the existing <span style=\"\">file</span>. You can think of this as appending to a list in a <span style=\"\">variable</span>, rather than overwriting the <span style=\"\">variable</span> altogether. Pass 'a' as the second argument to open() to open the <span style=\"\">file</span> in append mode."
	},
	{
		"component": "text",
		"value": "If the <span style=\"\">file</span>name passed to open() does not exist, both write and append mode will create a new, blank <span style=\"\">file</span>. After reading or writing a <span style=\"\">file</span>, call the close() method before opening the <span style=\"\">file</span> again."
	},
	{
		"component": "text",
		"value": "Let’s put these concepts together. Enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> baconFile = open('bacon.txt', 'w')<br>>>> baconFile.write('Hello world!\\n')"
	},
	{
		"component": "text",
		"value": "13"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> baconFile.close()<br>>>> baconFile = open('bacon.txt', 'a')<br>>>> baconFile.write('Bacon is not a vegetable.')"
	},
	{
		"component": "text",
		"value": "25"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> baconFile.close()<br>>>> baconFile = open('bacon.txt')<br>>>> content = baconFile.read()<br>>>> baconFile.close()<br>>>> print(content)"
	},
	{
		"component": "text",
		"value": "Hello world!<br>Bacon is not a vege<span style=\"\">tab</span>le.<br>First, we open bacon.txt in write mode. Since there isn’t a bacon.txt yet, <span style=\"\">Python</span> creates one. Calling write() on the opened <span style=\"\">file</span> and passing write() the <span style=\"\">string</span> argument 'Hello world! /n' writes the <span style=\"\">string</span> to the <span style=\"\">file</span> and returns the number of characters written, including the newline. Then we close the <span style=\"\">file</span>."
	},
	{
		"component": "text",
		"value": "To add text to the existing contents of the <span style=\"\">file</span> instead of replacing the <span style=\"\">string</span> we just wrote, we open the <span style=\"\">file</span> in append mode. We write 'Bacon is not a vege<span style=\"\">tab</span>le.' to the <span style=\"\">file</span> and close it. Finally, to print the <span style=\"\">file</span> contents to the screen, we open the <span style=\"\">file</span> in its default read mode, call read(), store the resulting <span style=\"\">File</span> object in content, close the <span style=\"\">file</span>, and print content."
	},
	{
		"component": "text",
		"value": "Note that the write() method does not automatically add a newline character to the end of the <span style=\"\">string</span> like the print() function does. You will have to add this character yourself."
	}
]