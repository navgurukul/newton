[
	{
		"component": "header",
		"variant": 1,
		"value": "Chapter 7"
	},
	{
		"component": "text",
		"value": "The re.compile() function returns Regex objects."
	},
	{
		"component": "text",
		"value": "Raw <span style=\"\">strings</span> are used so that backslashes do not have to be escaped."
	},
	{
		"component": "text",
		"value": "The search() method returns Match objects."
	},
	{
		"component": "text",
		"value": "The group() method returns <span style=\"\">strings</span> of the matched text."
	},
	{
		"component": "text",
		"value": "Group 0 is the entire match, group 1 covers the first set of parentheses, and group 2 covers the second set of parentheses."
	},
	{
		"component": "text",
		"value": "Periods and parentheses can be escaped with a backslash: ., (, and )."
	},
	{
		"component": "text",
		"value": "If the regex has no groups, a list of <span style=\"\">strings</span> is returned. If the regex has groups, a list of tuples of <span style=\"\">strings</span> is returned."
	},
	{
		"component": "text",
		"value": "The | character signifies matching “either, or” between two groups."
	},
	{
		"component": "text",
		"value": "The ? character can either mean “match zero or one of the preceding group” or be used to signify nongreedy matching."
	},
	{
		"component": "text",
		"value": "The + matches one or more. The * matches zero or more."
	},
	{
		"component": "text",
		"value": "The {3} matches exactly three instances of the preceding group. The {3,5} matches between three and five instances."
	},
	{
		"component": "text",
		"value": "The \\d, \\w, and \\s shorthand character classes match a single digit, word, or space character, respectively."
	},
	{
		"component": "text",
		"value": "The \\D, \\W, and \\S shorthand character classes match a single character that is not a digit, word, or space character, respectively."
	},
	{
		"component": "text",
		"value": "Passing re.I or re.IGNORECASE as the second argument to re.compile() will make the matching case insensitive."
	},
	{
		"component": "text",
		"value": "The . character normally matches any character except the newline character. If re.DOTALL is passed as the second argument to re.compile(), then the dot will also match newline characters."
	},
	{
		"component": "text",
		"value": "The .* performs a greedy match, and the .<i>? performs a nongreedy match.<br>Either [0-9a-z] or [a-z0-9]<br>'X drummers, X pipers, five rings, X hens'<br>The re.VERBOSE argument allows you to add whitespace and comments to the <span style=\"\">string</span> passed to re.compile().<br>re.compile(r'^\\d{1,3}(,\\d{3})</i>$') will create this regex, but other regex <span style=\"\">strings</span> can produce a similar regular expression."
	},
	{
		"component": "text",
		"value": "re.compile(r'[A-Z][a-z]*\\sNakamoto')<br>re.compile(r'(Alice|Bob|Carol)\\s(eats|pets|throws)\\s(apples|cats|baseballs).', re.IGNORECASE)"
	}
]