[
	{
		"component": "header",
		"variant": 1,
		"value": "Exception Handling"
	},
	{
		"component": "text",
		"value": "Right now, getting an <span style=\"\">error</span>, or exception, in your <span style=\"\">Python</span> program means the entire program will crash. You don’t want this to happen in real-world programs. Instead, you want the program to detect <span style=\"\">errors</span>, handle them, and then continue to run."
	},
	{
		"component": "text",
		"value": "For example, consider the following program, which has a “divide-by-zero” <span style=\"\">error</span>. Open a new <span style=\"\">file</span> <span style=\"\">editor</span> window and enter the following <span style=\"\">code</span>, saving it as zeroDivide.py:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "def spam(divideBy):<br>    return 42 / divideBy<br><br>print(spam(2))<br>print(spam(12))<br>print(spam(0))<br>print(spam(1))"
	},
	{
		"component": "text",
		"value": "We’ve defined a function called spam, given it a parameter, and then printed the value of that function with various parameters to see what happens. This is the <span style=\"\">output</span> you get when you run the previous <span style=\"\">code</span>:"
	},
	{
		"component": "text",
		"value": "21.0<br>3.5<br>Traceback (most recent call last):<br>  <span style=\"\">File</span> \"C:/zeroDivide.py\", line 6, in <module><br>    print(spam(0))<br>  <span style=\"\">File</span> \"C:/zeroDivide.py\", line 2, in spam<br>    return 42 / divideBy<br>ZeroDivision<span style=\"\">Error</span>: division by zero<br>A ZeroDivision<span style=\"\">Error</span> happens whenever you try to divide a number by zero. From the line number given in the <span style=\"\">error</span> message, you know that the return <span style=\"\">statement</span> in spam() is causing an <span style=\"\">error</span>."
	},
	{
		"component": "text",
		"value": "<span style=\"\">Errors</span> can be handled with try and except <span style=\"\">statements</span>. The <span style=\"\">code</span> that could potentially have an <span style=\"\">error</span> is put in a try clause. The program execution moves to the start of a following except clause if an <span style=\"\">error</span> happens."
	},
	{
		"component": "text",
		"value": "You can put the previous divide-by-zero <span style=\"\">code</span> in a try clause and have an except clause contain <span style=\"\">code</span> to handle what happens when this <span style=\"\">error</span> occurs."
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "def spam(divideBy):<br>    try:<br>        return 42 / divideBy<br>    except ZeroDivisionError:<br>        print('Error: Invalid argument.')<br><br>print(spam(2))<br>print(spam(12))<br>print(spam(0))<br>print(spam(1))"
	},
	{
		"component": "text",
		"value": "When <span style=\"\">code</span> in a try clause causes an <span style=\"\">error</span>, the program execution immediately moves to the <span style=\"\">code</span> in the except clause. After running that <span style=\"\">code</span>, the execution continues as normal. The <span style=\"\">output</span> of the previous program is as follows:"
	},
	{
		"component": "text",
		"value": "21.0<br>3.5<br><span style=\"\">Error</span>: Invalid argument.<br>None<br>42.0<br>Note that any <span style=\"\">errors</span> that occur in function calls in a try block will also be caught. Consider the following program, which instead has the spam() calls in the try block:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "def spam(divideBy):<br>    return 42 / divideBy<br><br>try:<br>    print(spam(2))<br>    print(spam(12))<br>    print(spam(0))<br>    print(spam(1))<br>except ZeroDivisionError:<br>    print('Error: Invalid argument.')"
	},
	{
		"component": "text",
		"value": "When this program is run, the <span style=\"\">output</span> looks like this:"
	},
	{
		"component": "text",
		"value": "21.0<br>3.5<br><span style=\"\">Error</span>: Invalid argument.<br>The reason print(spam(1)) is never <span style=\"\">execute</span>d is because once the execution jumps to the <span style=\"\">code</span> in the except clause, it does not return to the try clause. Instead, it just continues moving down as normal."
	}
]