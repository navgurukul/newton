[
	{
		"component": "header",
		"variant": 1,
		"value": "Return Values and return <span style=\"\">Statements</span>"
	},
	{
		"component": "text",
		"value": "When you call the len() function and pass it an argument such as 'Hello', the function call evaluates to the <span style=\"\">integer</span> value 5, which is the length of the <span style=\"\">string</span> you passed it. In general, the value that a function call evaluates to is called the return value of the function."
	},
	{
		"component": "text",
		"value": "When creating a function using the def <span style=\"\">statement</span>, you can specify what the return value should be with a return <span style=\"\">statement</span>. A return <span style=\"\">statement</span> consists of the following:"
	},
	{
		"component": "text",
		"value": "The return <span style=\"\">key</span>word"
	},
	{
		"component": "text",
		"value": "The value or expression that the function should return"
	},
	{
		"component": "text",
		"value": "When an expression is used with a return <span style=\"\">statement</span>, the return value is what this expression evaluates to. For example, the following program defines a function that returns a different <span style=\"\">string</span> depending on what number it is passed as an argument. Type this <span style=\"\">code</span> into the <span style=\"\">file</span> <span style=\"\">editor</span> and <span style=\"\">save</span> it as magic8Ball.py:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "❶ import random<br>❷ def getAnswer(answerNumber):<br>❸     if answerNumber == 1:<br>           return 'It is certain'<br>       elif answerNumber == 2:<br>           return 'It is decidedly so'<br>       elif answerNumber == 3:<br>           return 'Yes'<br>       elif answerNumber == 4:<br>           return 'Reply hazy try again'<br>       elif answerNumber == 5:<br>           return 'Ask again later'<br>       elif answerNumber == 6:<br>           return 'Concentrate and ask again'<br>       elif answerNumber == 7:<br>           return 'My reply is no'<br>       elif answerNumber == 8:<br>           return 'Outlook not so good'<br>       elif answerNumber == 9:<br>           return 'Very doubtful'"
	},
	{
		"component": "text",
		"value": "❹ r = random.randint(1, 9)<br>❺ fortune = getAnswer(r)<br>❻ print(fortune)<br>When this program starts, <span style=\"\">Python</span> first imports the random module ❶. Then the getAnswer() function is defined ❷. Because the function is being defined (and not called), the execution skips over the <span style=\"\">code</span> in it. Next, the random.randint() function is called with two arguments, 1 and 9 ❹. It evaluates to a random <span style=\"\">integer</span> between 1 and 9 (including 1 and 9 themselves), and this value is stored in a <span style=\"\">variable</span> named r."
	},
	{
		"component": "text",
		"value": "The getAnswer() function is called with r as the argument ❺. The program execution moves to the top of the getAnswer() function ❸, and the value r is stored in a parameter named answerNumber. Then, depending on this value in answerNumber, the function returns one of many possible <span style=\"\">string</span> values. The program execution returns to the line at the bottom of the program that originally called getAnswer() ❺. The returned <span style=\"\">string</span> is assigned to a <span style=\"\">variable</span> named fortune, which then gets passed to a print() call ❻ and is printed to the screen."
	},
	{
		"component": "text",
		"value": "Note that since you can pass return values as an argument to another function call, you could shorten these three lines:"
	},
	{
		"component": "text",
		"value": "r = random.randint(1, 9)<br>fortune = getAnswer(r)<br>print(fortune)<br>to this single equivalent line:"
	},
	{
		"component": "text",
		"value": "print(getAnswer(random.randint(1, 9)))<br>Remember, expressions are composed of values and <span style=\"\">operators</span>. A function call can be used in an expression because it evaluates to its return value."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "The None Value"
	},
	{
		"component": "text",
		"value": "In <span style=\"\">Python</span> there is a value called None, which represents the absence of a value. None is the only value of the NoneType data type. (Other programming languages might call this value null, nil, or undefined.) Just like the Boolean <span style=\"\">True</span> and <span style=\"\">False</span> values, None must be typed with a capital N."
	},
	{
		"component": "text",
		"value": "This value-without-a-value can be helpful when you need to store something that won’t be confused for a real value in a <span style=\"\">variable</span>. One place where None is used is as the return value of print(). The print() function displays text on the screen, but it doesn’t need to return anything in the same way len() or <span style=\"\">input</span>() does. But since all function calls need to evaluate to a return value, print() returns None. To see this in action, enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> spam = print('Hello!')"
	},
	{
		"component": "text",
		"value": "Hello!"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> None == spam"
	},
	{
		"component": "text",
		"value": "<span style=\"\">True</span><br>Behind the scenes, <span style=\"\">Python</span> adds return None to the end of any function definition with no return <span style=\"\">statement</span>. This is similar to how a while or for <span style=\"\">loop</span> implicitly ends with a continue <span style=\"\">statement</span>. Also, if you use a return <span style=\"\">statement</span> without a value (that is, just the return <span style=\"\">key</span>word by itself), then None is returned."
	}
]