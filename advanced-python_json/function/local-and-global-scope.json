[
	{
		"component": "header",
		"variant": 1,
		"value": "Local and Global Scope"
	},
	{
		"component": "text",
		"value": "Parameters and <span style=\"\">variables</span> that are assigned in a called function are said to exist in that function’s local scope. <span style=\"\">Variables</span> that are assigned outside all functions are said to exist in the global scope. A <span style=\"\">variable</span> that exists in a local scope is called a local <span style=\"\">variable</span>, while a <span style=\"\">variable</span> that exists in the global scope is called a global <span style=\"\">variable</span>. A <span style=\"\">variable</span> must be one or the other; it cannot be both local and global."
	},
	{
		"component": "text",
		"value": "Think of a scope as a container for <span style=\"\">variables</span>. When a scope is destroyed, all the values stored in the scope’s <span style=\"\">variables</span> are forgotten. There is only one global scope, and it is created when your program begins. When your program terminates, the global scope is destroyed, and all its <span style=\"\">variables</span> are forgotten. Otherwise, the next time you ran your program, the <span style=\"\">variables</span> would remember their values from the last time you ran it."
	},
	{
		"component": "text",
		"value": "A local scope is created whenever a function is called. Any <span style=\"\">variables</span> assigned in this function exist within the local scope. When the function returns, the local scope is destroyed, and these <span style=\"\">variables</span> are forgotten. The next time you call this function, the local <span style=\"\">variables</span> will not remember the values stored in them from the last time the function was called."
	},
	{
		"component": "text",
		"value": "Scopes matter for several reasons:"
	},
	{
		"component": "text",
		"value": "<span style=\"\">Code</span> in the global scope cannot use any local <span style=\"\">variables</span>."
	},
	{
		"component": "text",
		"value": "However, a local scope can access global <span style=\"\">variables</span>."
	},
	{
		"component": "text",
		"value": "<span style=\"\">Code</span> in a function’s local scope cannot use <span style=\"\">variables</span> in any other local scope."
	},
	{
		"component": "text",
		"value": "You can use the same name for different <span style=\"\">variables</span> if they are in different scopes. That is, there can be a local <span style=\"\">variable</span> named spam and a global <span style=\"\">variable</span> also named spam."
	},
	{
		"component": "text",
		"value": "The reason <span style=\"\">Python</span> has different scopes instead of just making everything a global <span style=\"\">variable</span> is so that when <span style=\"\">variables</span> are modified by the <span style=\"\">code</span> in a particular call to a function, the function interacts with the rest of the program only through its parameters and the return value. This narrows down the list <span style=\"\">code</span> lines that may be causing a bug. If your program contained nothing but global <span style=\"\">variables</span> and had a bug because of a <span style=\"\">variable</span> being set to a bad value, then it would be hard to track down where this bad value was set. It could have been set from anywhere in the program—and your program could be hundreds or thousands of lines long! But if the bug is because of a local <span style=\"\">variable</span> with a bad value, you know that only the <span style=\"\">code</span> in that one function could have set it incorrectly."
	},
	{
		"component": "text",
		"value": "While using global <span style=\"\">variables</span> in small programs is fine, it is a bad habit to rely on global <span style=\"\">variables</span> as your programs get larger and larger."
	}
]