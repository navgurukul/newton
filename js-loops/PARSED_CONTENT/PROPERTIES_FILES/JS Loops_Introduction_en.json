{
	"Introduction_key1": "Example:\n",
	"Introduction_key2": "In the above example, I am printing Hello World 5 times by using console.log().  \n",
	"Introduction_key3": "But if one of our friends asks us to print Hello World 100 times, it will be really difficult  for us  to write or copy and paste Hello World 100 times.  \n",
	"Introduction_key4": "To resolve this issue in the programming `loop` comes in the picture. `Loop` helps us to do work again and again until the condition gets `false`.  \n",
	"Introduction_key5": "The above program will print Hello World 100 times.\n",
	"Introduction_key6": "We defined,  a =1, it will check while condition a<=100 (1<=100) that is `true`, so it will go to run the inside block of `code`  and console the Hello World first time, and increment a to 2.\n",
	"Introduction_key7": "Now a =2, it will check for a while condition a<=100 (2<=100) that is `true`, so it will go to run the inside block of `code`  and console the Hello World second time, and increment a to 3.\n",
	"Introduction_key8": "Now a =3, it will check for a while condition a<=100 (3<=100) that is `true`, so it will go to run the inside block of `code`  and console the Hello World third time, and increment a to 4.\n",
	"Introduction_key9": "Now a =2, it will check for a while condition a<=100 (4<=100) that is `true`, so it will go to run the inside block of `code`  and console the Hello World fourth time, and increment a to 5.\n…\n….\n….\n….\n……\n",
	"Introduction_key10": "…….\n",
	"Introduction_key11": "It will go upto 100, and print Hello World 100 th time and a is incremented to 101.\n",
	"Introduction_key12": "Now a =101, it will check for a while condition a<=100 (101<=100) that is clearly `false`, so it won't run inside `code` and it will end.\n",
	"Introduction_key13": "Have a look at another `Loop` example.\n",
	"Introduction_key14": "Example :\n",
	"Introduction_key15": "Explanation :\n",
	"Introduction_key16": "This `code` will print 1 to 100 without using console.log 100 times. This is because of the `loop`. `Loop` helps us to work on the sequence of the tasks.\n",
	"Introduction_key17": "We defined,  a =1, it will check for a while condition a<=100 (1<=100) that is `true`, so it will go to run the inside block of `code`  and console the 1 first time, and increment a to 2.\n",
	"Introduction_key18": "Now a =2, it will check for a while condition a<=100 (2<=100) that is `true`, so it will go to run the inside block of `code`  and console the 2 second time, and increment a to 3.\n",
	"Introduction_key19": "Now a =3, it will check for a while condition a<=100 (3<=100) that is `true`, so it will go to run the inside block of `code`  and console the 3 third time, and increment a to 4.\n",
	"Introduction_key20": "Now a =2, it will check for a while condition a<=100 (4<=100) that is `true`, so it will go to run the inside block of `code`  and console the 4 fourth time, and increment a to 5.\n…\n…\n…\n…\n...\n",
	"Introduction_key21": "…\n…\n…\n",
	"Introduction_key22": "It will go upto 100, and print 100 on 100 th time and a is incremented to 101.\n",
	"Introduction_key23": "Now a =101, it will check for a while condition a<=100 (101<=100) that is clearly `false`, so it won't run inside `code` and it will end.\n",
	"Introduction_key24": "Types of `loops`\n",
	"Introduction_key25": "There are five types of `loops` in JS.\n",
	"Introduction_key26": "while `loop`\n",
	"Introduction_key27": "for `loop`\n",
	"Introduction_key28": "do while `loop`\n",
	"Introduction_key29": "for in \n",
	"Introduction_key30": "for of\n"
}